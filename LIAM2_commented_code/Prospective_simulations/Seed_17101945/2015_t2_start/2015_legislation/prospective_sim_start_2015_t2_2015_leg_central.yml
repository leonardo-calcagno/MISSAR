# This is a LIAM2 simulation file. To run the simulation, press F6 if you are
# using the editor bundled with LIAM2, otherwise run the following command in a
# console: [BUNDLEPATH]\liam2\main run demo07.yml

#For this counterfactual simulation, we assume the late 2017 pension reforms Law 27426, 27430 and 27432 were not enforced. We therefore have to make the following changes
        #when compared to the 2018 legislation: 
    #1- We go back to the pension mobility formula established by Law 26417 issued in 2008. For the sake of simplicity, we assume this mobility index was simply equal to the
            #evolution of the real wages of formal workers (the RIPTE). The actual formula can be found in my PhD thesis' Appendix F. It mostly follows by 50% the 
            #evolution of the RIPTE and by 50% the evolution of fiscal revenus assigned to ANSES. Since in our model GDP growth is mostly determined by the evolution of
            #real wages (mostly linked to our hypothesised evolution of the RIPTE) and that most social security contributions are a percentage of wage-earners gross wage,
            #this assumption is close to the actual mobility index we would have found by fully implementing the Law 26417 pension mobility formula in our model. 
    #2- We set to 0 pesos the non-taxable income in what concerns employers contributions. 
    #3- We leave employer's contributions at 21% for the private service sector and 17% for the primary, secondary and public sectors. 
    #4- We eliminate the guarantee that sets contributory pensioners minimum pension at 82% of the minimum wage
    #5- We keep the detraction of the Income tax destined to ANSES.
#Points 1 to 3 are all applied by modifying the relevant variables in the globals dataset. To enact point 4, we commented out the lines of our code that established the 
        #82% guarantee to contributory pensioners. Point 5, finally, is not something we simulate in this model. It is undertaken at later steps, when we compute ANSES
        #aggregate economic result. 

#For this 2015 counter-factual  simulation, we go back to the late 2015 legislation. Therefore, all the above points for the 2017 counter-factual simulation are kept. 
        #There are however more differences if we go back to the 2015 legislation: 
    #1- We eliminate the Universal Pension for the Elderly Adult (PUAM). In this simulation, we will assume the Law 26970 pension moratorium is not extended and ends 
            #in September 2016 for both men and women.
        #We will, in a distinct file, re-launch the model assuming the Law 26970 pension moratorium becomes permanent.
    #2- The initial pension is exclusively computed with the indexes prevalent before June 2016, that followed past actualisation of all pensions. Therefore, 
            #we eliminate in this counter-factual scenario all the pension variables that have the _2 suffix. 
    #3- The children of small independent workers (or monotributistas) do not get contributory child benefits.     
#We do not need to change the globals file between the 2017 legislation counter-factual scenario and this simulation. 
globals:
    periodic:
        path: C:\Users\Leonardo\Documents\Git_MISSAR_model\MISSAR\LIAM2_commented_code\globals\globals_transposed_prosp_scenarios_2017_leg.csv 
        transposed: true
        fields: 
    #A large part of our economic scenarios revolve around fixed values of global variables. These change following historically observed values and our economic scenarios.
    #First, we list global variables related to real wages as estimated following the CPI or ANSES actualisation indexes.
    #All our real income variables are expressed in November 2014 pesos. 
            - GROSS_WAGE_CENTRAL_2014_T4: float
            - REAL_WAGE_CENTRAL: float
            - NET_WAGE_CENTRAL_2014_T4: float
            - ANSES_GROSS_WAGE_2014_T4: float
            - ANSES_NET_WAGE_2014_T4: float
            - MINIMUM_WAGE_CENTRAL_2014_T4: float
        #The CPI_ANSES_INDEX_CENTRAL is equal to the CPI divided by the ANSES actualisation index. 
            #It links real wage variables together (ANSES_GROSS_WAGE_2014_T4*CPI_ANSES_INDEX_CENTRAL=GROSS_WAGE_CENTRAL_2014_T4). 
            # This variable is useful for computing the family-group income.  
            - CPI_ANSES_INDEX_CENTRAL: float
            #The coefficient variables (h for men, f for women) are computed following Duc et. al. 2013
            - COEFFICIENT_H: float
            - COEFFICIENT_F: float
            # Here we list globals related to employer's contributions to social security and their modification following Law 27430 reform of December 2017.
            - CONT_PAT_1: float
            - CONT_PAT_2: float
            - CONT_PAT_4: float
            - NON_TAXABLE_INCOME_2014_T4: float
            #Then, we list variables related to social security contributions and categorisations
            - MIN_PENSION_CENTRAL_2014_T4: float
            - MAX_PENSION_CENTRAL_2014_T4: float
            #We add a global depicting the real increase of pensions each quarter based on the adopted pension mobility law. 
            #From the third quarter of 2018 onward, we assume it is equal to 30% of the real wage evolution. This is true as long as real wage increases at a fixed rate and 
            # that inflation stays the same, which we assume in our scenarios for the sake of simplicity. This is because the increase this quarter is 70% of the inflation and 30% of the RIPTE evolution 
            #two quarters ago, as per the 2017 pension reform.
            - REAL_MOBILITY_CENTRAL: float
            #The PBU is the Universal Basic Benefit. It enters in the computation of the retirement pension.
            - PBU_CENTRAL_2014_T4: float
            # MON refers to the small independent contributors regime or Monotributo. It is divided in income-dependent categories ranging from A to H. 
            # All real terms are expressed in November 2014 pesos, as actualised following official figures of the CPI.
            # LIM_MON_ACTU_CENTRAL_CAT_A:  income limit to belong to category A in real terms.
            # INT_TAX_MON_ACTU_CENTRAL_A: integrated tax associated to monotributo category A in real terms. 
            # SIPA_MON_ACTU_CENTRAL_A: social security contributions that go to the SIPA for category A monotributistas in real terms.
            # OBRA_MON_ACTU_CENTRAL_A: healthcare contributions that go to the category A monotributista's Obra Social in real terms.
            - LIM_MON_ACTU_CENTRAL_CAT_A: float
            - INT_TAX_MON_ACTU_CENTRAL_A: float
            - SIPA_MON_ACTU_CENTRAL_A: float
            - OBRA_MON_ACTU_CENTRAL_A: float
            - LIM_MON_ACTU_CENTRAL_CAT_B: float
            - INT_TAX_MON_ACTU_CENTRAL_B: float
            - SIPA_MON_ACTU_CENTRAL_B: float
            - OBRA_MON_ACTU_CENTRAL_B: float
            - LIM_MON_ACTU_CENTRAL_CAT_C: float
            - INT_TAX_MON_ACTU_CENTRAL_C: float
            - SIPA_MON_ACTU_CENTRAL_C: float
            - OBRA_MON_ACTU_CENTRAL_C: float
            - LIM_MON_ACTU_CENTRAL_CAT_D: float
            - INT_TAX_MON_ACTU_CENTRAL_D: float
            - SIPA_MON_ACTU_CENTRAL_D: float
            - OBRA_MON_ACTU_CENTRAL_D: float
            - LIM_MON_ACTU_CENTRAL_CAT_E: float
            - INT_TAX_MON_ACTU_CENTRAL_E: float
            - SIPA_MON_ACTU_CENTRAL_E: float
            - OBRA_MON_ACTU_CENTRAL_E: float
            - LIM_MON_ACTU_CENTRAL_CAT_F: float
            - INT_TAX_MON_ACTU_CENTRAL_F: float
            - SIPA_MON_ACTU_CENTRAL_F: float
            - OBRA_MON_ACTU_CENTRAL_F: float
            - LIM_MON_ACTU_CENTRAL_CAT_G: float
            - INT_TAX_MON_ACTU_CENTRAL_G: float
            - SIPA_MON_ACTU_CENTRAL_G: float
            - OBRA_MON_ACTU_CENTRAL_G: float
            - LIM_MON_ACTU_CENTRAL_CAT_H: float
            - INT_TAX_MON_ACTU_CENTRAL_H: float
            - SIPA_MON_ACTU_CENTRAL_H: float
            - OBRA_MON_ACTU_CENTRAL_H: float
            # AUT refers to independent workers that contribute to the Autonomous Workers regime.
            # Categories I and II are reserved for own-account workers while categories III to V are those of the entrepreneurs.
            # LIM_AUT_ACTU_I: income limit to belong to category I in real terms.
            # RENT_AUT_ACTU_I: reference income associated to category I in real terms.
            # COT_AUT_ACTU_CENTRAL_I: social security contributions of category I workers in real terms. 
            - LIM_AUT_ACTU_I: float
            - RENT_AUT_ACTU_I: float
            - COT_AUT_ACTU_CENTRAL_I: float
            - RENT_AUT_ACTU_II: float
            - COT_AUT_ACTU_CENTRAL_II: float
            - LIM_AUT_ACTU_III: float
            - RENT_AUT_ACTU_III: float
            - COT_AUT_ACTU_CENTRAL_III: float
            - LIM_AUT_ACTU_IV: float
            - RENT_AUT_ACTU_IV: float
            - COT_AUT_ACTU_CENTRAL_IV: float
            - RENT_AUT_ACTU_V: float
            - COT_AUT_ACTU_CENTRAL_V: float
            #Finally, we list below global variables related to family benefits. 
            # There are four relevant family income caps for child benefits. Cap 1 is the lowest in real terms, cap 4 is the highest (and exceeding it bars access to family benefits to formal workers)
            #We consider in this work as fmaily income only that of the nuclear family: that is, the child's parents. 
            - FAM_CAP_CENTRAL_1: float
            - FAM_CAP_CENTRAL_2: float
            - FAM_CAP_CENTRAL_3: float
            - FAM_CAP_CENTRAL_4: float
            # In addition to family income conditions, if one of the parents exceeds a cap (variable IND_FAM_CAP_CENTRAL), the couple is not eligible to family benefits.
            - IND_FAM_CAP_CENTRAL: float
            # Finally, we list the value in real terms (November 2014 pesos) of the family benefits we simulate in this model. 
            # BIRTH_BEN_CENTRAL and MAR_BEN_CENTRAL are one-time benefits given at the time of repsectively birth and mariage. SCHOOL_AID_CENTRAL is a yearly benefit for underage scholarised children. 
            # CHILD_BEN_CENTRAL_1 to 4 are the four means-tested levels of child benefits for formal wage-earners and monotributistas. 
            # CHILD_BEN_CENTRAL_1 is the highest and is resserved to the poorest wage-earners. It is also equal to the AUH. 
            # There are also for private-sector workers and AUH beneficiaries pregnancy benefits with the same amounts and perception conditions than child benefits.  
            # SPOUSE_BEN_CENTRAL finally is a monetary subsidy given to the spouses of SIPA retirees or pensioners. 
            # Since national state workers count as passive workers as far as family benefits are concerned, these receive spouse benefits but are excluded from pregnancy pensions. 
            - BIRTH_BEN_CENTRAL: float
            - MAR_BEN_CENTRAL: float
            - CHILD_BEN_CENTRAL_1: float
            - CHILD_BEN_CENTRAL_2: float
            - CHILD_BEN_CENTRAL_3: float
            - CHILD_BEN_CENTRAL_4: float
            - SCHOOL_AID_CENTRAL: float
            - SPOUSE_BEN_CENTRAL: float

        
entities:
    household:
        fields:
            # period and id are implicit
            # Regarding households, almost all variables are created during the simulation. Only the pre-existing weighting variable and id variable (household_id2) 
            # work at the household level.  
            - nb_persons:  {type: int, initialdata: false}
            - nb_children: {type: int, initialdata: false}
            - nb_lil_children: {type: int, initialdata: false}
            - igf_hh: {type: float, initialdata: false}
            - wage_earners_hh: {type: int, initialdata: false}
            - monotributistas_hh: {type: int, initialdata: false}
            - autonomous_hh: {type: int, initialdata: false}
            - inactive_hh: {type: int, initialdata: false}
            - max_itl_sal_hh: {type: float, initialdata: false}
            - max_monotributo_cat_hh: {type: int, initialdata: false}
            - id: int
            - pondera: int
            - household_id2: int
            
        links:
            persons: {type: one2many, target: person, field: household_id}

        processes:
        # We first carry out some processes with household entities. 
            household_composition:
                - nb_persons: persons.count()
                - nb_children: persons.count(age < 18)
                - nb_lil_children: persons.count(age < 5) 
            clean_empty: remove(nb_persons ==0)
            igf_household: 
            # IGF stands for family-group income. Since some family links cannot be correctly estimated in the EPHc, it is important to compute it for all individuals 
                    #living in the same household. Means-tested benefits (mainly family benefits) depend on the IGF, although we could not find in Argentina's legislation 
                    #a clear defintion of what must be considered as a "family group". 
            #Legislation: following Art. 2 of Decree 1667/2012, 
                #(...) must be considered as income [for the means-test of family benefits] registered wage-earners remuneration, the rents of reference 
                #of autonomous workers and monotributistas, pension income [be it contributive or non-contributive] (...)"
        #We therefore sum in variable IGF formal wages, rents of reference of people listed in the Autonomous workers regime and pension income (be them direct, survivor's benefits, or non-contributive pensions). 
        #Our rent_aut variable, depicting the rent of reference of Autonomous workers, is not however discounted with the CPI. Instead, it is discounted following 
                #ANSES discounting indexes. This is the discounting method necessary for computing retirement rights. We however need to discount it with the CPI
                #to compute the IGF. We thus add a conversion key between ANSES discounting and the Consumer's Price Index in our globals file, which converts 
                #the rent of reference into real November 2014 pesos discounted with official inflation figures. 
                - igf_hh: persons.sum(discounted_itl_sal_gross) + persons.sum(disc_cost_v2_m) + persons.sum(rent_aut*CPI_ANSES_INDEX_CENTRAL)
            # We need for some benefits to know what is the maximum income reached by a formal wage-earner and monotributo category for a given household. 
                - max_itl_sal_hh: persons.max(discounted_itl_sal_gross)
                - max_monotributo_cat_hh: persons.max(monotributo_cat)
            # We also need to count the total number of formal wage-earners, monotributistas, autonomous workers, inactive people and people that retired (excluding universal pensioners) in the household. 
                - wage_earners_hh: persons.count(IS_WAGE_EARNER)
                - monotributistas_hh: persons.count(lag_mono_1==1)
                - autonomous_hh: persons.count(lag_count_ind_1==1)
                - inactive_hh: persons.count(IS_INACTIVE)
            redistribution:
#This module computes the redistributive impact of social security benefits among households. This is to take advantage of one of the added values of microsimulation, 
        #studying the adequacy of social security benefits as well as their redistributive impact at the individual level
    #For the computation of descriptive statistics on redistribution (the Gini index, the interdecile quotient and the share of income respectively earned by the top 
            #and bottom 10%), we need to stay at the household level. This is because these indexes are usually computed on per capita income among the same household.
            # This captures the fact some workers / pensioners can provide for inactive people without revenue (typically, minors). 
    #We however have one out of 6 households (17 %)  that declare having no labour, family benefits or pension revenue in our first simulated period, while these were equal 
            #to 3% of households in the starting dataset. 
        #This is likely because a lot of new households are created with less individuals that do not always work.
                #Indeed, in the starting dataset there were 18909 households, while in our first simulated period we jump to 30069 households with 54% being 
                        #made up of one person and 20% of 2 persons. Our starting datasets had 18% of unipersonal households and 23% of households made up of 2 persons. 
    #Therefore, we decide to exclude from our compiutation of income redistribution households with no income (labour, pension or family benefits).
    
    #1- We compute various versions of household income. These are different combinations of labour, pension and family benefits income. 
        #First, we compute the household's total income. It is useful for determining the income share of the top and bottom deciles. 
            #We define a temporary value for retirement pension income. It takes into account the change in the computation of the initial pension starting June 2016.
                #COUNTERFACTUAL 2015: we take out discounted_v2_m_2
                - all_pension_income: persons.sum(discounted_v2_m)
                - all_income: persons.sum(discounted_itl)+ all_pension_income + persons.sum(discounted_v5_m)
                - all_labour_income: persons.sum(discounted_itl)
                - all_fam_benefits: persons.sum(discounted_v5_m)
        #Second, we compute various combinations of per capita income. The two most interesting comparisons are per capita income before and after social transfers.
                - per_capita_income: all_income/persons.count()
                - per_capita_labour_income: all_labour_income/persons.count()
                - per_capita_labour_pension_income: (all_labour_income + all_pension_income)/persons.count()
                - per_capita_labour_fam_ben_income: (all_labour_income + all_fam_benefits)/persons.count()
        #Third, we compute equivalised household income, using INSEE's and OCDE's methodology: the first adult in a household counts for 1, then each person aged 14 
                #or more counts for 0.5. Finally, all individuals aged 13 or less count for 0.3. The logic here is there are economies of scale derived from sharing 
                #a household, which increases the actual available income for each of the denizens. Also, the needs of the younger children are lesser to those 
                #of the bigger teenagers or the adults.
                - insee_income: if(persons.count()==0, 0, 
                                    if(persons.count()==1, 
                                        all_income/persons.count(),
                                            all_income/(1+ 0.5*persons.count(age>=14) + 0.3*persons.count(age<14))
                                        )
                                    )
                - insee_labour_income: if(persons.count()==0, 0, 
                                    if(persons.count()==1, 
                                        all_labour_income/persons.count(),
                                            all_labour_income/(1+ 0.5*persons.count(age>=14) + 0.3*persons.count(age<14))
                                        )
                                    )
                - insee_labour_pension_income: if(persons.count()==0, 0, 
                                    if(persons.count()==1, 
                                        (all_labour_income + all_pension_income)/persons.count(),
                                            (all_labour_income + all_pension_income)/(1+ 0.5*persons.count(age>=14) + 0.3*persons.count(age<14))
                                        )
                                    )
                - insee_labour_fam_ben_income: if(persons.count()==0, 0, 
                                    if(persons.count()==1, 
                                        (all_labour_income + all_fam_benefits)/persons.count(),
                                            (all_labour_income + all_fam_benefits)/(1+ 0.5*persons.count(age>=14) + 0.3*persons.count(age<14))
                                        )
                                    ) 
        #Fourth, we compute equivalised household income, using the La Plata University's SEDLAC laboratory benchmark equivalised household income. 
                #Developed jointly with the World Bank, in this approach each adult counts for 1, each kid aged 6 to 17 0.75 and each kid aged 5 or less 0.5.
                #Then the sum of these terms is taken up to the power 0.9. 
                - sedlac_income: all_income/((persons.count(age>=18)+0.75*persons.count(age>=6 and age<18) + 0.5*persons.count(age<=5))**0.9)
                - sedlac_labour_income: all_labour_income/((persons.count(age>=18)+0.75*persons.count(age>=6 and age<18) + 0.5*persons.count(age<=5))**0.9)
                - sedlac_labour_pension_income: (all_labour_income + all_pension_income)/((persons.count(age>=18)+0.75*persons.count(age>=6 and age<18) + 0.5*persons.count(age<=5))**0.9)
                - sedlac_labour_fam_ben_income: (all_labour_income + all_fam_benefits)/((persons.count(age>=18)+0.75*persons.count(age>=6 and age<18) + 0.5*persons.count(age<=5))**0.9)
                
    #2-We compute the gini of various definitions of per capita income.
        #First, we keep household income per capita, with no particular modifications, through varying studied income.
                - gini_all_income: gini(per_capita_income,
                                            filter=all_income!=0,weights=pondera)
                - gini_labour_income: gini(per_capita_labour_income,
                                            filter=all_labour_income!=0,weights=pondera)
                - gini_labour_pension_income: gini(per_capita_labour_pension_income,
                                            filter=all_pension_income + all_labour_income!=0,weights=pondera)
                - gini_labour_fam_benefits: gini(per_capita_labour_fam_ben_income,
                                            filter=all_labour_income+all_fam_benefits!=0,weights=pondera)
        #Second, we apply INSEE's and OCDE's method of estimating household disposable income.
                - gini_insee_all_income: gini(insee_income,
                                            filter=all_income!=0,weights=pondera)
                - gini_insee_labour_income: gini(insee_labour_income,
                                            filter=all_labour_income!=0,weights=pondera)
                - gini_insee_labour_pension_income: gini(insee_labour_pension_income,
                                            filter=all_pension_income + all_labour_income!=0,weights=pondera)
                - gini_insee_labour_fam_benefits: gini(insee_labour_fam_ben_income,
                                            filter=all_labour_income+all_fam_benefits!=0,weights=pondera)
        #Third, we apply the benchmark equivalised household income used by University of La Plata's SEDLAC laboratory. 
                - gini_sedlac_all_income: gini(sedlac_income,
                                            filter=all_income!=0,weights=pondera)
                - gini_sedlac_labour_income: gini(sedlac_labour_income,
                                            filter=all_labour_income!=0,weights=pondera)
                - gini_sedlac_labour_pension_income: gini(sedlac_labour_pension_income,
                                            filter=all_pension_income + all_labour_income!=0,weights=pondera)
                - gini_sedlac_labour_fam_benefits: gini(sedlac_labour_fam_ben_income,
                                            filter=all_labour_income+all_fam_benefits!=0,weights=pondera)
    #3- We compute the decile ratio between the top 10% and bottom 10% households ranked by different definitions of income          
        #First, we compute this statistic with per capita household income
                - decile_ratio_all_income: percentile(per_capita_income,90,
                                                filter=per_capita_income!=0,weights=pondera)
                                                    /percentile(per_capita_income,10,
                                                        filter=per_capita_income!=0,weights=pondera)
                - decile_ratio_labour_income: percentile(per_capita_labour_income,90,
                                                filter=per_capita_labour_income!=0,weights=pondera)
                                                    /percentile(per_capita_labour_income,10,
                                                        filter=per_capita_labour_income!=0,weights=pondera)
                - decile_ratio_labour_pension_income: percentile(per_capita_labour_pension_income,90,
                                                filter=per_capita_labour_pension_income!=0,weights=pondera)
                                                    /percentile(per_capita_labour_pension_income,10,
                                                        filter=per_capita_labour_pension_income!=0,weights=pondera)
                - decile_ratio_labour_fam_ben_income: percentile(per_capita_labour_fam_ben_income,90,
                                                filter=per_capita_labour_fam_ben_income!=0,weights=pondera)
                                                    /percentile(per_capita_labour_fam_ben_income,10,
                                                        filter=per_capita_labour_fam_ben_income!=0,weights=pondera)
        #Second, we apply INSEE's and OCDE's method of estimating household disposable income. 
                - decile_ratio_insee_all_income: percentile(insee_income,90,
                                                filter=insee_income!=0,weights=pondera)
                                                    /percentile(insee_income,10,
                                                        filter=insee_income!=0,weights=pondera)
                - decile_ratio_insee_labour_income: percentile(insee_labour_income,90,
                                                filter=insee_labour_income!=0,weights=pondera)
                                                    /percentile(insee_labour_income,10,
                                                        filter=insee_labour_income!=0,weights=pondera)
                - decile_ratio_insee_labour_pension_income: percentile(insee_labour_pension_income,90,
                                                filter=insee_labour_pension_income!=0,weights=pondera)
                                                    /percentile(insee_labour_pension_income,10,
                                                        filter=insee_labour_pension_income!=0,weights=pondera)
                - decile_ratio_insee_labour_fam_ben_income: percentile(insee_labour_fam_ben_income,90,
                                                filter=insee_labour_fam_ben_income!=0,weights=pondera)
                                                    /percentile(insee_labour_fam_ben_income,10,
                                                        filter=insee_labour_fam_ben_income!=0,weights=pondera)
        #Third, we apply the benchmark equivalised household income used by University of La Plata's SEDLAC laboratory. 
                - decile_ratio_sedlac_all_income: percentile(sedlac_income,90,
                                                filter=sedlac_income!=0,weights=pondera)
                                                    /percentile(sedlac_income,10,
                                                        filter=sedlac_income!=0,weights=pondera)
                - decile_ratio_sedlac_labour_income: percentile(sedlac_labour_income,90,
                                                filter=sedlac_labour_income!=0,weights=pondera)
                                                    /percentile(sedlac_labour_income,10,
                                                        filter=sedlac_labour_income!=0,weights=pondera)
                - decile_ratio_sedlac_labour_pension_income: percentile(sedlac_labour_pension_income,90,
                                                filter=sedlac_labour_pension_income!=0,weights=pondera)
                                                    /percentile(sedlac_labour_pension_income,10,
                                                        filter=sedlac_labour_pension_income!=0,weights=pondera)
                - decile_ratio_sedlac_labour_fam_ben_income: percentile(sedlac_labour_fam_ben_income,90,
                                                filter=sedlac_labour_fam_ben_income!=0,weights=pondera)
                                                    /percentile(sedlac_labour_fam_ben_income,10,
                                                        filter=sedlac_labour_fam_ben_income!=0,weights=pondera)
    #4- We compute the share of total income earned by the top and bottom 10% households, with varying sources of income (labour, pensions and family benefits)                                  
        #First, we classify households by their per capita income.        
                - share_top_10: sum(all_income,
                                            filter=per_capita_income>=percentile(per_capita_income,90,
                                                filter=per_capita_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_income,weights=pondera)
                - share_bottom_10: sum(all_income,
                                            filter=per_capita_income<=percentile(per_capita_income,10,
                                                filter=per_capita_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_income,weights=pondera)
                - share_top_10_labour: sum(all_labour_income,
                                            filter=per_capita_income>=percentile(per_capita_income,90,
                                                filter=per_capita_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income,weights=pondera)
                - share_bottom_10_labour: sum(all_labour_income,
                                            filter=per_capita_income<=percentile(per_capita_income,10,
                                                filter=per_capita_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income,weights=pondera)  
                - share_top_10_labour_pension: sum(all_labour_income+ all_pension_income,
                                            filter=per_capita_income>=percentile(per_capita_income,90,
                                                filter=per_capita_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_pension_income,weights=pondera)
                - share_bottom_10_labour_pension: sum(all_labour_income+ all_pension_income,
                                            filter=per_capita_income<=percentile(per_capita_income,10,
                                                filter=per_capita_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_pension_income,weights=pondera)     
                - share_top_10_labour_fam_ben: sum(all_labour_income+ all_fam_benefits,
                                            filter=per_capita_income>=percentile(per_capita_income,90,
                                                filter=per_capita_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_fam_benefits,weights=pondera)
                - share_bottom_10_labour_fam_ben: sum(all_labour_income+ all_fam_benefits,
                                            filter=per_capita_income<=percentile(per_capita_income,10,
                                                filter=per_capita_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_fam_benefits,weights=pondera)    
        #Second, we classify households by their equivalised income following INSEE and OCDE's consumptions units. 
                - share_top_10_insee: sum(all_income,
                                            filter=insee_income>=percentile(insee_income,90,
                                                filter=insee_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_income,weights=pondera)
                - share_bottom_10_insee: sum(all_income,
                                            filter=insee_income<=percentile(insee_income,10,
                                                filter=insee_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_income,weights=pondera)
                - share_top_10_insee_labour: sum(all_labour_income,
                                            filter=insee_income>=percentile(insee_income,90,
                                                filter=insee_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income,weights=pondera)
                - share_bottom_10_insee_labour: sum(all_labour_income,
                                            filter=insee_income<=percentile(insee_income,10,
                                                filter=insee_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income,weights=pondera)  
                - share_top_10_insee_labour_pension: sum(all_labour_income+ all_pension_income,
                                            filter=insee_income>=percentile(insee_income,90,
                                                filter=insee_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_pension_income,weights=pondera)
                - share_bottom_10_insee_labour_pension: sum(all_labour_income+ all_pension_income,
                                            filter=insee_income<=percentile(insee_income,10,
                                                filter=insee_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_pension_income,weights=pondera)     
                - share_top_10_insee_labour_fam_ben: sum(all_labour_income+ all_fam_benefits,
                                            filter=insee_income>=percentile(insee_income,90,
                                                filter=insee_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_fam_benefits,weights=pondera)
                - share_bottom_10_insee_labour_fam_ben: sum(all_labour_income+ all_fam_benefits,
                                            filter=insee_income<=percentile(insee_income,10,
                                                filter=insee_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_fam_benefits,weights=pondera)
        #Third, we classify households by their equivalised income following SEDLAC's methodology. 
                - share_top_10_sedlac: sum(all_income,
                                            filter=sedlac_income>=percentile(sedlac_income,90,
                                                filter=sedlac_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_income,weights=pondera)
                - share_bottom_10_sedlac: sum(all_income,
                                            filter=sedlac_income<=percentile(sedlac_income,10,
                                                filter=sedlac_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_income,weights=pondera)
                - share_top_10_sedlac_labour: sum(all_labour_income,
                                            filter=sedlac_income>=percentile(sedlac_income,90,
                                                filter=sedlac_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income,weights=pondera)
                - share_bottom_10_sedlac_labour: sum(all_labour_income,
                                            filter=sedlac_income<=percentile(sedlac_income,10,
                                                filter=sedlac_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income,weights=pondera)  
                - share_top_10_sedlac_labour_pension: sum(all_labour_income+ all_pension_income,
                                            filter=sedlac_income>=percentile(sedlac_income,90,
                                                filter=sedlac_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_pension_income,weights=pondera)
                - share_bottom_10_sedlac_labour_pension: sum(all_labour_income+ all_pension_income,
                                            filter=sedlac_income<=percentile(sedlac_income,10,
                                                filter=sedlac_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_pension_income,weights=pondera)     
                - share_top_10_sedlac_labour_fam_ben: sum(all_labour_income+ all_fam_benefits,
                                            filter=sedlac_income>=percentile(sedlac_income,90,
                                                filter=sedlac_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_fam_benefits,weights=pondera)
                - share_bottom_10_sedlac_labour_fam_ben: sum(all_labour_income+ all_fam_benefits,
                                            filter=sedlac_income<=percentile(sedlac_income,10,
                                                filter=sedlac_income!=0,weights=pondera),weights=pondera)
                                                    /sum(all_labour_income+all_fam_benefits,weights=pondera)                                                    
    # 5- We export these redistribution indicators into a separate csv file.                                                 
                - csv('Period', 'Gini per capita, all income', 'Gini per capita, labour income','Gini per capita, labour and pension income', 'Gini per capita, labour and family benefits income', 
                                'Decile ratio, all income', 'Decile ratio, labour income', 'Decile ratio, labour and pension income', 'Decile ratio, labour and familiy benefits income',
                                    'Top 10%, share of all income', 'Top 10%, share of labour income', 'Top 10%, share of labour and pension income', 'Top 10%, share of labour and familiy benefits income',
                                        'Bottom 10%, share of all income', 'Bottom 10%, share of labour income', 'Bottom 10%, share of labour and pension income', 'Bottom 10%, share of labour and familiy benefits income',
                                            fname='redistribution_central.csv',mode='a')
                - csv(period,gini_all_income,gini_labour_income,gini_labour_pension_income,gini_labour_fam_benefits,
                            decile_ratio_all_income, decile_ratio_labour_income, decile_ratio_labour_pension_income, decile_ratio_labour_fam_ben_income, 
                                share_top_10, share_top_10_labour,share_top_10_labour_pension,share_top_10_labour_fam_ben,
                                    share_bottom_10, share_bottom_10_labour,share_bottom_10_labour_pension,share_bottom_10_labour_fam_ben,
                                        fname='redistribution_central.csv',mode='a') 
        ################################################################################################################                                
                - csv('Period', 'Gini insee, all income', 'Gini insee, labour income','Gini insee, labour and pension income', 'Gini insee, labour and family benefits income', 
                                'Decile ratio, all income', 'Decile ratio, labour income', 'Decile ratio, labour and pension income', 'Decile ratio, labour and familiy benefits income',
                                    'Top 10%, share of all income', 'Top 10%, share of labour income', 'Top 10%, share of labour and pension income', 'Top 10%, share of labour and familiy benefits income',
                                        'Bottom 10%, share of all income', 'Bottom 10%, share of labour income', 'Bottom 10%, share of labour and pension income', 'Bottom 10%, share of labour and familiy benefits income',
                                            fname='redistribution_central_insee.csv',mode='a')
                - csv(period,gini_insee_all_income,gini_insee_labour_income,gini_insee_labour_pension_income,gini_insee_labour_fam_benefits,
                            decile_ratio_insee_all_income, decile_ratio_insee_labour_income, decile_ratio_insee_labour_pension_income, decile_ratio_insee_labour_fam_ben_income, 
                                share_top_10_insee, share_top_10_insee_labour,share_top_10_insee_labour_pension,share_top_10_insee_labour_fam_ben,
                                    share_bottom_10_insee, share_bottom_10_insee_labour,share_bottom_10_insee_labour_pension,share_bottom_10_insee_labour_fam_ben,
                                        fname='redistribution_central_insee.csv',mode='a') 
        ################################################################################################################
                - csv('Period', 'Gini sedlac, all income', 'Gini sedlac, labour income','Gini sedlac, labour and pension income', 'Gini sedlac, labour and family benefits income', 
                                'Decile ratio, all income', 'Decile ratio, labour income', 'Decile ratio, labour and pension income', 'Decile ratio, labour and familiy benefits income',
                                    'Top 10%, share of all income', 'Top 10%, share of labour income', 'Top 10%, share of labour and pension income', 'Top 10%, share of labour and familiy benefits income',
                                        'Bottom 10%, share of all income', 'Bottom 10%, share of labour income', 'Bottom 10%, share of labour and pension income', 'Bottom 10%, share of labour and familiy benefits income',
                                            fname='redistribution_central_sedlac.csv',mode='a')
                - csv(period,gini_sedlac_all_income,gini_sedlac_labour_income,gini_sedlac_labour_pension_income,gini_sedlac_labour_fam_benefits,
                            decile_ratio_sedlac_all_income, decile_ratio_sedlac_labour_income, decile_ratio_sedlac_labour_pension_income, decile_ratio_sedlac_labour_fam_ben_income, 
                                share_top_10_sedlac, share_top_10_sedlac_labour,share_top_10_sedlac_labour_pension,share_top_10_sedlac_labour_fam_ben,
                                    share_bottom_10_sedlac, share_bottom_10_sedlac_labour,share_bottom_10_sedlac_labour_pension,share_bottom_10_sedlac_labour_fam_ben,
                                        fname='redistribution_central_sedlac.csv',mode='a')
    person:
        fields:
            - pondera:         int
            # We need to declare first all the person-related variables we previously imported. 
            # First, here are the socio-demographic variables
            - age:           int
            - age_quarters: int
            - agegroup: int
            - male:        bool
            - marital_status:    int
           # - hhstate: int
            - little_children: int
            # Second, we list here education variables
            - formation: int
            - student: bool
            - polimodal: int
            - university_year: int
            # Second, we import labour-market related variables 
            - labour_market_state:     int
            - seniority: int
            - quarterly_seniority: int
            - itl: float
            - discounted_itl: float
            - resid: float
            - boss: int
            - contribution: int
            # Third, we import social-security information 
            - retired: bool
            #- v2_m: float
            - discounted_v2_m: float
            #- costo_v2_m: float
            - disc_cost_v2_m: float
            # Fourth, we list here identification variables and family links
            - household_id: int
            - mother_id:     int
            - partner_id:    int
            - father_id: int
            #Fifth, we add career variables. They are useful for computing both retirement benefits and survivors pensions
            - car_sal: int
            - car_ind: int
            - car_mono_norref: int
            - sum_rent_aut: float
           #COUNTERFACTUAL 2015 - sum_rent_aut_2: float
           # - sum_rent_aut_el: float
            # We include detailed information on the lst 10 years (40 quarters) 
            - lag_sal_1: float
            - lag_count_sal_1: int
            - lag_sal_2: float
            - lag_count_sal_2: int
            - lag_sal_3: float
            - lag_count_sal_3: int
            - lag_sal_4: float
            - lag_count_sal_4: int
            - lag_sal_5: float
            - lag_count_sal_5: int
            - lag_sal_6: float
            - lag_count_sal_6: int
            - lag_sal_7: float
            - lag_count_sal_7: int
            - lag_sal_8: float
            - lag_count_sal_8: int
            - lag_sal_9: float
            - lag_count_sal_9: int
            - lag_sal_10: float
            - lag_count_sal_10: int
            - lag_sal_11: float
            - lag_count_sal_11: int
            - lag_sal_12: float
            - lag_count_sal_12: int
            - lag_sal_13: float
            - lag_count_sal_13: int
            - lag_sal_14: float
            - lag_count_sal_14: int
            - lag_sal_15: float
            - lag_count_sal_15: int
            - lag_sal_16: float
            - lag_count_sal_16: int
            - lag_sal_17: float
            - lag_count_sal_17: int
            - lag_sal_18: float
            - lag_count_sal_18: int
            - lag_sal_19: float
            - lag_count_sal_19: int
            - lag_sal_20: float
            - lag_count_sal_20: int
            - lag_sal_21: float
            - lag_count_sal_21: int
            - lag_sal_22: float
            - lag_count_sal_22: int
            - lag_sal_23: float
            - lag_count_sal_23: int
            - lag_sal_24: float
            - lag_count_sal_24: int
            - lag_sal_25: float
            - lag_count_sal_25: int
            - lag_sal_26: float
            - lag_count_sal_26: int
            - lag_sal_27: float
            - lag_count_sal_27: int
            - lag_sal_28: float
            - lag_count_sal_28: int
            - lag_sal_29: float
            - lag_count_sal_29: int
            - lag_sal_30: float
            - lag_count_sal_30: int
            - lag_sal_31: float
            - lag_count_sal_31: int
            - lag_sal_32: float
            - lag_count_sal_32: int
            - lag_sal_33: float
            - lag_count_sal_33: int
            - lag_sal_34: float
            - lag_count_sal_34: int
            - lag_sal_35: float
            - lag_count_sal_35: int
            - lag_sal_36: float
            - lag_count_sal_36: int
            - lag_sal_37: float
            - lag_count_sal_37: int
            - lag_sal_38: float
            - lag_count_sal_38: int
            - lag_sal_39: float
            - lag_count_sal_39: int
            - lag_sal_40: float
            - lag_count_sal_40: int
            #COUNTERFACTUAL 2015: take out all past values of wages discounted following post June 2016 indexes. 
        #    - lag_sal_2_1: float
        #    - lag_sal_el_1: float
         #   - lag_sal_2_2: float
        #    - lag_sal_el_2: float
          #  - lag_sal_2_3: float
       #     - lag_sal_el_3: float
           # - lag_sal_2_4: float
        #    - lag_sal_el_4: float
            #- lag_sal_2_5: float
         #   - lag_sal_el_5: float
         #   - lag_sal_2_6: float
          #  - lag_sal_el_6: float
          #  - lag_sal_2_7: float
           # - lag_sal_el_7: float
           # - lag_sal_2_8: float
            #- lag_sal_el_8: float
            #- lag_sal_2_9: float
            #- lag_sal_el_9: float
         #   - lag_sal_2_10: float
       #     - lag_sal_el_10: float
          #  - lag_sal_2_11: float
        #    - lag_sal_el_11: float
           # - lag_sal_2_12: float
         #   - lag_sal_el_12: float
            #- lag_sal_2_13: float
          #  - lag_sal_el_13: float
         #   - lag_sal_2_14: float
           # - lag_sal_el_14: float
          #  - lag_sal_2_15: float
            #- lag_sal_el_15: float
           # - lag_sal_2_16: float
       #     - lag_sal_el_16: float
            #- lag_sal_2_17: float
        #    - lag_sal_el_17: float
          #  - lag_sal_2_18: float
         #   - lag_sal_el_18: float
           # - lag_sal_2_19: float
          #  - lag_sal_el_19: float
            #- lag_sal_2_20: float
           # - lag_sal_el_20: float
         #   - lag_sal_2_21: float
            #- lag_sal_el_21: float
          #  - lag_sal_2_22: float
        #    - lag_sal_el_22: float
           # - lag_sal_2_23: float
         #   - lag_sal_el_23: float
            #- lag_sal_2_24: float
          #  - lag_sal_el_24: float
         #   - lag_sal_2_25: float
           # - lag_sal_el_25: float
          #  - lag_sal_2_26: float
            #- lag_sal_el_26: float
           # - lag_sal_2_27: float
      #      - lag_sal_el_27: float
            #- lag_sal_2_28: float
       #     - lag_sal_el_28: float
          #  - lag_sal_2_29: float
        #    - lag_sal_el_29: float
           # - lag_sal_2_30: float
         #   - lag_sal_el_30: float
            #- lag_sal_2_31: float
          #  - lag_sal_el_31: float
          #  - lag_sal_2_32: float
           # - lag_sal_el_32: float
           # - lag_sal_2_33: float
       #     - lag_sal_el_33: float
            #- lag_sal_2_34: float
        #    - lag_sal_el_34: float
          #  - lag_sal_2_35: float
         #   - lag_sal_el_35: float
           # - lag_sal_2_36: float
          #  - lag_sal_el_36: float
            #- lag_sal_2_37: float
           # - lag_sal_el_37: float
        #    - lag_sal_2_38: float
            #- lag_sal_el_38: float
         #   - lag_sal_2_39: float
        #    - lag_sal_el_39: float
          #  - lag_sal_2_40: float
         #   - lag_sal_el_40: float

            
            - lag_ind_1: float
            - lag_count_ind_1: int
            - lag_ind_2: float
            - lag_count_ind_2: int
            - lag_ind_3: float
            - lag_count_ind_3: int
            - lag_ind_4: float
            - lag_count_ind_4: int
            - lag_ind_5: float
            - lag_count_ind_5: int
            - lag_ind_6: float
            - lag_count_ind_6: int
            - lag_ind_7: float
            - lag_count_ind_7: int
            - lag_ind_8: float
            - lag_count_ind_8: int
            - lag_ind_9: float
            - lag_count_ind_9: int
            - lag_ind_10: float
            - lag_count_ind_10: int
            - lag_ind_11: float
            - lag_count_ind_11: int
            - lag_ind_12: float
            - lag_count_ind_12: int
            - lag_ind_13: float
            - lag_count_ind_13: int
            - lag_ind_14: float
            - lag_count_ind_14: int
            - lag_ind_15: float
            - lag_count_ind_15: int
            - lag_ind_16: float
            - lag_count_ind_16: int
            - lag_ind_17: float
            - lag_count_ind_17: int
            - lag_ind_18: float
            - lag_count_ind_18: int
            - lag_ind_19: float
            - lag_count_ind_19: int
            - lag_ind_20: float
            - lag_count_ind_20: int
            - lag_ind_21: float
            - lag_count_ind_21: int
            - lag_ind_22: float
            - lag_count_ind_22: int
            - lag_ind_23: float
            - lag_count_ind_23: int
            - lag_ind_24: float
            - lag_count_ind_24: int
            - lag_ind_25: float
            - lag_count_ind_25: int
            - lag_ind_26: float
            - lag_count_ind_26: int
            - lag_ind_27: float
            - lag_count_ind_27: int
            - lag_ind_28: float
            - lag_count_ind_28: int
            - lag_ind_29: float
            - lag_count_ind_29: int
            - lag_ind_30: float
            - lag_count_ind_30: int
            - lag_ind_31: float
            - lag_count_ind_31: int
            - lag_ind_32: float
            - lag_count_ind_32: int
            - lag_ind_33: float
            - lag_count_ind_33: int
            - lag_ind_34: float
            - lag_count_ind_34: int
            - lag_ind_35: float
            - lag_count_ind_35: int
            - lag_ind_36: float
            - lag_count_ind_36: int
            - lag_ind_37: float
            - lag_count_ind_37: int
            - lag_ind_38: float
            - lag_count_ind_38: int
            - lag_ind_39: float
            - lag_count_ind_39: int
            - lag_ind_40: float
            - lag_count_ind_40: int
        #COUNTERFACTUAL 2015: take out all past values of independent reference income discounted following post June 2016 indexes.     
      #      - lag_ind_2_1: float
      #      - lag_ind_el_1: float
       #     - lag_ind_2_2: float
       #     - lag_ind_el_2: float
        #    - lag_ind_2_3: float
        #    - lag_ind_el_3: float
         #   - lag_ind_2_4: float
         #   - lag_ind_el_4: float
          #  - lag_ind_2_5: float
          #  - lag_ind_el_5: float
           # - lag_ind_2_6: float
           # - lag_ind_el_6: float
            #- lag_ind_2_7: float
            #- lag_ind_el_7: float
     #       - lag_ind_2_8: float
     #       - lag_ind_el_8: float
      #      - lag_ind_2_9: float
      #      - lag_ind_el_9: float
       #     - lag_ind_2_10: float
       #     - lag_ind_el_10: float
        #    - lag_ind_2_11: float
        #    - lag_ind_el_11: float
         #   - lag_ind_2_12: float
         #   - lag_ind_el_12: float
          #  - lag_ind_2_13: float
          #  - lag_ind_el_13: float
           # - lag_ind_2_14: float
           # - lag_ind_el_14: float
            #- lag_ind_2_15: float
            #- lag_ind_el_15: float
     #       - lag_ind_2_16: float
     #       - lag_ind_el_16: float
      #      - lag_ind_2_17: float
      #      - lag_ind_el_17: float
       #     - lag_ind_2_18: float
       #     - lag_ind_el_18: float
        #    - lag_ind_2_19: float
        #    - lag_ind_el_19: float
         #   - lag_ind_2_20: float
         #   - lag_ind_el_20: float
          #  - lag_ind_2_21: float
          #  - lag_ind_el_21: float
           # - lag_ind_2_22: float
           # - lag_ind_el_22: float
            #- lag_ind_2_23: float
            #- lag_ind_el_23: float
     #       - lag_ind_2_24: float
     #       - lag_ind_el_24: float
      #      - lag_ind_2_25: float
      #      - lag_ind_el_25: float
       #     - lag_ind_2_26: float
       #     - lag_ind_el_26: float
        #    - lag_ind_2_27: float
        #    - lag_ind_el_27: float
         #   - lag_ind_2_28: float
         #   - lag_ind_el_28: float
          #  - lag_ind_2_29: float
          #  - lag_ind_el_29: float
           # - lag_ind_2_30: float
           # - lag_ind_el_30: float
            #- lag_ind_2_31: float
            #- lag_ind_el_31: float
    #        - lag_ind_2_32: float
    #        - lag_ind_el_32: float
     #       - lag_ind_2_33: float
     #       - lag_ind_el_33: float
      #      - lag_ind_2_34: float
      #      - lag_ind_el_34: float
       #     - lag_ind_2_35: float
       #     - lag_ind_el_35: float
        #    - lag_ind_2_36: float
        #    - lag_ind_el_36: float
         #   - lag_ind_2_37: float
         #   - lag_ind_el_37: float
          #  - lag_ind_2_38: float
          #  - lag_ind_el_38: float
           # - lag_ind_2_39: float
           # - lag_ind_el_39: float
            #- lag_ind_2_40: float
            #- lag_ind_el_40: float
            - lag_mono_1: int
            - lag_mono_2: int
            - lag_mono_3: int
            - lag_mono_4: int
            - lag_mono_5: int
            - lag_mono_6: int
            - lag_mono_7: int
            - lag_mono_8: int
            - lag_mono_9: int
            - lag_mono_10: int
            - lag_mono_11: int
            - lag_mono_12: int
            - lag_mono_13: int
            - lag_mono_14: int
            - lag_mono_15: int
            - lag_mono_16: int
            - lag_mono_17: int
            - lag_mono_18: int
            - lag_mono_19: int
            - lag_mono_20: int
            - lag_mono_21: int
            - lag_mono_22: int
            - lag_mono_23: int
            - lag_mono_24: int
            - lag_mono_25: int
            - lag_mono_26: int
            - lag_mono_27: int
            - lag_mono_28: int
            - lag_mono_29: int
            - lag_mono_30: int
            - lag_mono_31: int
            - lag_mono_32: int
            - lag_mono_33: int
            - lag_mono_34: int
            - lag_mono_35: int
            - lag_mono_36: int
            - lag_mono_37: int
            - lag_mono_38: int
            - lag_mono_39: int
            - lag_mono_40: int
            
            # We list here all the variables we create in our microsimulation that are not present in our imported dataset. 
            # We only have to list variables that are used across various modules. We do not output all of these variables in our csv files as sometimes they represent intermediate results
            # The majority of variables that are computed by this model are temporary, restricted to a specific module and period and thus not stored in output datasets. 
            # It is always possible to declare those temporary variables in the following list if we want to study thema cross various modules or output them in our csv files. 
           
            # First, we list here sociodemographic and family links variables 
            - nb_children: {type: int, initialdata: false}
            - nb_children_bis: {type: int, initialdata: false}
            - dur_in_couple: {type: int, initialdata: false}
            - birth: {type: int, initialdata: false}
            - partner_death_in: {type: int, initialdata: false}
            - partner_death_in_2: {type: int, initialdata: false}
            - partner_death_in_3: {type: int, initialdata: false}
            - dead_partner: {type: int, initialdata: false}
            - dead_partner_2: {type: int, initialdata: false}
            - dead_partner_3: {type: int, initialdata: false}
            - dead_mother: {type: int, initialdata: false}
            - dead_father: {type: int, initialdata: false}
            - mother_death_in: {type: int, initialdata: false}
            - father_death_in: {type: int, initialdata: false}
            - nb_siblings: {type: int, initialdata: false}
            - minor_siblings: {type: int, initialdata: false}
            - minor_children: {type: int, initialdata: false}
            # Then, we list education-related variables
            - out_of_study: {type: int, initialdata: false}
            - level_second: {type: int, initialdata: false} 
            - abandon_second: {type: bool, initialdata: false}
            # Thirdly, we list variables related to the labour-market or to social security contributions.
            - sect_quartile: {type: int, initialdata: false}  
            - discounted_itl_gross: {type: float, initialdata: false}
            - discounted_itl_sal_gross: {type: float, initialdata: false}
            - itl_anses: {type: float, initialdata: false}   
                #Cotis stans for contributionation or contribution to social security. See the contributions module for details. 
            - contribution_sal_SIPA: {type: float, initialdata: false}
            - contribution_sal_PAMI: {type: float, initialdata: false}
            - contribution_sal_obra_social: {type: float, initialdata: false}
            - contribution_aut_SIPA: {type: float, initialdata: false}
            - contribution_aut_PAMI: {type: float, initialdata: false}
            - contribution_mono_SIPA: {type: float, initialdata: false}
            - contribution_mono_obra_social: {type: float, initialdata: false}
            - mono_integrated_tax: {type: float, initialdata: false}
            - monotributo_cat: {type: int, initialdata: false}
            - rent_aut: {type: float, initialdata: false}
                # aguinaldo stands for thirteenth month, a widespread benefit among formal wage-earners.  
            - medio_aguinaldo: {type: float, initialdata: false}
            - medio_aguinaldo_gross: {type: float, initialdata: false}
                #IGF stands for Family group income. See the details in the family benefits module
            - igf: {type: float, initialdata: false}
            # Fourthly, these are the retirement and survivors pensions we compute in our model. 
                # In spanish, jubilación stands for retirement benefit and pensión for survivors pension. We keep this nomenclature in our variables.
                # We start with retirement benefits, or retirementes. Liqui_retirement is True when the individual liquidated his retirement rights (by retiring)
                    # Jubilación bruta means gross retirement benefits, jubilación neta is the benefit actually earned by the retiree once the compulsory healthcare contribution
                    #to the PAMI is discounted. 
            - liqui_retirement: {type: bool, initialdata: false}
            - net_retirement: {type: float, initialdata: false}
                    #The suffix 2 represents the current discounting rule, in force since June 2016. It discounts past income between 1991 and 2009 following various wage indexes. 
                        #Since 2009, it discounts income following the evolution of the pension mobility index. 
                    #Values without the suffix are discounted since 1995 following the average increase of retirement pensions (excuding the cases where only the minimum pension was raised, between 2002 and 2004).
                        #As such, it results in a very unfavourable discounting of income earned between 2001 and 2006 (less so between 2007 and 2008). 
                    # Most of the differences between these two rules are apparent for income earned before 2006, and the 
                    # two actualisation rules are identical since March 2009 and the implementation of the pension mobility law. 
                    # The effect of this reform on new pensions is minimal for those retiring since 2014 (and decreases further in time)
            - net_retirement_2: {type: float, initialdata: false}
            - gross_retirement: {type: float, initialdata: false}
            - gross_retirement_2: {type: float, initialdata: false}
            - moratorium_date: {type: int, initialdata: false}
            #COUNTERFACTUAL SCENARIO 2015: take out the Universal Pension for the Elderly Adult PUAM
        #    - tag_pension_uni: {type: bool, initialdata: false}
         #   - universal_gross_pension: {type: float, initialdata: false}
          #  - universal_net_pension: {type: float, initialdata: false}
                    # SAC stands for Sueldo anual complementario, or thirteenth month. There is a thirteenth month that is paid in two parts (June and December) to retirees and pensioners.
                    # It is subject to contributions to the PAMI healthcare system for the elderly, as such there is a gross ("bruta") and net ("neta") thirteenth month for retirees and pensioners
            - sac_jp_gross: {type: float, initialdata: false}
            - sac_jp_gross_2: {type: float, initialdata: false}
            - sac_jp_net: {type: float, initialdata: false}
            - sac_jp_net_2: {type: float, initialdata: false}
           # - sac_up_gross: {type: float, initialdata: false} 
            #- sac_up_net: {type: float, initialdata: false}
                #We list here variables related to survivors benefits. 
                    #initial_pensioner is True when we consider the recipiendary of a penison or retirement benefit is exclusively a survivors benefits pensioner (and may yet retire on its own)
            - initial_pensioner: {type: bool, initialdata: false}
            - net_pension: {type: float, initialdata: false}
                    # The suffix c indicates a survivors benefit earned by the deceased's child, while the suffix p indicates a pension received by the departed's spouse. 
            - net_pension_child: {type: float, initialdata: false}
            - net_pension_p: {type: float, initialdata: false}
            #COUNTERFACTUAL SCENARIO 2015: take out all pension values discounted following post June 2016 indexes.
      #      - net_pension_2: {type: float, initialdata: false}
       #     - net_pension_child_2: {type: float, initialdata: false}
        #    - net_pension_2_p: {type: float, initialdata: false}
            - gross_pension: {type: float, initialdata: false}
            - gross_pension_child: {type: float, initialdata: false}
            - gross_pension_p: {type: float, initialdata: false}
        #    - gross_pension_2: {type: float, initialdata: false}
         #   - gross_pension_child_2: {type: float, initialdata: false}
          #  - gross_pension_2_p: {type: float, initialdata: false}
                    # pension_ref_child_f: Reference income for the computation of child survivors pensions in case the father dies. 
                    # pension_ref_child_m: Reference income for the computation of child survivors pensions in case the mother dies. 
            - pension_ref_child_f: {type: float, initialdata: false}
            - pension_ref_child_m: {type: float, initialdata: false}
       #     - pension_ref_child_f_2: {type: float, initialdata: false}
        #    - pension_ref_child_m_2: {type: float, initialdata: false}
                #Fifthly, we export the detail of family benefits. This is in particular interesting for telling apart contributive child benefit from the AUH and 
                    #pregnancy benefit. 
            - child_benefit: {type: float, initialdata: false}
            - auh: {type: float, initialdata: false}
            - spouse_benefit: {type: float, initialdata: false}
            - wedding_benefit: {type: float, initialdata: false}
            - pregnancy_sp: {type: float, initialdata: false}
            - prenatal: {type: float, initialdata: false}
            - birth_benefit: {type: float, initialdata: false}
            - school_aid: {type: float, initialdata: false}
                #We also include family benefits information trying to mimic the v5_m variable of the EPHc
            - discounted_v5_m: {type: float, initialdata: false}
                # Finally, the sum of retirement benefits and survivor's pensions in real terms are stored in variable discounted_v2_m, as in the EPHc
                # The actual cost for ANSES, including the compulsory contribution to elderly healthcare, is given by variable disc_cost_v2_m
            #COUNTERFACTUAL SCENARIO 2015: take out pension benefits whose initial values were discounted following post June 2016 indexes.     
       #     - discounted_v2_m_2: {type: float, initialdata: false}
        #    - disc_cost_v2_m_2: {type: float, initialdata: false}
            
           
        links:
            mother: {type: many2one, target: person, field: mother_id}
            father: {type: many2one, target: person, field: father_id}
            partner: {type: many2one, target: person, field: partner_id}            
            household: {type: many2one, target: household, field: household_id}
            children: {type: one2many, target: person, field: mother_id}
            children_bis: {type: one2many, target: person, field: father_id}
        macros:
        #Another bug: when combined with link variables, macro variables do not work. For instance, partner.labour_market_state==1 equals having a registered wage-earner partner and works. 
        # Typing partner.IS_WAGE_EARNER does not work
            UNSET: -1
            ISMALE: male
            ISFEMALE: not male
            WAGE_EARNER: 1
            INDEPENDENT: 2
            INFORMAL: 3
            UNEMPLOYED: 4
            INACTIVE: 5
            IS_WAGE_EARNER: labour_market_state ==1
            IS_INDEPENDENT: labour_market_state ==2
            IS_INFORMAL: labour_market_state ==3
            IS_UNEMPLOYED: labour_market_state ==4
            IS_INACTIVE: labour_market_state ==5
            ISSTUDENT: student
            ISMARRIED: marital_status ==2
            IN_RELATIONSHIP: marital_status ==1 or marital_status ==2
            ISDIVORCED: marital_status ==3
            ISSINGLE: marital_status ==5
            ISWIDOW: marital_status ==4
            ISCOUPLE: marital_status ==1
            COUPLED: 1
            MARRIED: 2
            DIVORCED: 3
            WIDOWED: 4
            SINGLE: 5
        #   FORMATION1: 1
         #   FORMATION2: 2
          #  FORMATION3: 3
            IS_FORMATION1: formation ==1
            IS_FORMATION2: formation ==2
            IS_FORMATION3: formation ==3
            ISSTUDENT:  student =="True"
            ISNOTSTUDENT: student =="False"
            IS_SENIORITY_1: seniority==1
            IS_SENIORITY_2: seniority==2
            IS_SENIORITY_3: seniority==3
            IS_SENIORITY_4: seniority==4
            IS_SENIORITY_5: seniority==5
        
            ACTIVEAGE: (age > 15 and (age < if(male, 65, 60)))

        
        processes:
            prelim:
#This preliminary process groups different actions we undertake with our dataset before the actual simulations begin. As such, it is launched only once at the very beginning of the model.
#These include some operations we did not want to undertake on our csv file (such as forcing people out of education). Others take advantage of the modelling of links with LIAM2. 
        #First, we update some family link variables. 
            #We in particular make sure the father id of all individuals is taht of their mother's partner.
                - father_id: mother.partner_id
            #We then count children and underage children. 
            #We need to count them separately for the mother (nb_children) and the father (nb_children_bis) sinc ethey use respectively mother_id and father_id as their link variable.
                - nb_children: if(ISFEMALE,children.count(),0)
                - nb_children_bis: if(ISMALE,children_bis.count(),0)
                - underage_children: children.count(age<18)
                - underage_children_bis: children_bis.count(age<18)
                - minor_children: underage_children+underage_children_bis
            # Finally, we count the number of cohabitant brothers and sisters, major or only underage. This is necessary for computing survivor's benefits.
                
                - nb_siblings: if(mother_id!=UNSET,mother.nb_children -1, 
                                    if(father_id!=UNSET, father.nb_children_bis -1,
                                    0))
                - temp_sib: if(age<18, 1, 0)
                - minor_siblings: if(mother_id!=UNSET,mother.underage_children - temp_sib, 
                                    if(father_id!=UNSET, father.underage_children_bis - temp_sib,
                                    minor_siblings)) 
        # Then, we compute the Family Group Revenue, or IGF (Ingreso del Grupo Familiar). It is used in the computation of child benefits (determining access to them and their level).
       #        
        #        - igf: discounted_itl + discounted_v2_m + partner.discounted_itl + partner.discounted_v2_m  
         #       - igf: if(age>=18, igf, 
          #                  if(mother_id!=UNSET, mother.igf + discounted_v2_m + discounted_itl, 
           #                    if(father_id!=UNSET, father.igf + discounted_v2_m + discounted_itl, igf)))               
        # After that, we carry some education-related operations. 
            # We first force people that are too old out of studies. This is all people aged 30 or more as well as people aged 21 or more that did not finish secondary education. 
                - out: if(age>20 and IS_FORMATION1, True, False)
                - out: if(age>29, True, out)
                - too_old: if(student,
                                if(out, True, False)
                            , False)
                - student: if(too_old,False,student)
            # People that leave studies enter a special labour-market state "having finished studies". It is a (significant) explanatory variable in some of our behavourial equations.
                - labour_market_state: if(too_old, 6, labour_market_state)
            #Finally, we force people aged 15 to be in the first year of the now extint "polimodal" education, which equals junior year of high school (the antepenúltimo year of secondary studies)
                - polimodal: if(age <15,0,
                                if(age==15, 1, 
                                    polimodal))
        # We also compute here the sectoral quartile income variable. It is perfectly possible to do this on SAS (we actually do it for our behavioural equations). The code is however much faster to execute in LIAM2. 
                - sect_quartile: if(itl==0, 0, 
                                    if(IS_WAGE_EARNER,
                                        if(itl<=percentile(itl,25,filter=IS_WAGE_EARNER),1,
                                        if(itl<=percentile(itl,50,filter=IS_WAGE_EARNER),2,
                                        if(itl<=percentile(itl,75,filter=IS_WAGE_EARNER),3,4))), 
                                    if(IS_INDEPENDENT,                                       
                                        if(itl<=percentile(itl,25,filter=IS_INDEPENDENT),1,
                                        if(itl<=percentile(itl,50,filter=IS_INDEPENDENT),2,
                                        if(itl<=percentile(itl,75,filter=IS_INDEPENDENT),3,4))),
                                    if(IS_INFORMAL,                                       
                                        if(itl<=percentile(itl,25,filter=IS_INFORMAL),1,
                                        if(itl<=percentile(itl,50,filter=IS_INFORMAL),2,
                                        if(itl<=percentile(itl,75,filter=IS_INFORMAL),3,4))),sect_quartile))))    
        # The most important preliminary operations we undertake are those related to retirement benefits and survivors pensions. 
        # In the EPHc, both of these sources of income are mixed in variable V2_M. It is thus impossible to accurately identify them. 
        # This is a problem because these two pensions can be combined. It is thus possible for someone receiving a pension to retire later if they are only receiving a survivor's pension. 
            # The combination of survivor's pensions and direct benefits is unrestricted. Art. 6 of Decree 764/2006 states it is possible to earn at the same time any number of direct and dervied rights retirement pensions.
                # Their total amount cannot however be greater than the maximum retirement pension. 
      
            # We thus make here a series of assumptions to placate this problem. 
            # First, that a widow's pension is a direct retirement benefit only if: 
                # He is at most five years younger than the minimum retirement age (so 55 for women, 60 for men).
                    # This lowered retirement age is adopted by some special retirement regimes, which we consider in this simulation as part of the general regime.
                # Is self-reported as a retired person (variable CAT_INAC of the EPHc)
            # Second, we assume non-widows aged 55 or more for women, 60 or more for men, are always recieving a direct retirement benefit. Their pension is thus never a survivor's benefit. 
            # Third, a consequence of both these hypotheses is that men aged 59 or less and women aged 54 or less that receive a pension always receive a survivor's pension.
              
                - liqui_retirement: if(discounted_v2_m==0, False, 
                                        if(age<55 or (age<60 and male), False, 
                                            if(marital_status!=4, True, 
                                                if(retired, True, False))))
                - net_retirement: if(liqui_retirement, discounted_v2_m, 0)
               #COUNTERFACTUAL SCENARIO 2015: take out pensions computed with post June 2016 indexes.
           #     - net_retirement_2: net_retirement
                - initial_pensioner: if((not liqui_retirement) and discounted_v2_m!=0, True, False)
                - net_pension: if(initial_pensioner, discounted_v2_m, 0)
            #    - net_pension_2: net_pension
             #   - discounted_v2_m_2: discounted_v2_m
                # Once we told apart pensioners from retirees, we derive from percieved retirement benefits their gross counterpart (including contributions to the PAMI, the healthcare scheme for retirees)    
                    # The gross direct and indirect retirement pensions represent the actual cost for ANSES of these benefits. 
                - gross_retirement: if(net_retirement>=MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4 + (net_retirement-MIN_PENSION_CENTRAL_2014_T4*0.97)/0.94,
                                        net_retirement/0.97)
              #  - gross_retirement_2: if(net_retirement_2>=MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4 + (net_retirement_2-MIN_PENSION_CENTRAL_2014_T4*0.97)/0.94,
               #                         net_retirement_2/0.97)
                - gross_pension: if(net_pension>=MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4 + (net_pension-MIN_PENSION_CENTRAL_2014_T4*0.97)/0.94,
                                        net_pension/0.97)
              #  - gross_pension_2: if(net_pension_2>=MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4 + (net_pension_2-MIN_PENSION_CENTRAL_2014_T4*0.97)/0.94,
               #                         net_pension_2/0.97)
                - gross_pension_p: if(age>=18, gross_pension, 0)
               # - gross_pension_2_p: if(age>=18, gross_pension_2, 0)
                
            # Also, since we start our simulations before the implementation of the universal pension, none of our starting individual receive this universal pension. 
                #COUNTERFACTUAL SCENARIO 2015: there are no universal pensions. 
            #    - tag_pension_uni: False
        #Fourth, we have shown the residuals of our Mincer wage equations follow a Normal distribution in all of our starting datasets. For the second quarter of 
                #2015, the mean equals -0.13862 and the standard deviation 0.568956
                # as shown by the pdf Normality of forward residuals. We thus randomly assign each individual that does not have a wage residual at the beginning 
                #of the simulation a residual drawn from this normal distribution. Once assigned, this residual stays unchanged for the rest of the individual's life.
                - resid: if(resid!=0, resid, 
                            normal(loc=-0.13862,scale=0.568956))        
        #Finally, having all individuals age at the same time was a problem for our education module. We thus assume respondents had a 25% chance of being born during a given quarter.        
                
                - age_quarters: age_quarters + choice([0, 1, 2, 3], [0.25, 0.25, 0.25, 0.25]) 
            ageing: 
                - age_quarters: age_quarters + 1
                - age: trunc(age_quarters/4) 
            agegrouping:
                - agegroup: 5*trunc(age/5)
#We exclude people aged 15 from the 16-19 age group, since we exclude them from the labour market. 
                - agegroup: if(age >15 and age<20, 16, agegroup)
              
            death:
#We combine in this step death simulations as well as the computation of survivor's pensions. This is because the latter are determined by the departed's characteristics, and that at the end of this step     
# we remove dead people from our data. 
#The full rules for determining survivor's pensions are laid out in my PhD. Thesis' Appendix C.
    #1- We see which individuals can generate survivor's pensions if they die this exact period. 
        #The disability of a worker that is a regular or irregular contributor (see below) also triggers survivor's benefits. These are identical to those that would 
            #have been triggered had the worker died instead. The code below can thus be used as is to compute survivor's pensions derived from a worker's disability.
    #Survivor's pension level depends either on the last five years' labour income or on the retirement benefit earned by the departed.
        #We first compute total quarters of contribution during the last five years.   
            #There are three relevant contribution spells for computing these pensions: registered wage-earners, being in the autonomous workers regime and being a monotributista. 
                - sum_count_20_sal: lag_count_sal_1+lag_count_sal_2+lag_count_sal_3+lag_count_sal_4+lag_count_sal_5+lag_count_sal_6+lag_count_sal_7+lag_count_sal_8+lag_count_sal_9+lag_count_sal_10+lag_count_sal_11+lag_count_sal_12+lag_count_sal_13+lag_count_sal_14+lag_count_sal_15+lag_count_sal_16+lag_count_sal_17+lag_count_sal_18+lag_count_sal_19+lag_count_sal_20
                - sum_count_20_ind: lag_count_ind_1+lag_count_ind_2+lag_count_ind_3+lag_count_ind_4+lag_count_ind_5+lag_count_ind_6+lag_count_ind_7+lag_count_ind_8+lag_count_ind_9+lag_count_ind_10+lag_count_ind_11+lag_count_ind_12+lag_count_ind_13+lag_count_ind_14+lag_count_ind_15+lag_count_ind_16+lag_count_ind_17+lag_count_ind_18+lag_count_ind_19+lag_count_ind_20
                - sum_count_20_mono: lag_mono_1+lag_mono_2+lag_mono_3+lag_mono_4+lag_mono_5+lag_mono_6+lag_mono_7+lag_mono_8+lag_mono_9+lag_mono_10+lag_mono_11+lag_mono_12+lag_mono_13+lag_mono_14+lag_mono_15+lag_mono_16+lag_mono_17+lag_mono_18+lag_mono_19+lag_mono_20
            #We also compute total wages and rent of reference (respectively for formal wage-earners and individuals in the autonomous workers regime) during the last five years.        
                - sum_itl_20_ind: lag_ind_1+lag_ind_2+lag_ind_3+lag_ind_4+lag_ind_5+lag_ind_6+lag_ind_7+lag_ind_8+lag_ind_9+lag_ind_10+lag_ind_11+lag_ind_12+lag_ind_13+lag_ind_14+lag_ind_15+lag_ind_16+lag_ind_17+lag_ind_18+lag_ind_19+lag_ind_20
                - sum_itl_20_sal: lag_sal_1+lag_sal_2+lag_sal_3+lag_sal_4+lag_sal_5+lag_sal_6+lag_sal_7+lag_sal_8+lag_sal_9+lag_sal_10+lag_sal_11+lag_sal_12+lag_sal_13+lag_sal_14+lag_sal_15+lag_sal_16+lag_sal_17+lag_sal_18+lag_sal_19+lag_sal_20
                #These are computed following two different discounting rules, as explained in the presentation of our variables above. 
               #COUNTERFACTUAL SCENARIO 2015: past wages and reference income are not discounted with post June 2016 indexes. 
             #   - sum_itl_20_ind_2: lag_ind_2_1+lag_ind_2_2+lag_ind_2_3+lag_ind_2_4+lag_ind_2_5+lag_ind_2_6+lag_ind_2_7+lag_ind_2_8+lag_ind_2_9+lag_ind_2_10+lag_ind_2_11+lag_ind_2_12+lag_ind_2_13+lag_ind_2_14+lag_ind_2_15+lag_ind_2_16+lag_ind_2_17+lag_ind_2_18+lag_ind_2_19+lag_ind_2_20
              #  - sum_itl_20_sal_2: lag_sal_2_1+lag_sal_2_2+lag_sal_2_3+lag_sal_2_4+lag_sal_2_5+lag_sal_2_6+lag_sal_2_7+lag_sal_2_8+lag_sal_2_9+lag_sal_2_10+lag_sal_2_11+lag_sal_2_12+lag_sal_2_13+lag_sal_2_14+lag_sal_2_15+lag_sal_2_16+lag_sal_2_17+lag_sal_2_18+lag_sal_2_19+lag_sal_2_20
        #Now we determine whether the deceased individual causes a survivor's pension to be paid to its relatives. 
            #First, if the retired individual was receiving a direct retirement benefit (excluding the universal pension for the elderly adult), then a survivor's pension may be generated.
                - retiree: if(liqui_retirement, 1, 0)
            #The vast majority of survivor's pensions originate from the death of a retiree. Under some conditions however, the death of a worker may trigger survivor's pensions.
                #First, if the worker had contributed 30 years or more (including the discount of years due to old age if he exceeded the minimum retirement age), he is considered a regular contributor.
                    #Else, if he contributed at least during two and a half years during the last five years, then he is also considered a regular contributor. 
                - extra_trim: if(male, (age_quarters-65*4), (age_quarters-60*4))
                - extra_trim: if(extra_trim<=0, 0, extra_trim)
                - val_years: trunc((car_sal+car_ind+car_mono_norref+extra_trim/2)/4)
                - regular_contributor: if(liqui_retirement, False, 
                                    if(val_years>=30, True, 
                                        if((sum_count_20_sal+sum_count_20_ind+sum_count_20_mono)>=10,True,False)))
                # Second, if the worker had contributed between 15 and 29 years and contributed at least a year and a half during the last 5 years, then he is considered an irregular contributor with right to a survivor's pension. 
                - irregular_contributor: if(liqui_retirement or regular_contributor, False, 
                                        if(val_years>=15 and ((sum_count_20_sal+sum_count_20_ind+sum_count_20_mono)>=6),True,False))
                # Finally, it was possible during the period of validity of the Law 26970 moratorium, to be considered an irregular contributor with the sole condition of having contributed a year during the last five years. 
                    #It must however be noted these moratorium survivor's pensions where only accessible to formal independent workers, as pointed out in At. 10 of Law 26970. 
                - irregular_contributor_m: if(liqui_retirement or regular_contributor or irregular_contributor or (lag_mono_1!=1 and lag_count_ind_1!=0), False, 
                                        if(period<48, False, 
                                            if(male and period<=55 and ((sum_count_20_sal+sum_count_20_ind+sum_count_20_mono)>=4),True,
                                                if(not male and period<=67,True,False))))
                - irregular_contributor: if(irregular_contributor_m, True, irregular_contributor)
                    #This granted access to moratorium survivor's pensions. We will suppose that, just as with moratorium benefits, that they get the maximum 
                        #discount of 20%, for the sake of simplicity. 
        #Second, we define the reference income ("Renta de referencia") from which are computed survivor's pensions.
            # This reference income is determined by Articles 97 & 98 of Law 24241. It is equal to: 
                # 100% of the ANSES retirement benefit earned by the departed retiree (excluding all survivor's pensions he may have been previously recieving and the universal pension for the elderly)
                # 70% of the mean discounted income earned during the last 60 months prior to the death of a regular contributor.
                # 50% of the mean discounted income earned during the last 60 months prior to the death of an irregular contributor.
                # If the departed was not receiving a retirement benefit granted by ANSES or was neither a regular nor an irregular contributor, then no survivor's pensions are given.
                
                    # The same discounting indexes are used for the computation of the reference income for survivor's pensions and for retirement benefits. 
                        #As such, we use the pre-2016 and post-2016 (suffix _2) discounting rules
                - reference_income: if(retiree==1, gross_retirement, 
                                if(regular_contributor, 0.7*((sum_itl_20_sal+sum_itl_20_ind)*GROSS_WAGE_CENTRAL_2014_T4/11802.61)/(sum_count_20_sal+sum_count_20_ind+sum_count_20_mono),
                                        if(irregular_contributor, 0.5*((sum_itl_20_sal+sum_itl_20_ind)*GROSS_WAGE_CENTRAL_2014_T4/11802.61)/(sum_count_20_sal+sum_count_20_ind+sum_count_20_mono)
                                            ,0)))
               #COUNTERFACTUAL SCENARIO 2015: the reference income for survivors benefits is not discounted with post June 2016 indexes. 
          #      - reference_income_2: if(retiree==1, gross_retirement, 
           #                     if(regular_contributor, 0.7*((sum_itl_20_sal_2+sum_itl_20_ind_2)*GROSS_WAGE_CENTRAL_2014_T4/11802.61)/(sum_count_20_sal+sum_count_20_ind+sum_count_20_mono),
            #                            if(irregular_contributor, 0.5*((sum_itl_20_sal_2+sum_itl_20_ind_2)*GROSS_WAGE_CENTRAL_2014_T4/11802.61)/(sum_count_20_sal+sum_count_20_ind+sum_count_20_mono)
             #                               ,0)))
        #At this point, each living individual gets a reference income for survivor's pensions to be contributed were he to die in this period.   

    # 2- We simulate individual deaths. 
            #Death probabilities are those of the life tables used in INDEC's population projections. They are age and gender specific.
            #Here, we assume all individuals of a given age and gender have equal probabilities of dying (it is set as such by the 0.0 term). 
                #It is possible to run a logit model on the determinants of death. The estimated parameters would then be hard-coded in place of the 0.0 terms.
                - dead: if(ISMALE,
                           logit_regr(0.0, align='p_death_m3.csv'),
                           logit_regr(0.0, align='p_death_f3.csv'))
        # We also update the relevant family links variables of the surviving members of their nuclear family. 
                - marital_status: if(partner.dead==False, marital_status, 
                                if(ISMARRIED, WIDOWED, SINGLE))
                #We stock the information of up to three dead partners, for information purposes. This is because survivor's pensions can be accumulated without a limit. 
                    #Some (not all) of these variables enter in the computation of survivor's pensions. 
                - partner_death_in_3: if(partner_death_in_2 !=UNSET and partner_death_in !=UNSET and partner.dead,period,partner_death_in_3)
                - partner_death_in_2: if(partner_death_in !=UNSET and partner.dead, period, partner_death_in_2)
                - partner_death_in: if(partner.dead and partner_death_in_2==UNSET and partner_death_in_3==UNSET, period, partner_death_in)
                - dead_partner_3: if(dead_partner_2 !=UNSET and dead_partner !=UNSET and partner.dead,partner_id,dead_partner_3)
                - dead_partner_2: if(dead_partner !=UNSET and partner.dead, partner_id, dead_partner_2)
                - dead_partner: if(partner.dead and dead_partner_2==UNSET and dead_partner_3==UNSET, partner_id, dead_partner)
                - mother_death_in: if(mother.dead, period, mother_death_in)
                - dead_mother: if(mother.dead, mother_id, dead_mother)
                - father_death_in: if(father.dead, period, father_death_in)
                - dead_father: if(father.dead, father_id, dead_father)
    # 3- We compute the total amount of survivor's pensions that stem from the insured individual's death. 
        # The universe of relatives elligible for a survivor's pension determines the level of each relative's survivor's pension. These are the departed's partner 
            # (concubine or spouse) and minor children. We already know from variable partner_id whether the departed had a spouse. We hence only need to compute the 
            # number of underage children. 
                - underage_children: if(ISFEMALE,children.count(age<18),0) 
                - underage_children_bis: if(ISMALE,children_bis.count(age<18),0)
                - minor_children: underage_children + underage_children_bis
        # We then compute the total survivor's benefits that trigger upon a given person's death. These are determined by Art. 98 of Law 24241.  
                - total_survivor_pensions: if(not dead, 0, 
                                        if(partner_id==UNSET, 
                                            if(minor_children==0,0,
                                                if(minor_children==1, reference_income*0.7,
                                                    if(minor_children==2, reference_income*0.9,reference_income))),
                                            if((minor_children<=1), reference_income*0.7,
                                                if(minor_children==2, reference_income*0.9, reference_income))))
            #Following Art. 125 of Law 24241, a survivor's pension cannot be lower than the minimum pension. Section II. of Art. 98 however ensures the total sum of these
                #pensions do not exceed the reference ("renta de referencia"). It cannot either exceed the maximum pension. 
                - total_survivor_pensions: if(not dead, 0,
                                        if(total_survivor_pensions==0, 0, 
                                            if(total_survivor_pensions<MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4,
                                                if(total_survivor_pensions>MAX_PENSION_CENTRAL_2014_T4, MAX_PENSION_CENTRAL_2014_T4, total_survivor_pensions))))
                #We compute these pensions again following the discounting index in force since 2016 (suffix _2).
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established in 2016 for computing survivors pensions. 
       #         - total_survivor_pensions_2: if(not dead, 0, 
        #                                if(partner_id==UNSET, 
         #                                   if(minor_children==0,0,
          #                                      if(minor_children==1, reference_income_2*0.7,
           #                                         if(minor_children==2, reference_income_2*0.9,reference_income_2))),
            #                                if((minor_children<=1), reference_income_2*0.7,
             #                                   if(minor_children==2, reference_income_2*0.9, reference_income_2))))
             #   - total_survivor_pensions_2: if(not dead, 0,
              #                          if(total_survivor_pensions_2==0, 0, 
               #                             if(total_survivor_pensions_2<MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4,
                #                                if(total_survivor_pensions_2>MAX_PENSION_CENTRAL_2014_T4, MAX_PENSION_CENTRAL_2014_T4, total_survivor_pensions_2))))   
                                        
    # 4- We determine the pensions given to the surviving partner and minor children.                   
                - pension_partner: if(partner.dead, 
                                                partner.total_survivor_pensions, 
                                                    0)
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016.                                    
             #   - pension_partner_2: if(partner.dead, 
              #                                  partner.total_survivor_pensions_2, 
               #                                     0)
        #We compute the reference income for children's survivor's pension every quarter, even after they started receiving it. 
                #this is because they will stop receiving it when they come of age. They also stop receiving it if they marry, 
                #but we assume in our model marriage is only allowed since age 18. 
        #We do not store such a value for the partner since the latter can never stop receiving the pension. It may be useful to store 
                #it anyways to recalculate his pension when the children come of age.    
        #We also need to discount the reference income of child pensions following the pension mobility index. We only apply this mobility if
                #their father/mother did not just die.      
        #We store separately child's survivor pension derived from the father's death (suffix _f) from that derived from mother's death (suffix _m)                     
                - pension_ref_child_f: if(dead_father==UNSET, 0,
                                if(age>=18, 0, 
                                    if(father.dead, father.total_survivor_pensions,
                                        pension_ref_child_f*REAL_MOBILITY_CENTRAL)))    
                        
                - pension_ref_child_m: if(dead_mother==UNSET, 0,
                                if(age>=18, 0, 
                                    if(mother.dead, mother.total_survivor_pensions,
                                        pension_ref_child_m*REAL_MOBILITY_CENTRAL)))  
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
            #    - pension_ref_child_f_2: if(dead_father==UNSET, 0,
             #                   if(age>=18, 0, 
              #                      if(father.dead, father.total_survivor_pensions_2,
               #                         pension_ref_child_f_2*REAL_MOBILITY_CENTRAL)))     
                #- pension_ref_child_m_2: if(dead_mother==UNSET, 0,
                 #               if(age>=18, 0, 
                  #                  if(mother.dead, mother.total_survivor_pensions_2,
                   #                     pension_ref_child_m_2*REAL_MOBILITY_CENTRAL)))       
                                        
        #The repartition of the survivor's pension depends on the number of eligible relatives. In the case of children's survivor's pensions, it depends on the number of underage siblings. 
            # It is however complicated to reconstitute family links directly between siblings. It is much easier to bypass this problem by using parental links. 
            # As such, we create dynamic variables on the total number of cohabiting siblings and of minor siblings. 
               
                - nb_children: if(ISFEMALE,children.count(),0)
                - nb_children_bis: if(ISMALE,children_bis.count(),0)   
                - nb_siblings: if(mother_id!=UNSET,mother.nb_children -1, 
                                    if(father_id!=UNSET, father.nb_children_bis - 1,
                                    nb_siblings))
                - nb_siblings: if(nb_siblings<0,
                                    0, nb_siblings)
                - temp_sib: if(age<18, 1, 0)
                - minor_siblings: if(mother_id!=UNSET,mother.underage_children - temp_sib, 
                                    if(father_id!=UNSET, father.underage_children_bis - temp_sib,
                                    minor_siblings)) 
                # It is unfortunately impossible to count the number of siblings when neither the father nor the mother are known. There is a fringe case where this may be a 
                    #problem, that is when a single parent dies and leaves multiple underage children with a right to a pension. As their siblings age and lose their survivor's
                    #pension, we are unable to update the remaining underage siblings' pension (their share increases since their sibling lost the right to a survivor's pension). 
                    #This is nevertheless a marginal problem that we choose to ignore in our model. 
                   
        # We compute individual pensions repartition as a percentage of the pension of reference. We also know total survivor's pensions are equal to 70% of the pension of reference
            #The full rules are laid out in Appendix C of my PhD, and are taken out from Art. 98 of Law 24241. Here we have individual pensions as a percentage of the pension of reference.
                # "a) [70%] for the widow or cohabitant, were there no children entitled to a [survivor’s] pension. 
                # b) [50%] for the widow or cohabitant, when there are children entitled to a [survivor’s] pension. 
                # c) [20%] for each [entitled] child." 
            #Sections I to III of Article 98 also state that 
                #"I. Were there not a widow or cohabitant entitled to a [survivor’s] pension, the children benefits’ percentage established in incise c)
                    #will be raised and shared equally between eligible children up to the percentage established in incise b).
                #II. The sum of the pensions of all the beneficiaries shall not exceed [100%] of the [pension of reference]
                    #of the [deceased]. Were it to happen, each of the beneficiaries’ pensions will be recalculated, keeping
                    #the proportions resulting from the [aforementioned] percentages (...). 
                #III. If any of the beneficiaries were to be no longer entitled to [a survivor’s] benefit, the pension of the remaining beneficiaries shall be
                    #computed again, excluding the former beneficiary".
                - pension_partner: if(minor_children==0, pension_partner, 
                                        if(minor_children==1 or minor_children==2, pension_partner*0.5/0.7, 
                                            pension_partner/0.7*(0.5/(0.5+0.2*minor_children))))
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
             #   - pension_partner_2: if(minor_children==0, pension_partner_2, 
              #                          if(minor_children==1 or minor_children==2, pension_partner_2*0.5/0.7, 
               #                             pension_partner_2/0.7*(0.5/(0.5+0.2*minor_children))))
                - pension_child_f: if(age>=18, 0, 
                                    if(dead_father!=UNSET and mother_id!=UNSET,
                                        if(minor_siblings<=1, pension_ref_child_f*0.2/0.7,
                                            pension_ref_child_f/0.7*(0.2/(0.5+0.2*(minor_siblings+1)))),
                                    if(dead_father!=UNSET and mother_id==UNSET, 
                                        if(minor_siblings<=1, pension_ref_child_f/0.7*(0.2+0.5*(minor_siblings+1)),
                                            pension_ref_child_f/0.7*((0.2+0.5*(minor_siblings+1))/(0.5+0.2*(minor_siblings+1)))),
                                0)))
                - pension_child_m: if(age>=18, 0, 
                                    if(dead_mother!=UNSET and father_id!=UNSET,
                                        if(minor_siblings<=1, pension_ref_child_m/0.7*0.2,
                                            pension_ref_child_m/0.7*(0.2/(0.5+0.2*(minor_siblings+1)))),
                                if(dead_mother!=UNSET and father_id==UNSET, 
                                        if(minor_siblings<=1, pension_ref_child_m/0.7*(0.2+0.5*(minor_siblings+1)),
                                            pension_ref_child_m/0.7*((0.2+0.5*(minor_siblings+1))/(0.5+0.2*(minor_siblings+1)))),
                                0))) 
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
              # - pension_child_2_f: if(age>=18, 0, 
               #                     if(dead_father!=UNSET and mother_id!=UNSET,
                #                        if(minor_siblings<=1, pension_ref_child_f_2*0.2/0.7,
                 #                           pension_ref_child_f_2/0.7*(0.2/(0.5+0.2*(minor_siblings+1)))),
                  #                  if(dead_father!=UNSET and mother_id==UNSET, 
                   #                     if(minor_siblings<=1, pension_ref_child_f_2/0.7*(0.2+0.5*(minor_siblings+1)),
                    #                    pension_ref_child_f_2/0.7*((0.2+0.5*(minor_siblings+1))/(0.5+0.2*(minor_siblings+1)))),
                     #           0)))
      #          - pension_child_2_m: if(age>=18, 0, 
       #                             if(dead_mother!=UNSET and father_id!=UNSET,
        #                                if(minor_siblings<=1, pension_ref_child_m_2/0.7*0.2,
         #                                   pension_ref_child_m_2/0.7*(0.2/(0.5+0.2*(minor_siblings+1)))),
          #                      if(dead_mother!=UNSET and father_id==UNSET, 
           #                             if(minor_siblings<=1, pension_ref_child_m_2/0.7*(0.2+0.5*(minor_siblings+1)),
            #                            pension_ref_child_m_2/0.7*((0.2+0.5*(minor_siblings+1))/(0.5+0.2*(minor_siblings+1)))),
             #                   0)))    
        
        # Moreover, we have seen in the EPH that survivor's pensions earned by children appear in their individual observation and not their surviving 
                #parent's. As such, we separate in a distinct variable survivor's pensions given to each surviving family member (children and partner).
                
    # 5- We store family pensions in more aggregate variables. We basically sum all survivor's benefits a given individual receives (no matter the departed that originated them).
                - gross_pension_child: pension_child_f + pension_child_m 
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
          #      - gross_pension_child_2: pension_child_2_f + pension_child_2_m
        #Survivor's pensions contribute to the PAMI (elderly healthcare) just as retirement benefits.
            # Contributions to the PAMI are: 3% of the gross pension up to the minimum pension, then 6% of all income above the minimum pension. 
                - net_pension_child: if(gross_pension_child>=MIN_PENSION_CENTRAL_2014_T4, (gross_pension_child-MIN_PENSION_CENTRAL_2014_T4)*0.94+MIN_PENSION_CENTRAL_2014_T4*0.97, 
                                      gross_pension_child*0.94)
               #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
              #  - net_pension_child_2: if(gross_pension_child_2>=MIN_PENSION_CENTRAL_2014_T4, (gross_pension_child_2-MIN_PENSION_CENTRAL_2014_T4)*0.94+MIN_PENSION_CENTRAL_2014_T4*0.97, 
               #                       gross_pension_child_2*0.94)
        #We need to discount survivor's pensions following the mobility formula in force. We already did it for child benefits (we actualise the children's 
            #pensions of reference each quarter), we do so for survivor's pensions for the spouse. As usual, we only actualise it if the pension did not just start to be paid. 
                - gross_pension_p: pension_partner + gross_pension_p*REAL_MOBILITY_CENTRAL
                - net_pension_p: if(gross_pension_p>=MIN_PENSION_CENTRAL_2014_T4, (gross_pension_p-MIN_PENSION_CENTRAL_2014_T4)*0.94+MIN_PENSION_CENTRAL_2014_T4*0.97, 
                                      gross_pension_p*0.94)
                - gross_pension: gross_pension_p + gross_pension_child
                - net_pension: net_pension_p + net_pension_child
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
            #    - gross_pension_2_p: pension_partner_2 + gross_pension_2_p*REAL_MOBILITY_CENTRAL
             #   - net_pension_2_p: if(gross_pension_2_p>=MIN_PENSION_CENTRAL_2014_T4, (gross_pension_2_p-MIN_PENSION_CENTRAL_2014_T4)*0.94+MIN_PENSION_CENTRAL_2014_T4*0.97, 
               #                       gross_pension_2_p*0.94)
              #  - gross_pension_2: gross_pension_child_2 + gross_pension_2_p
               # - net_pension_2: net_pension_child_2 + net_pension_2_p
        #We finally ensure no survivor's benefit is higher than the maximum pension.         
                - gross_pension: if(gross_pension>MAX_PENSION_CENTRAL_2014_T4, MAX_PENSION_CENTRAL_2014_T4, gross_pension)
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
            #    - gross_pension_2: if(gross_pension_2>MAX_PENSION_CENTRAL_2014_T4, MAX_PENSION_CENTRAL_2014_T4, gross_pension_2)
                - net_pension: if(gross_pension>MAX_PENSION_CENTRAL_2014_T4,
                                    MIN_PENSION_CENTRAL_2014_T4*0.97+ (MAX_PENSION_CENTRAL_2014_T4-MIN_PENSION_CENTRAL_2014_T4)*0.94,
                                        net_pension)
             #   - net_pension_2: if(gross_pension_2>MAX_PENSION_CENTRAL_2014_T4,
              #                      MIN_PENSION_CENTRAL_2014_T4*0.97+ (MAX_PENSION_CENTRAL_2014_T4-MIN_PENSION_CENTRAL_2014_T4)*0.94,
               #                         net_pension_2)      
    # 6- Since we are done computing survivor's pensions, we can now remove dead people from the database.
        #We also erase their id in their relatives' observations (the surviving spouse gets an unset partner id).      
                - partner_id: if(partner.dead, UNSET, partner_id)
                - mother_id: if(mother.dead, UNSET, mother_id)
                - father_id: if(father.dead, UNSET, father_id)
              #  - show('Avg age of dead men', avg(age, filter=dead and ISMALE))
               # - show('Avg age of dead women', avg(age, filter=dead and ISFEMALE))
                - remove(dead)

            birth:
#We determine in this section who gives birth, and set the starting characteristics for the newborn of various variables. 
    #We carry out a simple alignment by sorting procedure to determine who gives birth. 
        #The target aggregate values are the conditional probabilities of giving birth by age as determined by INDEC's population projection and stocked in file p_birth_f3.csv 
            #These probabilities let women aged 10 to 49 to give birth. 
        #We however arbitrarily decided for the sake of consistency that only women that bear some characteristics can be selected to give birth:
            #1- Women that are in a common-law union or married have the highest probability of giving birth.
                - score_birth: if(ISCOUPLE or ISMARRIED, 1000 + uniform(), uniform())
            #2- Only women with up to 7 children can give birth (this sets a maximum number of 8 children).
            #3- Only women with a known partner aged 16 to 59 can give birth. 
                - to_give_birth: logit_regr(score_birth,
                                            filter=ISFEMALE and (age >= 10)and (age <= 49) and (partner.age>=16 and partner.age<=59) and nb_children<8,
                                            align='p_birth_f3.csv')
            #It is perfectly possible to estimate logistic equations on the probability of giving birth, and study fertility decisions depending on the parent's and
            #the household's characteristics. This estimated equation would then replace the arbitrary priority to women married or in a common-law union (temporary 
            #variable score_birth). This is nevertheless not a priority of this model and is thus left for future work. 
    
    #We assume 51% of newborns are boys and 49% girls, in accordance with Argentinian data taken from the "Serie de Estadísticas vitales básicas".                                  
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
    #The wage residual follows a normal distribution of mean -0.13862 and standard error 0.568956 for the second quarter of 2015, as shown in the PDF 
            #Normality of wage residuals. We thus assign a wage residual upon birth following this distribution.
                - new('person', filter=to_give_birth,
                      mother_id = id,
                      household_id = household_id,
                      age = 0,
                      age_quarters = 0,
                      formation = 1, 
                      pondera = pondera,
                      labour_market_state = INACTIVE,
                      partner_id = UNSET,
                      marital_status = 5,
                      polimodal = 0, 
                      university_year = 0,
                      student = True,
                      resid = normal(loc=-0.13862,scale=0.568956),
                      seniority = 0, 
                      quarterly_seniority = 0,
                      male = choice([True, False], [0.51, 0.49]), 
                      birth= period,
                      discounted_v2_m=0,
                      discounted_v2_m_2=0,
                      discounted_v5_m=0,
                      father_id=partner_id)
    #We then update the variables including the number of children. 
                - nb_children: if(ISFEMALE,children.count(),0)
                - nb_children_bis: if(ISMALE,children_bis.count(),0)
                - underage_children: if(ISFEMALE,children.count(age<18),0) 
                - underage_children_bis: if(ISMALE,children_bis.count(age<18),0)
                - minor_children: underage_children + underage_children_bis
                - little_children: children.count(age<5) + children_bis.count(age<5)
    #Finally, we export the weighted total of men and women of working age by age group. This is important for establishing our age-group and gender 
            #dependent labour-market scenarios, so as to reach the desired rate of, say, dependent wage-earners while taking into account the demographic 
            #structure of the starting population.
        #This active age population is the same whatever the economic scenario. As such, we only compute it once for each starting period. 
                - csv('Period', '[16;20[', '[20;25[','[25;30[','[30;35[','[35;40[','[40;45[','[45;50[','[50;55[','[55;60[','[60;65[','[65;70[', 
                                                fname='active_age_men.csv',mode='a')
                - csv(period,sum(pondera*male,filter=agegroup==16), sum(pondera*male,filter=agegroup==20),  sum(pondera*male,filter=agegroup==25),  sum(pondera*male,filter=agegroup==30), 
                                 sum(pondera*male,filter=agegroup==35),  sum(pondera*male,filter=agegroup==40),  sum(pondera*male,filter=agegroup==45),  sum(pondera*male,filter=agegroup==50),  sum(pondera*male,filter=agegroup==55), 
                                  sum(pondera*male,filter=agegroup==60),  sum(pondera*male,filter=agegroup==65), 
                                    fname='active_age_men.csv',mode='a')
                - csv('Period', '[16;20[', '[20;25[','[25;30[','[30;35[','[35;40[','[40;45[','[45;50[','[50;55[','[55;60[','[60;65[','[65;70[', 
                                                fname='active_age_women.csv',mode='a')
                - csv(period,sum(pondera*(not male),filter=agegroup==16), sum(pondera*(not male),filter=agegroup==20),  sum(pondera*(not male),filter=agegroup==25),  sum(pondera*(not male),filter=agegroup==30), 
                                 sum(pondera*(not male),filter=agegroup==35),  sum(pondera*(not male),filter=agegroup==40),  sum(pondera*(not male),filter=agegroup==45),  sum(pondera*(not male),filter=agegroup==50),  sum(pondera*(not male),filter=agegroup==55), 
                                  sum(pondera*(not male),filter=agegroup==60),  sum(pondera*(not male),filter=agegroup==65), 
                                    fname='active_age_women.csv',mode='a')
            studying: 
#This module simulates the end of studies of our young population. Starting from age 16, it determines their date of exit of the education system and their attained level of education. 
    #1- We assume all children aged 15 or less are students. We also reset some initial variables. 
                - student: if(age<=15, True, student)
                - grad: False
                - grad_bac: False
        #We assume children age 15 are in the first year of "polimodal". 
            #Polymodal education were the last three years of education (typically from ages 15-16 to 17-18), introduced by some Provinces in 1993. These were not compulsory. 
                #A 2006 education reform eliminated this nomenclature and extended compulsory education until the full completion of secondary education (hence age 18). 
                #The current nomenclature is however not harmonised from one Province to the other (divided between basic and secondary education). We thus kept the 
                    #polimodal nomenclature, since it also corresponds to the ages where we assume children may start working. 
                - polimodal: if(age==15, 1, polimodal)
        #Modulo_period is the remainder of the euclidean division of the period variable by 4. It ranges from 0 to 3. We use it to identify quarters within a year
            #The first simulated period is 49 and corresponds to the first quarter of 2015. modulo_period for that period equals 1. 
            #Thus: modulo_period==0 -> fourth quarter; ==1-> first quarter; ==2 -> second quarter; ==3, -> third quarter. 
                - modulo_period: (period) % 4
              #  - show('modulo period', modulo_period)
              #  - show('polimodal', groupby(polimodal,age))
    #2- We simulate the progression (or end) of studies of current students. 
                #Throughout this section, we carry out alignment by sorting procedures where the target rates are quarterly or yearly probabilities of experiencing a given education transition.
                #All students of a given year (years 1, 2 or 3 of polymodal education, years 1 to 6 of university) have the same probability of being selected to make a given
                #transition. This is shown by the 0.0 terms in the align() functions. Proper behavioural equations can be estimated to make students reach different study levels 
                #depending on their and their family's characteristics. This is nevertheless left for future work. 
        #a- We determine who drops out of secondary (abandon_second) and of tertiary (abandon_third) education without getting the corresponding diploma 
            #The target rates are quarterly probabilities of dropping out taken from external data and listed in my PhD. thesis' Tables 12 and 13.
                - abandon_second: if(polimodal!=0 and student and agegroup>15,align(0.0,'cal_out_poli_p.csv'),False)   
                - abandon_third: if(university_year!=0 and student , 
                                    if(male, align(0.0,'cal_out_uni_h_p.csv'),align(0.0,'cal_out_uni_f_p.csv')),False)
        #b- We determine who repeats his high school year. This is defined in our model every fourth quarter (Argentina's school year goes from March to December). 
            #The target rates are yearly probabilities of repeating the year and are taken from my PhD. thesis' Table 12. 
            #Only students aged 16 or more can repeat high school (students aged 15 are always in the first year of polymodal education). 
                - repeat_second: if(modulo_period==0 and polimodal!=0  and agegroup>15,
                                    align(0.0,'cal_rep_poli_p.csv',leave=abandon_second),False)
               # - show('repeat_second', groupby(repeat_second,lag(polimodal)))    
        #c- After that, we determine who successfully validates a year of secondary (efva_second) and tertiary (efva_uni) education. By definition, these (yearly) 
        #probabilities of validating the year are the complements of the sum of the (yearly) probabilities of dropping out and of repeating the year. 
                - efva_second: if(polimodal!=10 and polimodal!=0 and modulo_period==0  and agegroup>15,
                                            align(0.0,'cal_efva_poli_p.csv', leave=abandon_second or repeat_second),False)     
             #   - show('efva_second', groupby(efva_second,lag(polimodal)))         
                - efva_uni: if(abandon_third==False and university_year!=0 and modulo_period==0,True,False)
        #d- We determine who graduates from high school or University. 
            #By definition, if a student in the thrid and last year of polymodal education validates the year, he has successfully graduated from high school. 
                - grad_bac: if(efva_second and polimodal==3,True, False)          
            #The vast majority of university students in Argentina stop at the Bachelor (or "Licencia") level. It typically takes at least 4 years to validate it, 
                    #but since most students work at the same time and there is a lot of flexibility for validating courses over the course of various years, 
                    # it is very common to take more than 4 years to get the bachelor. We assume that: 
                #1- All students that validated their sixth year of University graduate and leave college with a university-level degree. 
                #2- Students that validate the fourth or fifth year of university have a 50% chance of graduating and a 50% chance of staying in college one more year
                #3- Students cannot graduate before the fourth year of College. 
                - grad: if(university_year==6 and efva_uni, True, 
                            if(efva_uni and (university_year==4 or university_year==5), choice([True, False], [0.5,0.5]), False))   
                - efva_uni: if(grad,False,efva_uni)
              #  - show('graduated',groupby(grad,lag(student)))
        #e- We determine who continues to tertiary education after graduating from high school. We make the hypothesis that all high school graduates continue to
            #college. Although false, it helps us replicate the numbers of students that enter university year (taken from the Ministry of Educations' Anuario de 
            #Estadísticas Universitarias). This is explained in Appendix O and Section 2.5.4. of my PhD. thesis. It is possible to change these probabilities of 
            #entry into college by changing the [1,0] interval in the choice() instruction with the desired probabilities of respectively entering and not entering college.      
                - enter_uni: if(grad_bac and student==True,                                        
                                if(male,choice([True, False], [1, 0])
                                        ,choice([True, False], [1, 0])),False)
               # - show('enter_uni',groupby(enter_uni,polimodal))                        
                - not_enter_uni: if(grad_bac and lag(polimodal)==3 and enter_uni==False, True, False)      
    #3- We deduce from the operations in step 2- who is a student, depending on his age and gender. 
        #The propensity score of being a student depends on all the above estimated transitions. It is however forbidden for a non student to become a student 
            #at the polymodal or university levels. This is because we do not simulate the return to studies at later ages in our model. 
                - score_student: if(abandon_second or abandon_third or not_enter_uni, -10+uniform(),
                                        if(repeat_second or efva_second or efva_uni or enter_uni,10+uniform(),
                                            if(grad, -100 + uniform(), 
                                                if(student, uniform(), uniform()-1000))))
        # The target proportions of students by age and gender are taken from the EPHc (2003-2017) and from our education scenarios, as listed in Section 2.5.2. Table 11 of   
                #my PhD. thesis. 
                - cal_student: if((15<age) and (age<30),
                                        if(male,align(score_student,'cal_est_m_p.csv', take=(efva_second and not grad_bac) or (efva_uni and not grad) or enter_uni, leave=not_enter_uni or grad),align(score_student,'cal_est_f_p.csv', take=(efva_second and not grad_bac) or (efva_uni and not grad) or enter_uni, leave=not_enter_uni or grad)),False)
                - student: if(15<age and age<30,
                                if(cal_student, True, False),student)
    #4- We transcribe in other variables (in particular education level and labour-market state) the consequence of being a student, graduating or dropping out. 
        #In particular, we tag people who just stopped being students. This variable is highly significant in most of our behavioural equations. 
                - labour_market_state: if(lag(student)==True and student==False, 6, labour_market_state)  
        # We modify accordingly the variables tracking secondary and tertiary education (polimodal and university_year). 
                - polimodal: if(student==False, 0, polimodal)       
                - university_year: if(student==False, 0, university_year)
                - polimodal: if(repeat_second and student==True, polimodal, polimodal)
                - pass_second: if(efva_second==True and modulo_period==0, 
                                if(polimodal==1, 2,
                                        if(polimodal==2, 3,
                                            if(polimodal==3, 4
                                            ,0))),0)
             #   - show('pass_second',groupby(pass_second,polimodal))
                
                - polimodal: if(student==True, 
                                if(pass_second==2, 2,
                                        if(pass_second==3, 3,
                                            if(pass_second==4, 4
                                                ,polimodal))),polimodal)
           #     - show('grad_bac',groupby(grad_bac,lag(polimodal)))
                - polimodal: if(grad_bac, 0, polimodal)  
                
                - university_year: if(grad, 0, university_year)
                - polimodal: if(student==False,0,polimodal)   
                - university_year: if(student==False,0,university_year)   
           
                - pass_uni: if(efva_uni and student==True, 
                                if(university_year==1, 2,
                                    if(university_year==2, 3,
                                        if(university_year==3, 4,    
                                            if(university_year==4, 5,
                                                if(university_year==5, 6,-1))))),-1)

                - university_year: if(enter_uni and student==True, 1, university_year)                 
                - university_year: if(pass_uni==2,2,
                                            if(pass_uni==3,3,
                                                if(pass_uni==4,4, 
                                                    if(pass_uni==5,5, 
                                                        if(pass_uni==6,6,
                                                            university_year)))))      
        #Finally, we update the education level variable for people that successfuly finished secondary or tertiary education. 
                - formation: if(grad_bac, 2, formation)
                - formation: if(grad, 3, formation)
               # - show('grad_bac',groupby(grad_bac,formation))   
        
            marriage:
# This module simulates the evolution of individual's marital status and updates family links accordingly. It simulates the formation and dissolution of common-law unions
        #and marriages, due to separation, divorce or death. 
            #Reminder: marital_status==1-> common-law union; ==2, married; ==3, divorced; ==4, widowed; ==5, single; 
    #1- We carry out operations to make current marital status consistent with some variables and within a given couple. 
        #First, we make all people younger than 16 be single and not in a couple.         
                - marital_status: if(age<16, SINGLE, marital_status)
                - marital_status: if(partner.marital_status==-1, marital_status, 
                                if(partner.age<16, SINGLE, marital_status))
                - partner_id: if(age<16 or partner.age<16, UNSET, partner_id)
        #Then, we make both members of a given couple have the same marital status. This is done first for men, then for women. 
                - marital_status: if(ISMALE, marital_status, 
                                if(partner.marital_status==1, COUPLED, 
                                    if(partner.marital_status==2, MARRIED,
                                        marital_status)))
                - marital_status: if(ISFEMALE, marital_status, 
                                if(partner.marital_status==1, COUPLED, 
                                    if(partner.marital_status==2, MARRIED, 
                                       marital_status)))
                - marital_status: if(ISFEMALE, marital_status, 
                                    if(partner_id==UNSET, marital_status, 
                                        partner.marital_status))
        #If none of the members of a declared couple is in a common-law union or married, then we dissolve the couple.                                     
                - partner_id: if(marital_status==COUPLED, partner_id, 
                                if(marital_status==MARRIED, partner_id, 
                                    UNSET))
                - partner_id: if(partner.marital_status==COUPLED, partner_id, 
                                if(partner.marital_status==MARRIED, partner_id, 
                                    UNSET))     
# We then enter the marital status module proper.  
    #2-We first simulate divorces. 
        #We estimate the propensity score of divorcing through a behavioural equation, run in the EPHc (2003-2015). We only estimate it for women since this was the 
                #behavioural equation with the highest AUC. We then select the number of married women that divorce by aligning it to external divorce probabilities
                # (see Appendix M of my PhD. thesis for more details on our divorce equations). 
                - divorce_women: logit_regr((-7.4967)+(0.0958)*(lag(age))+(-0.00120)*(lag(age)*lag(age))+(0.3929)*((lag(labour_market_state)==1 or lag(labour_market_state)==2 or lag(labour_market_state)==3) and (lag(partner.labour_market_state)==4 or lag(partner.labour_market_state)==5))+(-0.7627)*( (lag(labour_market_state)==4 or lag(labour_market_state)==5) and (lag(partner.labour_market_state)==4 or lag(partner.labour_market_state)==5))+
                                        (-0.2782)*(lag(labour_market_state)==4 or lag(labour_market_state)==5 and (lag(partner.labour_market_state)==1 or lag(partner.labour_market_state)==2 or lag(partner.labour_market_state)==3))+(0.6343)*(lag(formation)==1)+(0.4167)*(lag(formation)==2)
                                        +(0.6284)*(lag(formation)-lag(partner.formation)==2)
                                        ,filter = ISFEMALE and ISMARRIED and (age >= 20) and (age < 90),
                                        align = 'al_p_divorce_f_caba.csv')
            # Women that are selected by the alignment by sorting procedure (divorce_women) and their partner are then selected to divorce. 
                - to_divorce: divorce_women or partner.divorce_women  
                - marital_status: if(partner.to_divorce, DIVORCED, marital_status)
                - marital_status: if(to_divorce, DIVORCED, marital_status)
                - partner_id: if(to_divorce, UNSET, partner_id)      
                - partner_id: if(partner.to_divorce, UNSET, partner_id)   
            # We track the time a given couple has been together. This variable is not currently used in our model, but it may become the case in future versions.
                - dur_in_couple: if(to_divorce, 0, dur_in_couple)  
                - dur_in_couple: if(partner.to_divorce, 0, dur_in_couple)
            # When a couple divorces, we make the man leave the household and create a new one (where he is alone).
                - household_id: if(ISMALE and to_divorce,
                            new('household'),
                            household_id)    
                #This expression here ensures single inactive children aged 23 or less are in the household of their mother (or their father if there is no mother). 
                - household_id: if(age<24 and not IN_RELATIONSHIP and labour_market_state==5,
                            if(mother_id!=UNSET, mother.household_id,
                                if(father_id!=UNSET, father.household_id,
                                    household_id)), household_id)        
    #3- We then simulate marriage. We carry out an alignment by sorting procedure, where the individual propensity score is computed through a logit equation (our 
            #marriage equation). The individual number of marriages is aligned on external marriage probabilities. See Appendix M of mny PhD. thesis for details. 

        #We need to cut in two terms the marriage equation because LIAM2 does not support logit equations with too many explanatory variables. 
        #We estimate it only for women in a common-law union. If a woman marries, her partner becomes married as well. 
                - temp_1: (-4.8129)+(0.0841)*(lag(age))+(-0.00045)*(lag(age)*lag(age))+(-0.3135)*(lag(student) and not lag(partner.student))+
                                               (0.1222)*(lag(nb_children) + lag(nb_children_bis)>=1)+(-0.3893)*(lag(formation)==1)+(0.2627)*(lag(formation)==3)+
                                               (0.2503)*((lag(labour_market_state)==4 or lag(labour_market_state)==5) and (lag(partner.labour_market_state)==4 or lag(partner.labour_market_state)==5))+
                                               (0.1664)*((lag(age)-lag(partner.age)<=-4) and (lag(age)-lag(partner.age)>=-6))+(-0.4278)*(lag(age)-lag(partner.age)>=10)
                - temp_2: (-0.3038)*((lag(age)-lag(partner.age)<=6) and (lag(age)-lag(partner.age)>=4))+(-0.6891)*((lag(age)-lag(partner.age)<=7) and (lag(age)-lag(partner.age)>=9))+
                                               (0.1800)*(lag(formation)-lag(partner.formation)==-1)+(0.6908)*(lag(formation)-lag(partner.formation)==-2)+
                                               (-0.2766)*(lag(formation)-lag(partner.formation)==1)+(-0.2374)*(lag(formation)-lag(partner.formation)==2)                               
                - marry: if((age >= 18) and (age <= 90) and not ISMARRIED and marital_status==1 and partner_id!=UNSET,
                                if(ISFEMALE,
                                   logit_regr(temp_1 + temp_2
                                               , align='al_p_mmkt_f_caba2.csv'),
                                   False),
                                False)
                - marry: if(ISFEMALE, marry, partner.marry)  
                - marry: if(partner.marry, marry, False)
                - justmarried: marry and partner_id !=UNSET  
                - dur_in_couple: if(IN_RELATIONSHIP, dur_in_couple + 1, 0)     
        # We nevertheless give the priority to reproducing the desired aggregate proportions of married people by age and gender. Married people that do not divorce  
                #always stay married (remember we already simulated widowhood in our death module). People that got married through the marry variable, where the probability of 
                #marriage by age and gender determines who gets married, also always become married. After that, if there needs to be more married people in a given age and gender group 
                #then just enough people in a common-law union become married. 
                - score_married: if(marital_status==2, 1000+uniform(), 
                                    if(marry, 10+ uniform(),-1000 + uniform()))
                - align_married: if(age<16 or age>=90,False, 
                                    if(male,
                                        align(score_married, 'cal_civ_2_m_p.csv', leave =age<18 or marital_status==3 or marital_status==4 or marital_status==5, take=marital_status==2),
                                        align(score_married, 'cal_civ_2_f_p.csv', leave =age<18 or marital_status==3 or marital_status==4 or marital_status==5, take=marital_status==2)))   
               # - score_marry: if(marital_status==2,-1000+uniform(),
                  #                  if(marry, 1000+uniform(),
                   #                     uniform()))
                #- gets_married: if(age>15, 
                 #                       if(male, align(score_marry, 'cal_civ_2_m_p.csv', leave =agegroup<16 or agegroup>80),align(score_marry, 'cal_civ_2_f_p.csv', leave =agegroup<16 or agegroup>80)),
                    #                    False)
                - marry_true: if(marry or align_married==True, True, False)    
                - marital_status: if(marry_true,MARRIED,marital_status)
                - marital_status: if(partner.marry_true, MARRIED, marital_status)    
        # In the end, our marriage module follows the objective of reproducing the desired aggregate proportions of married people by age and gender. The micro-coherence
                #of this module (through the marry statement, that makes marriage depend on individual marriage rates by age and gender) is secondary. 
                
    # 4- We simulate then people in a common-law union. We actually started to simulate them in our marriage module, since marriage is one of the exits from 
            #common-law unions. The other (excluding death, already covered in our death module) are break-ups. 
        #We first select men in a common-law union (so that neither married nor had their partner die) to break from their union. We do so with an alignmetn by sorting 
                #procedure: the propensity score of breaking up is computed through a separation equation estimated in the EPHc (2003-2015). See Appendix M of my 
                #PhD. thesis for more details on this equation.
                - breakup_score: if(marital_status==1 and (age>=16) and age<90 and partner_id!=UNSET and partner.marital_status==1,
                                    if(ISMALE,logit_score((-0.1722)*(lag(age))+(0.00153)*(lag(age)*lag(age))+(0.1845)*(lag(formation)==1)+(-0.2508)*(lag(formation)==3)+
                                                           (-0.3557)*((lag(age)-lag(partner.age)<=-4) and (lag(age)-lag(partner.age)>=-6))+(0.6010)*(lag(age)-lag(partner.age)>=10)+
                                                           (0.6012)*(lag(age)-lag(partner.age)<=-10)+(-0.1980)*(lag(formation)-lag(partner.formation)==-1)+
                                                           (0.1558)*(lag(formation)-lag(partner.formation)==-2)+(0.3672)*(lag(formation)-lag(partner.formation)==1)+
                                                           (-0.9688)*(lag(nb_children) + lag(nb_children_bis)>=1))
                                                            , -1000),
                                                            -100000)
            #Then, we select enough people in a common-law union to break up in order to reproduce individual probabilities of breaking up by age group and 
                    #gender, as measured in the EPHc (2003-2015) and listed in my PhD. thesis' Table 10.                                                
                - to_breakup: if((age >= 16) and (age < 90) and marital_status ==1 and partner_id!=UNSET ,
                                if(ISMALE,
                                   align(breakup_score,'cal_breakup_h.csv'),
                                   False),
                                False)
               
                - to_breakup: if(ISFEMALE, partner.to_breakup, to_breakup)
                - to_breakup: if(partner.to_breakup, True, False)
                
        # After we decided who breaks up from a common-law union, we actualise a range of other relevant variables accordingly.  
                - marital_status: if(to_breakup or partner.to_breakup,5,marital_status)
                - dur_in_couple: if(to_breakup , 0, dur_in_couple) 
                - dur_in_couple: if(partner.to_breakup, 0, dur_in_couple)
                - partner_id: if(to_breakup, UNSET, partner_id)
                - partner_id: if(partner.to_breakup, UNSET, partner_id)
            #In particular, we make men that broke up form a new household.   
                - household_id: if(ISMALE and to_breakup,
                            new('household'),
                            household_id)   
    #5- We finish the simulation of people in a common-law union, through the formation of new unions. This is also the only matching procedure included in 
            #this microsimulation model. 
        # The matching equation is spread out in temporary variables temp_3 to temp_6. It is estimated in the EPHc (2003-2015) and its details are available 
                #in my PhD. thesis' Appendix M.     
                - temp_3: (-5.5790)+(0.0473)*(lag(age))+(-0.00044)*(lag(age)*lag(age))+(-0.6678)*(lag(nb_children) + lag(nb_children_bis)>=1)+
                          (0.5785)*(lag(formation)==1)+(0.3886)*(lag(marital_status)==3)+(-0.1850)*(lag(sect_quartile)!=1 or lag(labour_market_state)!=1)+
                          (-0.3303)*(lag(sect_quartile)==2 and lag(labour_market_state)==1)+(0.3896)*(lag(sect_quartile)==4 and lag(labour_market_state)==1)
                - temp_4: (0.5644)*(lag(sect_quartile)==3 and lag(labour_market_state)==2)+(-3.3763)*(lag(sect_quartile)==4 and lag(labour_market_state)==2)+
                          (-0.2531)*(lag(labour_market_state)==4)+(-1.0837)*(lag(labour_market_state)==5)
                - temp_5: (-6.1245)+(0.0443)*(lag(age))+(-0.00072)*(lag(age)*lag(age))+(-0.5202)*(lag(nb_children) + lag(nb_children_bis)>=1)+
                          (0.4334)*(lag(formation)==1)+(0.2590)*(lag(formation)==3)+(-1.1520)*(lag(marital_status)==4)
                - temp_6: (0.4409)*(lag(sect_quartile)!=1 or lag(labour_market_state)!=1)+(-1.4574)*(lag(sect_quartile)==1 and lag(labour_market_state)==2)+
                          (0.2702)*(lag(sect_quartile)==1 and lag(labour_market_state)==3)+(0.5364)*(lag(sect_quartile)==4 and lag(labour_market_state)==3)
        #We give priority in the matching of new couples to married people without a known partner, so as to correct the flaw present in the EPHc of people that 
                #declare being married or in a common-law union but do not have a known partner. This way we can match them in a new common-law union with a known 
                #partner. 
                - score_couple: if((age >= 16) and (age < 90) and marital_status !=2 and partner_id==UNSET,
                                        if(ISMALE, logit_score(temp_3 + temp_4),
                                            logit_score(temp_5 + temp_6)),-10)
                - score_couple: if(marital_status==2 and partner_id!=UNSET, -1000 + uniform(),
                                    if(marital_status==1, score_couple + 1000 +uniform(),
                                        if(marital_status==2 and partner_id==UNSET, 10000+uniform(),
                                            score_couple)))             
        #We align the proportions of people in a common-law union by age and gender to the desired aggregate values, listed in cal_civ_1_m_p.csv and cal_civ_1_f_p.csv    
                - to_couple: if((age >= 16) and (age < 90) and to_breakup==False,
                                if(ISMALE,
                                   logit_regr(score_couple, align='cal_civ_1_m_p.csv'),
                                   logit_regr(score_couple, align='cal_civ_1_f_p.csv')),
                                False)
        #We then need to match together people that enter a common-law union. To do so, we only take people that are selected to be in a common-law union this period but 
                #have no known partner. This encompasses people that were not in a relationship and people that declared being married or in a couple but did not 
                #have a known partner. 
                - to_couple: if(partner_id!=UNSET, False, to_couple)
            # We take the difficult_match procedure from LIAM2 demonstration code, but modify it: 
                    #The original version gave priority in the formation of new couples to people with big age differences (in this case, women whose age is 
                    #furthest away from the mean age of men taht are candidates to a new common-law union). We added a - sign to the abs() term to select instead 
                    #women closest to the mean age of candidate men.       
                - difficult_match: if(to_couple and ISFEMALE,
                                      -abs(age - avg(age, filter=to_couple and ISMALE)),
                                      nan)     
            #Then, the set2filter variable is set to males. As such, we input the coefficients of the matching equation as estimated from the men's point of vue 
                    #(this means our model is calibrated on men that enter a common-law union in SAS, and their new female partner's characteristics)
                    #The other.variables are men's characteristics, whereas variables without the other. prefix refer to women. 
                - partner_id: if(to_couple,
                                 matching(set1filter=ISFEMALE, set2filter=ISMALE,
                                          score=(1.5850)+(-0.5279)*(other.labour_market_state!=4 and other.labour_market_state!=5 and (labour_market_state==4 or labour_market_state==5 ))+
                                          (-0.2832)*((other.labour_market_state==4 or other.labour_market_state==5 ) and (labour_market_state==4 or labour_market_state==5))+(-1.5761)*(other.age-age<=-4 and other.age-age>=-6)+
                                          (-0.9418)*(other.age-age<=-7 and other.age-age>=-9)+(-1.7427)*(other.age-age>=10)+(-0.3829)*(other.age-age<=6 and other.age-age>=4)+
                                          (-0.3506)*(other.age-age<=9 and other.age-age>=7)+(-2.4186)*(other.age-age<=-10)+(-0.7007)*(other.formation-formation==-1)+
                                          (-2.1229)*(other.formation-formation==-2)+(-0.7662)*(other.formation-formation==1)+(-1.9011)*(other.formation-formation==2)
                                          ,
                                          orderby= difficult_match, algo="byvalue"),
                                 partner_id)
                
            #At this exact point of the code, male and female candidates to enter a common-law union have been assigned a partner. Those who despite this matching 
                    #procedure are still without a partner are therefore not selected to enter the common-law union marital status, and keep their previous marital status.
                - to_couple: if(partner_id==UNSET,False,to_couple)
                - justcoupled: to_couple and (partner_id != UNSET) and partner.to_couple 
                - justmarried: marry_true and (partner_id!=UNSET) and partner.marry_true
                - dur_in_couple: if(justcoupled, 0, dur_in_couple)
        #Finally, we make new couples form a new household
                - household_id: if(ISMALE,
                            if(justcoupled, new('household'), household_id),household_id)
                - household_id: if(ISFEMALE,
                            if(justcoupled, partner.household_id, household_id),
                            household_id)
            #We also make unmarried couples that marry enter a new household. This is mostly to make them leave one of their parent's household, if they cohabited 
                    #with a non-nuclear family member. Most of the time this only changes the name of the household since the household was made up of only the 
                    #nuclear family to begin with.
                - household_id: if(ISMALE,
                            if(justmarried, new('household'), household_id),household_id)
                - household_id: if(ISFEMALE,
                            if(justmarried, partner.household_id, household_id),
                            household_id)
            #As we did earlier in this module, we once again make children their newlywed parents (or their father or mother that entered a common-law union). 
                    #As usual, we consider the mother keeps custody of the children. 
                - household_id: if(age<24 and not IN_RELATIONSHIP and labour_market_state==5,
                            if(mother_id!=UNSET, mother.household_id,
                                if(father_id!=UNSET, father.household_id,
                                    household_id)), household_id)         
                - marital_status: if(justcoupled or partner.justcoupled, COUPLED, marital_status)
                - marital_status: if(partner.marital_status==1, COUPLED, marital_status)
            get_a_life:
#This short module is taken almost as is from LIAM2 demonstration code. It simply ensures people aged 24 or more not in a relationship make a new household, even if
        #they are inactive. 
                - alone: household.nb_persons ==1
                - household_id: if(not IN_RELATIONSHIP and not alone and (age >= 24),
                            new('household'),
                            household_id)

            labour_market_state:
#This is the labour-market state module, where we simulate transitions between five states: formal dependent labour, working in the formal independent sector, 
        #informality, unemployment and inactivity. It is an alignment by sorting procedure, where we rank individuals depending on their propensity score of being
        #in one of the above states in t depending on his simulated characteristics for t and their labour-market situation in t-1. 
    #1- Some preliminary steps: we compute retirement pensions as a percentage of the gross wage taken in our scenario GROSS_WAGE_CENTRAL_2014_T4. Both discounted_v2_m and 
            #GROSS_WAGE_CENTRAL are in November 2014 pesos and discounted with the CPI. We also force people aged 15 or less or 70 or more into inactivity.  
                #COUNTERFACTUAL SCENARIO 2015: there is no universal pension.
                - v2_m_bis: (lag(discounted_v2_m)+lag(sac_jp_net))/lag(GROSS_WAGE_CENTRAL_2014_T4)
                - labour_market_state: if(15<age and age<70, labour_market_state, INACTIVE)
    #2- We then input the estimated behavioural equations. We have to split the coefficients into various temporary variables 
                - temp_1: (2.3347)+(v2_m_bis)*(-0.3021)+(partner.v2_m_bis)*(-0.3553)+(IS_FORMATION1)*(-1.6854)+(IS_FORMATION2)*(-0.6465)+(partner.labour_market_state==-1)*(-1.6637)
                                                        +(partner.labour_market_state==1)*(-1.9570)+(partner.labour_market_state==3)*(-2.1101)+(partner.labour_market_state==4)*(-2.1873)+(partner.labour_market_state==5)*(-2.2379)
                
                - temp_2:  (labour_market_state==1 and sect_quartile== 1)*(-0.7981)+(labour_market_state==1 and sect_quartile== 2)*(-1.7823)+(labour_market_state==1 and sect_quartile== 4)*(-0.4383)+(labour_market_state!=2 or sect_quartile!=1)*(-3.3208)
                                                        +(labour_market_state==2 and sect_quartile== 2)*(3.5073)+(labour_market_state==2 and sect_quartile== 3)*(3.7082)+(labour_market_state==2 and sect_quartile== 4)*(4.1695)
                                                        +(labour_market_state==3 and sect_quartile== 3)*(0.8403)+(labour_market_state==3 and sect_quartile== 4)*(1.3470)+(labour_market_state==5)*(-1.1619)                                       
                
                - temp_3: (2.7141)+(v2_m_bis)*(-0.9981)+(partner.v2_m_bis)*(-0.5650)+(age)*(-0.0562)+(IS_FORMATION1)*(0.7172)+(IS_FORMATION2)*(0.4280)
                                                        +(ISCOUPLE)*(0.2427)+(ISDIVORCED)*(0.5502)+(ISWIDOW)*(0.3188)+(ISSINGLE)*(0.2819)+(partner.labour_market_state==-1)*(0.3762)+(partner.labour_market_state==2)*(0.5862)
                                                        +(partner.labour_market_state==3)*(1.0540)+(partner.labour_market_state==4)*(0.8414)+(partner.labour_market_state==5)*(0.1792)+(labour_market_state==1 and sect_quartile== 1)*(-0.3394)
                - temp_4:  (labour_market_state==1 and sect_quartile== 2)*(-1.4080)+(labour_market_state==1 and sect_quartile== 3)*(-0.9099)+(labour_market_state==1 and sect_quartile== 4)*(-1.8524)
                                                        +(labour_market_state==2 and sect_quartile==1)*(0.5792)+(labour_market_state==2 and sect_quartile== 2)*(0.3398)+(labour_market_state!=3 or sect_quartile!=1)*(-1.8805)
                                                        +(labour_market_state==3 and sect_quartile== 2)*(2.2168)+(labour_market_state==3 and sect_quartile== 3)*(2.2966)+(labour_market_state==3 and sect_quartile== 4)*(2.1187)
                                                        +(labour_market_state==5)*(-1.0093)                                       
                - wage_earner_score: if(ACTIVEAGE,
                                        if(ISMALE, 
                                           logit_score((2.4008)+(IS_FORMATION2)*(0.3469)+(IS_FORMATION3)*(0.5928)+(age>=16 and age<20)*(-1.0280)+(age>=25 and age<30)*(0.1381)
                                                        +(age>=30 and age<35)*(0.0891)+(age>=40 and age<45)*(-0.0580)+(age>=45 and age<50)*(-0.2322)+(age>=50 and age<55)*(-0.2892)
                                                        +(age>=55 and age<60)*(-0.4782)+(age>=60 and age<65)*(-0.6158)+(ISCOUPLE)*(-0.1996)+(ISSINGLE)*(-0.2936)
                                                        +(partner.labour_market_state==-1)*(-0.2723)+(partner.labour_market_state==2)*(-0.7309)+(partner.labour_market_state==3)*(-0.4503)
                                                        +(partner.labour_market_state==4)*(-0.1341)+(partner.labour_market_state==5)*(-0.1496)+(little_children==2)*(-0.1585)
                                                        +(labour_market_state==6)*(1.3811)+(labour_market_state!=1 or sect_quartile!=1)*(0.5825)+(labour_market_state==1 and sect_quartile==2)*(-0.0662)
                                                        +(labour_market_state==1 and sect_quartile==3)*(0.0844)+(labour_market_state==2 and sect_quartile==3)*(0.2611)+(labour_market_state==2 and sect_quartile==4)*(0.6674)
                                                        +(labour_market_state==3 and sect_quartile==2)*(0.4140)+(labour_market_state==3 and sect_quartile==3)*(0.7758)+(labour_market_state==3 and sect_quartile==4)*(1.1512)
                                                        +(labour_market_state==4)*(0.3721)+(labour_market_state==5)*(-0.4878)+(labour_market_state!=1 or seniority!=5)*(-5.4804)+(labour_market_state==1 and seniority==1)*(3.8934)
                                                        +(labour_market_state==1 and seniority==2)*(4.0887)+(labour_market_state==1 and seniority==3)*(4.2793)+(labour_market_state==1 and seniority==4)*(4.7647)
                                                        +(labour_market_state==3 and seniority==5)*(-0.7931)+(labour_market_state==3 and seniority==4)*(-0.2032)),
                                            logit_score((2.0542)+(IS_FORMATION2)*(0.4384)+(IS_FORMATION3)*(1.0134)+(age>=16 and age<20)*(-1.4007)+(age>=20 and age<25)*(-0.2928)
                                                        +(age>=40 and age<45)*(-0.1255)+(age>=45 and age<50)*(-0.0810)+(age>=50 and age<55)*(-0.1163)+(age>=55 and age<60)*(-0.1291)
                                                        +(ISCOUPLE)*(0.2116)+(ISDIVORCED)*(0.2428)+(ISSINGLE)*(0.3975)+(partner.labour_market_state==-1)*(-0.2842)+(partner.labour_market_state==2)*(-0.5716)
                                                        +(partner.labour_market_state==3)*(-0.4418)+(partner.labour_market_state==5)*(-0.0974)+(little_children==1)*(-0.1668)+(little_children==2)*(-0.5477)
                                                        +(labour_market_state==6)*(1.7014)+(labour_market_state!=1 or sect_quartile!=1)*(0.5499)+(labour_market_state==1 and sect_quartile==3)*(0.0705)+(labour_market_state==2 and sect_quartile==1)*(-0.5362)
                                                        +(labour_market_state==2 and sect_quartile==2)*(-0.1949)+(labour_market_state==2 and sect_quartile==4)*(0.2173)+(labour_market_state==3 and sect_quartile==1)*(-0.7448)
                                                        +(labour_market_state==3 and sect_quartile==3)*(0.4558)+(labour_market_state==3 and sect_quartile==4)*(0.9393)+(labour_market_state==4)*(-0.4429)+(labour_market_state==5)*(-1.5604)
                                                        +(labour_market_state!=1 or seniority!=5)*(-5.2337)+(labour_market_state==1 and seniority==1)*(3.7352)+(labour_market_state==1 and seniority==2)*(3.7941)
                                                        +(labour_market_state==1 and seniority==3)*(4.0156)+(labour_market_state==1 and seniority==4)*(4.3604)+(labour_market_state==2 and seniority==2)*(0.6621)
                                                        +(labour_market_state==3 and seniority==5)*(-0.7639)+(labour_market_state==3 and seniority==1)*(-0.0932)+(labour_market_state==3 and seniority==4)*(-0.2517)
                                                        )),
                                        if(ISMALE  and  age>=65  and  age<70,
                                            logit_score((10.2364)+(v2_m_bis)*(-0.7958)+(partner.v2_m_bis)*(-0.8137)+(IS_FORMATION2)*(0.2398)+(age)*(-0.1427)+(ISCOUPLE)*(0.3793)
                                                        +(ISDIVORCED)*(-0.5798)+(partner.labour_market_state==2)*(-0.6144)+(partner.labour_market_state==3)*(-0.3811)+(labour_market_state!=1 or sect_quartile!=1)*(-3.9742)
                                                        +(labour_market_state==1 and sect_quartile== 2)*(4.6097)+(labour_market_state==1 and sect_quartile== 3)*(4.8504)+(labour_market_state==1 and sect_quartile== 4)*(4.8262)
                                                        +(labour_market_state==2 and sect_quartile== 2)*(-1.2657)+(labour_market_state==2 and sect_quartile== 3)*(0.9252)+(labour_market_state==2 and sect_quartile== 4)*(0.7496)
                                                        +(labour_market_state==3 and sect_quartile== 3)*(0.4201)+(labour_market_state==3 and sect_quartile== 4)*(0.9091)+(labour_market_state==5)*(-0.5191)),
                                        if(ISFEMALE and age>=60 and age<70,
                                            logit_score((6.1631)+(v2_m_bis)*(-0.3805)+(partner.v2_m_bis)*(-0.1852)+(IS_FORMATION2)*(0.3333)+(IS_FORMATION3)*(0.5288)+(age)*(-0.0826)
                                                        +(ISCOUPLE)*(0.2661)+(ISDIVORCED)*(-0.5293)+(ISWIDOW)*(-0.5233)+(ISSINGLE)*(-0.2804)+(partner.labour_market_state==-1)*(0.5412)
                                                        +(partner.labour_market_state==2)*(-0.9232)+(partner.labour_market_state==3)*(-0.5156)+(partner.labour_market_state==4)*(-0.7800)+(partner.labour_market_state==5)*(-0.1235)
                                                        +(labour_market_state!=1 or sect_quartile!=1)*(-3.7918)+(labour_market_state==1 and sect_quartile== 2)*(4.6808)+(labour_market_state==1 and sect_quartile== 3)*(3.9155)
                                                        +(labour_market_state==1 and sect_quartile== 4)*(4.5140)+(labour_market_state==2 and sect_quartile== 1)*(-0.9274)+(labour_market_state==3 and sect_quartile== 1)*(-1.3722)
                                                        +(labour_market_state==3 and sect_quartile== 4)*(0.7935)+(labour_market_state==4)*(-1.5222)+(labour_market_state==5)*(-2.0462))
                                                        ,-10)))
                - independent_score: if(ACTIVEAGE,
                                        if(ISMALE, 
                                            logit_score((2.3587)+(IS_FORMATION1)*(-1.4119)+(IS_FORMATION2)*(-0.7266)+(age>=16 and age<20)*(-2.2866)+(age>=20 and age<25)*(-0.8019)
                                                          +(age>=25 and age<30)*(-0.3659)+(age>=30 and age<35)*(-0.1233)+(age>=40 and age<45)*(0.1716)+(age>=45 and age<50)*(0.1076)
                                                          +(age>=50 and age<55)*(0.1982)+(age>=55 and age<60)*(0.1180)+(age>=60 and age<65)*(0.1420)+(ISCOUPLE)*(-0.0712)
                                                          +(ISSINGLE)*(-0.2713)+(partner.labour_market_state==-1)*(-1.2938)+(partner.labour_market_state==1)*(-1.3206)+(partner.labour_market_state==3)*(-1.7128)
                                                          +(partner.labour_market_state==4)*(-1.4936)+(partner.labour_market_state==5)*(-1.3040)+(labour_market_state==6)*(1.5217)+(labour_market_state==1 and sect_quartile==2)*(-0.5256)
                                                          +(labour_market_state==1 and sect_quartile==3)*(-0.3984)+(labour_market_state==2 and sect_quartile==3)*(0.2156)+(labour_market_state==2 and sect_quartile==4)*(0.2818)
                                                          +(labour_market_state==3 and sect_quartile==4)*(0.3585)+(labour_market_state==4)*(0.7164)+(labour_market_state==1 and seniority==5)*(-0.5522)+(labour_market_state==1 and seniority==2)*(-0.3025)
                                                          +(labour_market_state==1 and seniority==4)*(-0.3032)+(labour_market_state!=2 or seniority!=5)*(-3.8929)+(labour_market_state==2 and seniority==1)*(3.2455)
                                                          +(labour_market_state==2 and seniority==2)*(3.4825)+(labour_market_state==2 and seniority==3)*(3.7521)+(labour_market_state==2 and seniority==4)*(3.7334)
                                                          +(labour_market_state==3 and seniority==5)*(1.3930)+(labour_market_state==3 and seniority==1)*(0.3750)+(labour_market_state==3 and seniority==2)*(0.5849)
                                                          +(labour_market_state==3 and seniority==3)*(0.6760)+(labour_market_state==3 and seniority==4)*(0.8405)), 
                                            logit_score((1.9333)+(IS_FORMATION1)*(-1.7009)+(IS_FORMATION2)*(-0.8914)+(age>=16  and  age<20)*(-1.5498)+(age>=20  and  age<25)*(-0.6639)
                                                          +(age>=25  and  age<30)*(-0.2559)+(age>=40  and  age<45)*(0.1120)+(age>=45  and  age<50)*(0.2406)+(age>=50  and  age<55)*(0.3772)
                                                          +(age>=55  and  age<60)*(0.2470)+(partner.labour_market_state==-1)*(-1.0210)+(partner.labour_market_state==1)*(-1.2083)+(partner.labour_market_state==3)*(-1.4907)
                                                          +(partner.labour_market_state==4)*(-1.2222)+(partner.labour_market_state==5)*(-1.2685)+(little_children==0)*(-0.0767)+(labour_market_state==6)*(1.4915)
                                                          +(labour_market_state==1 and sect_quartile==1)*(0.2699)+(labour_market_state==1 and sect_quartile==4)*(0.3744)+(labour_market_state==2 and sect_quartile==3)*(0.2491)
                                                          +(labour_market_state==2 and sect_quartile==4)*(0.2093)+(labour_market_state==3 and sect_quartile==2)*(0.3169)+(labour_market_state==3 and sect_quartile==3)*(0.5639)
                                                          +(labour_market_state==3 and sect_quartile==4)*(0.9320)+(labour_market_state==4)*(0.8869)+(labour_market_state==5)*(0.3764)+(labour_market_state==1 and seniority==5)*(-0.5022)
                                                          +(labour_market_state==1 and seniority==1)*(-0.8587)+(labour_market_state==1 and seniority==4)*(-0.1870)+(labour_market_state!=2 or seniority!=5)*(-4.7454)
                                                          +(labour_market_state==2 and seniority==1)*(4.0320)+(labour_market_state==2 and seniority==2)*(3.6150)+(labour_market_state==2 and seniority==3)*(4.2572)+(labour_market_state==2 and seniority==4)*(4.4915)
                                                          +(labour_market_state==3 and seniority==5)*(1.7089)+(labour_market_state==3 and seniority==2)*(0.6211)+(labour_market_state==3 and seniority==3)*(0.9690)+(labour_market_state==3 and seniority==4)*(1.2075)
                                                        )),
                                        if(ISMALE and age>=65 and age<70,
                                            logit_score((-218.2)+(v2_m_bis)*(-0.4291)+(partner.v2_m_bis)*(-0.4151)+(age)*(6.6815)+(age*age)*(-0.0505)+(IS_FORMATION1)*(-1.5656)
                                                        +(IS_FORMATION2)*(-0.9560)+(ISCOUPLE)*(-0.6187)+(ISDIVORCED)*(0.8384)+(partner.labour_market_state==-1)*(-2.5092)+(partner.labour_market_state==1)*(-2.2132)
                                                        +(partner.labour_market_state==3)*(-2.4300)+(partner.labour_market_state==4)*(-1.5843)+(partner.labour_market_state==5)*(-1.9269)+(labour_market_state==1 and sect_quartile== 3)*(-0.7870)
                                                        +(labour_market_state==1 and sect_quartile== 4)*(-0.8419)+(labour_market_state!=2 or sect_quartile!=1)*(-2.9106)+(labour_market_state==2 and sect_quartile== 2)*(3.4490)
                                                        +(labour_market_state==2 and sect_quartile== 3)*(3.4316)+(labour_market_state==2 and sect_quartile== 4)*(3.7060)+(labour_market_state==3 and sect_quartile== 3)*(0.7503)
                                                        +(labour_market_state==3 and sect_quartile== 4)*(0.9522)+(labour_market_state==5)*(-0.8878)),
                                        if(ISFEMALE and age>=60 and age<70,
                                            logit_score(temp_1 + temp_2)
                                        ,-10)))

                - unregistered_score: if(ACTIVEAGE,
                                        if(ISMALE, logit_score((0.4251)+(IS_FORMATION1)*(1.1038)+(IS_FORMATION2)*(0.6866)+(age>=16 and age<20)*(-0.7414)+(age>=20 and age<25)*(-0.1981)
                                                                +(age>=25 and age<30)*(-0.0477)+(age>=45 and age<50)*(0.0956)+(age>=60 and age<65)*(-0.2403)+(ISMARRIED)*(-0.2368)
                                                                +(ISDIVORCED)*(-0.2073)+(ISWIDOW)*(-0.1713)+(ISSINGLE)*(-0.3861)+(partner.labour_market_state==-1)*(-0.2321)+(partner.labour_market_state==1)*(-0.5818)
                                                                +(partner.labour_market_state==2)*(-1.1216)+(partner.labour_market_state==4)*(-0.4161)+(partner.labour_market_state==5)*(-0.2728)+(little_children==0)*(-0.1906)
                                                                +(little_children==1)*(-0.1465)+(labour_market_state==6)*(2.0071)+(labour_market_state==1 and sect_quartile==1)*(0.8375)+(labour_market_state==1 and sect_quartile==2)*(0.2858)
                                                                +(labour_market_state==2 and sect_quartile==3)*(-0.2922)+(labour_market_state==2 and sect_quartile==4)*(-0.8021)+(labour_market_state!=3 or sect_quartile!=1)*(0.0765)
                                                                +(labour_market_state==3 and sect_quartile==2)*(0.1527)+(labour_market_state==3 and sect_quartile==3)*(0.2270)+(labour_market_state==4)*(1.6482)+(labour_market_state==1 and seniority==5)*(-1.4658)
                                                                +(labour_market_state==1 and seniority==1)*(0.2240)+(labour_market_state==1 and seniority==3)*(-0.1955)+(labour_market_state==1 and seniority==4)*(-0.6825)
                                                                +(labour_market_state==2 and seniority==5)*(1.3822)+(labour_market_state==2 and seniority==1)*(1.8515)+(labour_market_state==2 and seniority==2)*(2.0819)
                                                                +(labour_market_state==2 and seniority==3)*(1.6508)+(labour_market_state==2 and seniority==4)*(1.6328)+(labour_market_state==3 and seniority==5)*(3.0917)
                                                                +(labour_market_state!=3 or seniority!=1)*(-2.6328)+(labour_market_state==3 and seniority==2)*(2.7622)+(labour_market_state==3 and seniority==3)*(2.7977)
                                                                +(labour_market_state==3 and seniority==4)*(3.0238)),
                                            logit_score((-0.4302)+(IS_FORMATION1)*(0.6567)+(IS_FORMATION2)*(0.4431)+(age>=16  and  age<20)*(-1.1731)+(age>=20  and  age<25)*(-0.4240)
                                                        +(age>=25  and  age<30)*(-0.2011)+(age>=30  and  age<35)*(-0.0777)+(age>=40  and  age<45)*(0.0869)+(age>=50  and  age<55)*(-0.0751)
                                                        +(age>=55  and  age<60)*(-0.2687)+(ISCOUPLE)*(0.0838)+(ISDIVORCED)*(0.4052)+(ISWIDOW)*(0.2628)+(ISSINGLE)*(0.0982)
                                                        +(partner.labour_market_state==-1)*(0.3237)+(partner.labour_market_state==3)*(0.5361)+(partner.labour_market_state==4)*(0.5149)+(partner.labour_market_state==5)*(0.3951)
                                                        +(little_children==0)*(0.1731)+(little_children==1)*(0.1147)+(labour_market_state==6)*(1.7935)+(labour_market_state==1 and sect_quartile==1)*(0.6596)
                                                        +(labour_market_state==1 and sect_quartile==4)*(-0.3723)+(labour_market_state==2 and sect_quartile==1)*(0.5423)+(labour_market_state==2 and sect_quartile==2)*(0.7024)
                                                        +(labour_market_state==2 and sect_quartile==3)*(0.2326)+(labour_market_state!=3 or sect_quartile!=1)*(0.3817)+(labour_market_state==3 and sect_quartile==4)*(-0.2488)
                                                        +(labour_market_state==4)*(1.1486)+(labour_market_state==1 and seniority==5)*(-1.5651)+(labour_market_state==1 and seniority==1)*(0.3301)+(labour_market_state==1 and seniority==3)*(-0.4149)
                                                        +(labour_market_state==1 and seniority==4)*(-0.5213)+(labour_market_state==2 and seniority==5)*(0.3451)+(labour_market_state==2 and seniority==1)*(0.7854)
                                                        +(labour_market_state==2 and seniority==2)*(1.2148)+(labour_market_state==2 and seniority==3)*(0.6672)+(labour_market_state==2 and seniority==4)*(0.8877)
                                                        +(labour_market_state==3 and seniority==5)*(3.1887)+(labour_market_state!=3 or seniority!=1)*(-3.0653)+(labour_market_state==3 and seniority==2)*(2.9703)
                                                        +(labour_market_state==3 and seniority==3)*(2.8721)+(labour_market_state==3 and seniority==4)*(3.1183))),
                                            if(ISMALE and age>=65 and age<70,
                                            logit_score((0.8971)+(v2_m_bis)*(-0.6555)+(partner.v2_m_bis)*(-0.4270)+(IS_FORMATION1)*(0.3516)+(IS_FORMATION2)*(0.2712)+(partner.labour_market_state==-1)*(-0.6644)
                                                        +(partner.labour_market_state==1)*(-1.1575)+(partner.labour_market_state==2)*(-1.6700)+(partner.labour_market_state==4)*(-1.0010)+(partner.labour_market_state==5)*(-0.7557)
                                                        +(labour_market_state==1 and sect_quartile== 2)*(-0.9523)+(labour_market_state==1 and sect_quartile== 3)*(-1.4011)+(labour_market_state==1 and sect_quartile== 4)*(-1.1557)
                                                        +(labour_market_state==2 and sect_quartile== 1)*(0.6315)+(labour_market_state!=3 or sect_quartile!=1)*(-1.7553)+(labour_market_state==3 and sect_quartile== 2)*(1.6990)
                                                        +(labour_market_state==3 and sect_quartile== 3)*(1.6106)+(labour_market_state==3 and sect_quartile== 4)*(1.9879)+(labour_market_state==5)*(-0.8953)),
                                        if(ISFEMALE and age>=60 and age<70,
                                            logit_score(temp_3 + temp_4)
                                    ,-10)))
                - unemployed_score: if(ACTIVEAGE,
                                        if(ISMALE, logit_score((-0.8166)+(IS_FORMATION1)*(0.1661)+(IS_FORMATION2)*(0.1777)+(age>=16  and  age<20)*(-0.3485)+(age>=50  and  age<55)*(0.1456)
                                                        +(age>=55  and  age<60)*(0.1426)+(age>=60  and  age<65)*(0.1726)+(ISCOUPLE)*(-0.3228)+(ISMARRIED)*(-0.3399)
                                                        +(ISDIVORCED)*(-0.2379)+(ISWIDOW)*(-0.5263)+(partner.labour_market_state==1)*(0.2461)+(partner.labour_market_state==2)*(-0.4125)+(partner.labour_market_state==4)*(0.5589)
                                                        +(partner.labour_market_state==5)*(-0.2215)+(little_children==2)*(0.1765)+(labour_market_state==6)*(1.9343)+(labour_market_state==1 and sect_quartile==1)*(0.3850)
                                                        +(labour_market_state==1 and sect_quartile==2)*(0.1222)+(labour_market_state==1 and sect_quartile==4)*(-0.5530)+(labour_market_state==2 and sect_quartile==1)*(0.2539)
                                                        +(labour_market_state==2 and sect_quartile==3)*(-0.4647)+(labour_market_state==2 and sect_quartile==4)*(-1.4722)+(labour_market_state==3 and sect_quartile==1)*(0.3650)
                                                        +(labour_market_state==3 and sect_quartile==3)*(-0.1621)+(labour_market_state==3 and sect_quartile==4)*(-0.3209)+(labour_market_state!=4)*(-2.3111)+(labour_market_state==1 and seniority==5)*(-2.2190)
                                                        +(labour_market_state==1 and seniority==3)*(-0.3998)+(labour_market_state==1 and seniority==4)*(-1.0389)+(labour_market_state==2 and seniority==5)*(-0.6056)
                                                        +(labour_market_state==2 and seniority==1)*(0.7208)+(labour_market_state==2 and seniority==2)*(-0.7707)+(labour_market_state==3 and seniority==1)*(1.1118)
                                                        +(labour_market_state==3 and seniority==2)*(0.8855)+(labour_market_state==3 and seniority==3)*(0.7088)+(labour_market_state==3 and seniority==4)*(0.2270)),
                                            logit_score((-0.8726)+(IS_FORMATION1)*(-0.2067)+(age>=16 and age<20)*(-0.3478)+(age>=20 and age<25)*(0.1374)+(age>=25 and age<30)*(0.1462)
                                                        +(age>=50 and age<55)*(-0.1083)+(age>=55 and age<60)*(-0.5201)+(ISDIVORCED)*(-0.2273)+(ISWIDOW)*(0.0802)+(ISSINGLE)*(-0.1282)
                                                        +(partner.labour_market_state==1)*(-0.1738)+(partner.labour_market_state==2)*(-0.3421)+(partner.labour_market_state==3)*(-0.2173)+(partner.labour_market_state==4)*(0.4655)
                                                        +(partner.labour_market_state==5)*(-0.8006)+(little_children==0)*(0.3634)+(little_children==1)*(0.2786)+(labour_market_state==6)*(1.7583)+(labour_market_state==1 and sect_quartile==1)*(0.8357)
                                                        +(labour_market_state==1 and sect_quartile==2)*(0.4695)+(labour_market_state==2 and sect_quartile==1)*(2.0401)+(labour_market_state==2 and sect_quartile==2)*(0.7836)
                                                        +(labour_market_state==2 and sect_quartile==3)*(0.5553)+(labour_market_state!=3 and sect_quartile==1)*(0.4919)+(labour_market_state==3 and sect_quartile==2)*(0.2209)
                                                        +(labour_market_state!=4)*(-3.1407)+(labour_market_state==5)*(0.9620)+(labour_market_state==1 and seniority==5)*(-1.9216)+(labour_market_state==1 and seniority==4)*(-0.7793)
                                                        +(labour_market_state==2 and seniority==5)*(-1.6694)+(labour_market_state==2 and seniority==4)*(-0.8252)+(labour_market_state==3 and seniority==1)*(1.0232)
                                                        +(labour_market_state==3 and seniority==2)*(1.2405)+(labour_market_state==3 and seniority==3)*(1.1735)+(labour_market_state==3 and seniority==4)*(0.4767))),
                                            if(ISMALE and age>=65 and age<70,
                                            logit_score((-0.6694)+(v2_m_bis)*(-0.9874)+(partner.v2_m_bis)*(-1.9978)+(ISWIDOW)*(-0.7317)+(partner.labour_market_state==4)*(1.9827)+(partner.labour_market_state==5)*(-0.8780)
                                                        +(labour_market_state==1 and sect_quartile== 1)*(-2.4483)+(labour_market_state==1 and sect_quartile== 3)*(-2.2909)+(labour_market_state==1 and sect_quartile== 4)*(-2.7779)
                                                        +(labour_market_state==3 and sect_quartile== 2)*(0.8367)+(labour_market_state==3 and sect_quartile== 3)*(0.8323)+(labour_market_state!=4)*(-2.5780)),
                                        if(ISFEMALE and age>=60 and age<70,
                                            logit_score((3.7919)+(v2_m_bis)*(-1.6836)+(ISWIDOW)*(-0.0757)+(IS_FORMATION1)*(-0.5506)+(ISCOUPLE)*(0.6359)+(ISDIVORCED)*(0.4725)
                                                        +(partner.labour_market_state==1)*(-0.7378)+(partner.labour_market_state==2)*(-1.0931)+(partner.labour_market_state==3)*(-0.5580)+(partner.labour_market_state==5)*(-1.3246)
                                                        +(labour_market_state==1 and sect_quartile== 1)*(1.6808)+(labour_market_state==2 and sect_quartile== 1)*(3.1964)+(labour_market_state==3 and sect_quartile== 1)*(3.6010)
                                                        +(labour_market_state==3 and sect_quartile== 2)*(3.3370)+(labour_market_state==3 and sect_quartile== 3)*(3.5407)+(labour_market_state==3 and sect_quartile== 4)*(2.7871)
                                                        +(labour_market_state!=4)*(-5.5192)+(labour_market_state==5)*(2.8292))
                                    ,-10)))
    #3- Finally, we select enough people to fill the desired rate of people in a given labour-market state.         
                - wage_earner_align: if(ACTIVEAGE,
                                    if(ISMALE,
                                        align(wage_earner_score,'cal_sal_h_central_p_2015_t2.csv'),
                                        align(wage_earner_score, 'cal_sal_f_central_p_2015_t2.csv')
                                    ),
                                    if(age<70 and age>15, 
                                        if(ISMALE, 
                                            align(wage_earner_score,'cal_sal_h_central_p_2015_t2.csv'),
                                            align(wage_earner_score,'cal_sal_f_central_p_2015_t2.csv')),
                                  False))

                                  
                - independent_align: if(ACTIVEAGE,
                                    if(ISMALE,
                                        align(independent_score,'cal_ind_h_central_p_2015_t2.csv',leave=wage_earner_align),
                                        align(independent_score, 'cal_ind_f_central_p_2015_t2.csv',leave=wage_earner_align)
                                    ),
                                    if(age<70 and age>15, 
                                        if(ISMALE, 
                                            align(wage_earner_score,'cal_ind_h_central_p_2015_t2.csv',leave=wage_earner_align),
                                            align(wage_earner_score,'cal_ind_f_central_p_2015_t2.csv',leave=wage_earner_align)),
                                  False))   
                - unregistered_align: if(ACTIVEAGE,
                                    if(ISMALE,
                                        align(unregistered_score,'cal_aun_h_central_p_2015_t2.csv',leave=wage_earner_align or independent_align),
                                        align(unregistered_score, 'cal_aun_f_central_p_2015_t2.csv',leave=wage_earner_align or independent_align)
                                    ),
                                    if(age<70 and age>15, 
                                        if(ISMALE, 
                                            align(wage_earner_score,'cal_aun_h_central_p_2015_t2.csv',leave=wage_earner_align or independent_align),
                                            align(wage_earner_score,'cal_aun_f_central_p_2015_t2.csv',leave=wage_earner_align or independent_align)),
                                  False))  
                - unemployed_align: if(ACTIVEAGE,
                                    if(ISMALE,
                                        align(unemployed_score,'cal_cho_h_central_p_2015_t2.csv',leave=wage_earner_align or independent_align or unregistered_align),
                                        align(unemployed_score, 'cal_cho_f_central_p_2015_t2.csv',leave=wage_earner_align or independent_align or unregistered_align)
                                    ),
                                    if(age<70 and age>15, 
                                        if(ISMALE, 
                                            align(wage_earner_score,'cal_cho_h_central_p_2015_t2.csv',leave=wage_earner_align or independent_align or unregistered_align),
                                            align(wage_earner_score,'cal_cho_f_central_p_2015_t2.csv',leave=wage_earner_align or independent_align or unregistered_align)),
                                  False)) 
              
    #4- We then here modify the labour_market_state variable accordingly.                                
                       
                - labour_market_state: if(wage_earner_align,
                                WAGE_EARNER,
                                if(independent_align,
                                    INDEPENDENT,
                                    if(unregistered_align,
                                        INFORMAL,
                                        if(unemployed_align,
                                            UNEMPLOYED,
                                            INACTIVE
                                           )
                                       )
                                   )
                            )     
                                 
                       
            seniority: 
#Seniority is a significant dependent variable in our behavioural equations. We simply assume as long as a working individual is on a given labour-market state, 
        #his seniority increases (he does not change from one formal dependent position to the other). 
                - quarterly_seniority: if(IS_INACTIVE, 0,
                                        if(IS_UNEMPLOYED, 0, 
                                            if(IS_WAGE_EARNER, 
                                                if(lag(IS_WAGE_EARNER), quarterly_seniority + 1, 1),
                                            if(IS_INDEPENDENT, 
                                                if(lag(IS_INDEPENDENT), quarterly_seniority + 1, 1),
                                            if(IS_INFORMAL, 
                                                if(lag(IS_INFORMAL), quarterly_seniority + 1, 1),1)))))
    #We mimic here seniority as is coded in the EPHc, through variables PP05H and PP07A. We simply lump together seniority under a month with seniority of two or three months.
                - seniority: if(quarterly_seniority==0, 0, 
                                if(quarterly_seniority==1, 1, 
                                    if(quarterly_seniority==2, 2, 
                                        if(quarterly_seniority<5, 3, 
                                            if(quarterly_seniority < 21, 4, 5)))))                
            income: 
#Here we run our Mincer wage equations, separately by gender. We follow Duc et. al. (2013) in that the dependent variable is the logarithm of wage as a percentage of the 
        #period's mean wage (here the RIPTE). The male and female coefficients adjust the mean wage to account for differences in wages between men and women, so that 
        #we get a pseudo RIPTE for men and another one for women. 
    #1- We compute the Mincer wage equations proper. 
                - ln_wage_h:  if(age>=16 and age<70 and ISMALE,
                                        if(age<65,log_regr((age>=16 and age<20 and IS_WAGE_EARNER)*(-0.126654)+(age>=16 and age<20 and IS_SENIORITY_1)*(-0.168578)+(age>=16 and age<20 and IS_FORMATION1)*(-0.161712)+(age>=20 and age<25 and IS_WAGE_EARNER)*(0.109344)+(age>=20 and age<25 and IS_SENIORITY_1)*(-0.167581)+(age>=20 and age<25 and IS_FORMATION1)*(-0.281991)+
                                                   (age>=25 and age<30 and IS_WAGE_EARNER)*(0.044407)+(age>=25 and age<30 and IS_SENIORITY_1)*(-0.180376)+(age>=25 and age<30 and IS_FORMATION1)*(-0.138381)+(age>=30 and age<35 and IS_SENIORITY_1)*(-0.182374)+(age>=35 and age<40 and IS_SENIORITY_1)*(-0.163259)+(age>=40 and age<45 and IS_SENIORITY_1)*(-0.180361)+
                                                   (age>=45 and age<50 and IS_SENIORITY_1)*(-0.213007)+(age>=50 and age<55 and IS_SENIORITY_1)*(-0.258738)+(age>=55 and age<60 and IS_WAGE_EARNER)*(0.089788)+(age>=55 and age<60 and IS_SENIORITY_1)*(-0.389302)+
                                                   (age>=60 and age<65 and IS_WAGE_EARNER)*(0.130219)+(age>=60 and age<65 and IS_SENIORITY_1)*(-0.394332)+(age>=60 and age<65 and IS_FORMATION1)*(-0.055432)+(age>=16 and age<20 and IS_INDEPENDENT)*(-0.844932)+(age>=20 and age<25 and IS_INDEPENDENT)*(-0.415675)+(age>=20 and age<25 and IS_FORMATION2)*(-0.199074)+
                                                   (age>=25 and age<30 and IS_INDEPENDENT)*(-0.206360)+(age>=30 and age<35 and IS_INDEPENDENT)*(-0.173707)+(age>=30 and age<35 and IS_SENIORITY_2)*(-0.032239)+(age>=30 and age<35 and IS_FORMATION2)*(0.155929)+(age>=35 and age<40 and IS_INDEPENDENT)*(-0.129326)+(age>=35 and age<40 and IS_FORMATION2)*(0.184399)+
                                                   (age>=40 and age<45 and IS_INDEPENDENT)*(-0.109259)+(age>=40 and age<45 and IS_FORMATION2)*(0.179697)+(age>=45 and age<50 and IS_INDEPENDENT)*(-0.108747)+(age>=45 and age<50 and IS_FORMATION2)*(0.207686)+(age>=50 and age<55 and IS_INDEPENDENT)*(-0.101242)+(age>=50 and age<55 and IS_SENIORITY_2)*(-0.071182)+(age>=50 and age<55 and IS_FORMATION2)*(0.251852)+
                                                   (age>=55 and age<60 and IS_INDEPENDENT)*(-0.033025)+(age>=55 and age<60 and IS_SENIORITY_2)*(-0.173381)+(age>=55 and age<60 and IS_FORMATION2)*(0.245071)+(age>=60 and age<65 and IS_SENIORITY_2)*(-0.188314)+(age>=60 and age<65 and IS_FORMATION2)*(0.209156)+(age>=16 and age<20 and IS_INFORMAL)*(-0.946417)+(age>=16 and age<20 and IS_SENIORITY_3)*(-0.047345)+
                                                   (age>=20 and age<25 and IS_INFORMAL)*(-0.579628)+(age>=25 and age<30 and IS_INFORMAL)*(-0.579828)+(age>=25 and age<30 and IS_SENIORITY_3)*(-0.035519)+(age>=25 and age<30 and IS_FORMATION3)*(0.211937)+(age>=30 and age<35 and IS_INFORMAL)*(-0.643886)+(age>=30 and age<35 and IS_FORMATION3)*(0.408913)+
                                                   (age>=35 and age<40 and IS_INFORMAL)*(-0.649493)+(age>=35 and age<40 and IS_SENIORITY_3)*(-0.035350)+(age>=35 and age<40 and IS_FORMATION3)*(0.424216)+(age>=40 and age<45 and IS_INFORMAL)*(-0.662467)+(age>=40 and age<45 and IS_FORMATION3)*(0.408813)+(age>=45 and age<50 and IS_INFORMAL)*(-0.685832)+(age>=45 and age<50 and IS_FORMATION3)*(0.453261)+
                                                   (age>=50 and age<55 and IS_INFORMAL)*(-0.695146)+(age>=50 and age<55 and IS_FORMATION3)*(0.474120)+(age>=55 and age<60 and IS_INFORMAL)*(-0.622652)+(age>=55 and age<60 and IS_SENIORITY_3)*(-0.159195)+(age>=55 and age<60 and IS_FORMATION3)*(0.490203)+(age>=60 and age<65 and IS_INFORMAL)*(-0.618667)+(age>=60 and age<65 and IS_SENIORITY_3)*(-0.179770)+(age>=60 and age<65 and IS_FORMATION3)*(0.432575)+
                                                   (age>=20 and age<25 and IS_SENIORITY_4)*(0.038026)+(age>=20 and age<25 and IS_SENIORITY_5)*(0.081802)+(age>=25 and age<30 and IS_SENIORITY_5)*(0.062183)+(age>=30 and age<35 and IS_SENIORITY_5)*(0.078559)+
                                                   (age>=35 and age<40 and IS_SENIORITY_4)*(0.014419)+(age>=35 and age<40 and IS_SENIORITY_5)*(0.100792)+(age>=40 and age<45 and IS_SENIORITY_4)*(0.023705)+(age>=40 and age<45 and IS_SENIORITY_5)*(0.124403)+(age>=45 and age<50 and IS_SENIORITY_5)*(0.119048)+
                                                   (age>=50 and age<55 and IS_SENIORITY_5)*(0.092386)+(age>=55 and age<60 and IS_SENIORITY_4)*(-0.163715)+(age>=60 and age<65 and IS_SENIORITY_4)*(-0.180522)+ (-0.573563)
                                                    ,filter= ISMALE and (IS_WAGE_EARNER or IS_INDEPENDENT or IS_INFORMAL), error_var="resid")
                                        ,log_regr((age==65 and IS_FORMATION1)*(-0.467708)+(age==66 and IS_FORMATION1)*(-0.466919)+(age==67 and IS_FORMATION1)*(-0.272661)+(age==68 and IS_WAGE_EARNER)*(0.156276)+(age==68 and IS_FORMATION1)*(-0.510517)+
                                                  (age==69 and IS_FORMATION1)*(-0.278123)+(age==65 and IS_FORMATION2)*(-0.201644)+(age==66 and IS_INDEPENDENT)*(-0.109273)+(age==66 and IS_FORMATION2)*(-0.129785)+(age==67 and IS_INDEPENDENT)*(-0.215428)+
                                                  (age==68 and IS_FORMATION2)*(-0.221867)+(age==69 and IS_INDEPENDENT)*(-0.229613)+(age==65 and IS_INFORMAL)*(-0.794422)+(age==66 and IS_INFORMAL)*(-0.780616)+(age==67 and IS_INFORMAL)*(-0.819631)+(age==67 and IS_FORMATION3)*(0.215360)+
                                                  (age==68 and IS_INFORMAL)*(-0.737593)+(age==69 and IS_INFORMAL)*(-0.949358)+(age==69 and IS_FORMATION3)*(0.141709)+(age==65 and IS_SENIORITY_1)*(-0.216970)+(age==66 and IS_SENIORITY_1)*(-0.371975)+
                                                  (age==67 and IS_SENIORITY_1)*(-0.515953)+(age==67 and IS_SENIORITY_4)*(-0.211439)+(age==68 and IS_SENIORITY_1)*(-0.333434)+(age==68 and IS_SENIORITY_4)*(-0.286668)+
                                                  (age==69 and IS_SENIORITY_1)*(-0.389636)+(age==69 and IS_SENIORITY_4)*(-0.289621)+(age==65 and IS_SENIORITY_5)*(0.167858)+(age==66 and IS_SENIORITY_5)*(0.110255)+
                                                  (age==67 and IS_SENIORITY_3)*(-0.624811)+(-0.265896)
                                                   ,filter= ISMALE and (IS_WAGE_EARNER or IS_INDEPENDENT or IS_INFORMAL), error_var="resid")),1)
                - temp_1: (age==60 and IS_WAGE_EARNER)*(0.829753)+(age==63 and IS_FORMATION1)*(-0.088451)+(age==61 and IS_WAGE_EARNER)*(0.843986)+(age==65 and IS_FORMATION1)*(-0.178429)+(age==62 and IS_WAGE_EARNER)*(0.929473)+(age==66 and IS_FORMATION1)*(-0.208127)+
                                                         (age==63 and IS_WAGE_EARNER)*(0.977416)+(age==67 and IS_FORMATION1)*(-0.215103)+(age==64 and IS_WAGE_EARNER)*(1.014697)+(age==68 and IS_FORMATION1)*(-0.160144)+(age==65 and IS_WAGE_EARNER)*(1.109104)+(age==69 and IS_FORMATION1)*(-0.303823)+
                                                         (age==66 and IS_WAGE_EARNER)*(0.973606)+(age==60 and IS_FORMATION2)*(0.233786)+(age==67 and IS_WAGE_EARNER)*(1.063070)+(age==61 and IS_FORMATION2)*(0.289086)+(age==68 and IS_WAGE_EARNER)*(1.156335)+(age==62 and IS_FORMATION2)*(0.267575)+
                                                         (age==69 and IS_WAGE_EARNER)*(1.198301)+(age==63 and IS_FORMATION2)*(0.190516)+(age==60 and IS_INDEPENDENT)*(0.661561)+(age==64 and IS_FORMATION2)*(0.252750)+(age==61 and IS_INDEPENDENT)*(0.726169)+(age==64 and IS_SENIORITY_2)*(-0.647043)+
                                                         (age==62 and IS_INDEPENDENT)*(0.645584)+(age==66 and IS_SENIORITY_2)*(-0.602344)+(age==63 and IS_INDEPENDENT)*(0.815583)+(age==60 and IS_FORMATION3)*(0.549006)
                - temp_2:  (age==64 and IS_INDEPENDENT)*(0.571714)+(age==61 and IS_FORMATION3)*(0.617127)+(age==65 and IS_INDEPENDENT)*(0.656392)+(age==62 and IS_FORMATION3)*(0.513271)+(age==66 and IS_INDEPENDENT)*(0.372690)+(age==63 and IS_FORMATION3)*(0.450580)+
                                                         (age==67 and IS_INDEPENDENT)*(0.455823)+(age==64 and IS_FORMATION3)*(0.497386)+(age==68 and IS_INDEPENDENT)*(0.935691)+(age==65 and IS_FORMATION3)*(0.285721)+(age==69 and IS_INDEPENDENT)*(0.827900)+(age==66 and IS_FORMATION3)*(0.374314)+
                                                         (age==64 and IS_INFORMAL)*(-0.108634)+(age==67 and IS_FORMATION3)*(0.359348)+(age==69 and IS_FORMATION3)*(0.321255)+(age==60 and IS_SENIORITY_5)*(0.288840)+(age==61 and IS_SENIORITY_5)*(0.206643)+
                                                         (age==62 and IS_SENIORITY_5)*(0.184767)+(age==63 and IS_SENIORITY_5)*(0.227803)+(age==64 and IS_SENIORITY_5)*(0.209676)+(age==65 and IS_SENIORITY_5)*(0.283217)+
                                                         (age==66 and IS_SENIORITY_5)*(0.419863)+(age==67 and IS_SENIORITY_5)*(0.260992)+(age==68 and IS_SENIORITY_5)*(0.227251)+(age==69 and IS_SENIORITY_5)*(0.198191) + (-1.674574)                                                  
                - ln_wage_f:  if(age>=16 and age<70 and ISFEMALE,
                                        if(age<60,log_regr((age>=16 and age<20 and IS_SENIORITY_1)*(-0.221492)+(age>=16 and age<20 and IS_FORMATION1)*(-0.304412)+(age>=20 and age<25 and IS_SENIORITY_1)*(-0.222222)+(age>=20 and age<25 and IS_FORMATION1)*(-0.161505)+(age>=25 and age<30 and IS_SENIORITY_1)*(-0.236180)+(age>=25 and age<30 and IS_FORMATION1)*(-0.160451)+
                                                    (age>=30 and age<35 and IS_SENIORITY_1)*(-0.150093)+(age>=30 and age<35 and IS_FORMATION1)*(-0.141603)+(age>=35 and age<40 and IS_WAGE_EARNER)*(-0.124220)+(age>=35 and age<40 and IS_SENIORITY_1)*(-0.143710)+(age>=40 and age<45 and IS_FORMATION1)*(-0.213688)+
                                                    (age>=45 and age<50 and IS_FORMATION1)*(-0.209294)+(age>=50 and age<55 and IS_FORMATION1)*(-0.236829)+(age>=55 and age<60 and IS_FORMATION1)*(-0.252114)+
                                                    (age>=16 and age<20 and IS_INDEPENDENT)*(-0.932705)+(age>=16 and age<20 and IS_FORMATION2)*(-0.075132)+(age>=20 and age<25 and IS_INDEPENDENT)*(-0.771487)+(age>=25 and age<30 and IS_INDEPENDENT)*(-0.428583)+(age>=25 and age<30 and IS_FORMATION2)*(0.075287)+(age>=30 and age<35 and IS_INDEPENDENT)*(-0.322877)+(age>=30 and age<35 and IS_FORMATION2)*(0.068557)+
                                                    (age>=35 and age<40 and IS_INDEPENDENT)*(-0.380158)+(age>=35 and age<40 and IS_FORMATION2)*(0.213524)+(age>=40 and age<45 and IS_INDEPENDENT)*(-0.218999)+(age>=45 and age<50 and IS_INDEPENDENT)*(-0.203878)+(age>=50 and age<55 and IS_INDEPENDENT)*(-0.221661)+
                                                    (age>=55 and age<60 and IS_INDEPENDENT)*(-0.258311)+(age>=16 and age<20 and IS_INFORMAL)*(-0.901898)+(age>=20 and age<25 and IS_INFORMAL)*(-0.819959)+(age>=20 and age<25 and IS_FORMATION3)*(0.234139)+
                                                    (age>=25 and age<30 and IS_INFORMAL)*(-0.814619)+(age>=25 and age<30 and IS_FORMATION3)*(0.319621)+(age>=30 and age<35 and IS_INFORMAL)*(-0.875251)+(age>=30 and age<35 and IS_FORMATION3)*(0.331343)+(age>=35 and age<40 and IS_INFORMAL)*(-0.980143)+(age>=35 and age<40 and IS_FORMATION3)*(0.432240)+
                                                    (age>=40 and age<45 and IS_INFORMAL)*(-0.863674)+(age>=40 and age<45 and IS_SENIORITY_3)*(0.093892)+(age>=40 and age<45 and IS_FORMATION3)*(0.251058)+(age>=45 and age<50 and IS_INFORMAL)*(-0.861377)+(age>=45 and age<50 and IS_FORMATION3)*(0.263543)+(age>=50 and age<55 and IS_INFORMAL)*(-0.847784)+(age>=50 and age<55 and IS_FORMATION3)*(0.310517)+
                                                    (age>=55 and age<60 and IS_INFORMAL)*(-0.873707)+(age>=55 and age<60 and IS_FORMATION3)*(0.284004)+(age>=20 and age<25 and IS_SENIORITY_5)*(0.088847)+(age>=25 and age<30 and IS_SENIORITY_5)*(0.106136)+
                                                    (age>=30 and age<35 and IS_SENIORITY_4)*(0.061393)+(age>=30 and age<35 and IS_SENIORITY_5)*(0.172374)+(age>=35 and age<40 and IS_SENIORITY_4)*(0.061417)+(age>=35 and age<40 and IS_SENIORITY_5)*(0.185714)+(age>=40 and age<45 and IS_SENIORITY_4)*(0.135355)+(age>=40 and age<45 and IS_SENIORITY_5)*(0.251028)+
                                                    (age>=45 and age<50 and IS_SENIORITY_4)*(0.108731)+(age>=45 and age<50 and IS_SENIORITY_5)*(0.290634)+(age>=50 and age<55 and IS_SENIORITY_4)*(0.119227)+(age>=50 and age<55 and IS_SENIORITY_5)*(0.279669)+(age>=55 and age<60 and IS_SENIORITY_4)*(0.075539)+(age>=55 and age<60 and IS_SENIORITY_5)*(0.289013)+ (-0.569284)
                                                     ,filter= ISFEMALE and (IS_WAGE_EARNER or IS_INDEPENDENT or IS_INFORMAL), error_var="resid"),
                                                log_regr(temp_1+temp_2
                                                      ,filter= ISFEMALE  and  (IS_WAGE_EARNER or IS_INDEPENDENT or IS_INFORMAL), error_var="resid")),
                                1)
    #2- We get the net wage (variable discounted_itl). We simply deduce from it the gross wage by remembering employee's contributions equal 17% of the gross wage.
                - discounted_itl: if(ISMALE,
                            ln_wage_h * COEFFICIENT_H * GROSS_WAGE_CENTRAL_2014_T4 , 
                                ln_wage_f * COEFFICIENT_F * GROSS_WAGE_CENTRAL_2014_T4)
                - discounted_itl: if(IS_UNEMPLOYED or IS_INACTIVE, 0, discounted_itl)
                - discounted_itl_gross: discounted_itl/0.83
        #Only registered wage-earners matter when computing gross income. We still compute the "gross" income of independent and unregistered workers, 
                #even though it is not used anywhere in our model. 
                - discounted_itl_gross: if(IS_UNEMPLOYED or IS_INACTIVE, 0, discounted_itl_gross)
                - discounted_itl_sal_gross: if(labour_market_state!=1, 0, discounted_itl_gross)     
        #We also compute labour income as discounted by the ANSES, instead of the CPI. This is useful for computing rights to a pension.   
               #We do not need to compute them separately between the pre 2016 and post 2016 discounting rules, as since 2009 (and the implementation of pension 
               #mobility, these discounting indexes are strictly equal. 
                #Finally, we only take into account gross ANSES income, as it is this gross income that enters in the computation of retirement benefits. 
                - itl_anses: if(ISMALE,
                                ln_wage_h * COEFFICIENT_H * ANSES_GROSS_WAGE_2014_T4 /0.83, 
                                    ln_wage_f * COEFFICIENT_F * ANSES_GROSS_WAGE_2014_T4/0.83)     
                - itl_anses: if(IS_UNEMPLOYED or IS_INACTIVE, 0, itl_anses)
    #3- We compute labour-market state specific labour income quartiles, which are another explanatory variable in our behavioural equations. 
            #For instance, if a registered wage-earner has a sect_quartile==1 then this means he is among the poorest 25% of registered wage-earners. 
                - sect_quartile: if(discounted_itl==0, 0, 
                                    if(IS_WAGE_EARNER,
                                        if(discounted_itl<=percentile(discounted_itl,25,filter=IS_WAGE_EARNER),1,
                                        if(discounted_itl<=percentile(discounted_itl,50,filter=IS_WAGE_EARNER),2,
                                        if(discounted_itl<=percentile(discounted_itl,75,filter=IS_WAGE_EARNER),3,4))), 
                                    if(IS_INDEPENDENT,                                       
                                        if(discounted_itl<=percentile(discounted_itl,25,filter=IS_INDEPENDENT),1,
                                        if(discounted_itl<=percentile(discounted_itl,50,filter=IS_INDEPENDENT),2,
                                        if(discounted_itl<=percentile(discounted_itl,75,filter=IS_INDEPENDENT),3,4))),
                                    if(IS_INFORMAL,                                       
                                        if(discounted_itl<=percentile(discounted_itl,25,filter=IS_INFORMAL),1,
                                        if(discounted_itl<=percentile(discounted_itl,50,filter=IS_INFORMAL),2,
                                        if(discounted_itl<=percentile(discounted_itl,75,filter=IS_INFORMAL),3,4))),sect_quartile))))  
    #4- We compute the thirteenth month ("aguinaldo"). It is paid in two halves: one at the end of June, the other at the end of December (Law 27073). It equals 50% 
            #of the highest nominal wage earned each semester. We thus simply assume it is equal to the wage earned during the last quarter of the semester (so respectively
            # second and fourth quarters), because of inflation. If we compute the mean monthly revenue coming from the thirteenth month, we need to divide the thirteenth month first by 2, 
            # (because it is half an "aguinaldo", or "medio aguinaldo"), then by 3.                                  
                - modulo_period: (period) %4
        #We remind the reader modulo_period==1-> first quarter; ==2 second quarter; ==3 third quarter; ==0 fourth quarter. 
                - medio_aguinaldo: if(labour_market_state!=1, 0, 
                                      if(modulo_period==1 or modulo_period==3,0, 
                                         discounted_itl/6))
                - medio_aguinaldo_gross: if(labour_market_state!=1, 0, 
                                      if(modulo_period==1 or modulo_period==3,0, 
                                         discounted_itl_gross/6))
    #5- Finally, we export the simulated evolution of the mean (net) wage of all workers. This is important for computing future growth, 
            #as our real wage hypotheses concern formal wage-earners. By taking the mean wage evolution as a determinant of growth, 
            #we also factor in the impact of workers' productivity when they work in the formal or informal sector. 
                - csv('Period', 'Mean real labour income', 'Total workers',
                                    fname='workers_and_wage_central.csv',mode='a')
                - csv(period,sum(discounted_itl*pondera)/sum(pondera,filter=labour_market_state!=4 and labour_market_state!=5),
                        sum(pondera,filter=labour_market_state!=4 and labour_market_state!=5),
                            fname='workers_and_wage_central.csv',mode='a')   
            contributions:    
# In this section, we simulate the contributions made by formal workers. Formal workers are either formal wage-earners, independent workers of the formal sector (that include 
        #all people in the Autonomous workers regime, as will be shown further down) or people in the simplified small tax-payers regime ("Monotributistas"), which are either 
        #independent workers in the formal sector or classified as informal workers. 
    #1- We first assign independent workers of the formal sector and some informal workers to the Autonomous workers and Monotributo regimes. 
        #The logic is: people in the Autonomous workers regime are always taken from the independent workers in the formal sector labour-market state. 
                # Those with the highest income go to the Autonomous workers regime, until we reach the desired percentage of Autonomous workers by age and 
                #gender as determined in alignment tables cal_auton_h_p.csv and cal_auton_f_p.csv. The remaining independent workers of the formal sector, 
                #plus the wealthiest informal workers, are considered part of the Monotributo regime, until we match the desired rates of "monotributistas" by age
                #and gender as listed in alignment tables cal_mono_h_p.csv and cal_mono_f.csv. 
                - score_autonomos: if(labour_market_state!=2, -10, 
                                        discounted_itl + uniform())
                - not_indep_reg: if(labour_market_state!=2, True, False)
                - autonomos_align: if(age>15 and age<70,
                                    if(ISMALE,
                                        align(score_autonomos,'cal_auton_h_p.csv', leave=not_indep_reg or labour_market_state==1),
                                        align(score_autonomos,'cal_auton_f_p.csv', leave=not_indep_reg or labour_market_state==1)
                                    ),
                                  False)
                - score_monotributo: if(labour_market_state==2 and autonomos_align==False, 10000000 + uniform() + discounted_itl, 
                                        if(autonomos_align==True, -1000, 
                                            if(labour_market_state==3, discounted_itl + uniform(), 
                                                -100)))
                                            
                - monotributo_align: if(age>15 and age<70,
                                    if(ISMALE,
                                        align(score_monotributo,'cal_mono_h_p.csv',leave=autonomos_align or labour_market_state==1),
                                        align(score_monotributo, 'cal_mono_f_p.csv',leave=autonomos_align or labour_market_state==1)
                                    ),
                                  False)   
                - autonomo: if(autonomos_align, 1, 0)
                - monotributo: if(monotributo_align, 1, 0)
        # We accordingly increase by a quarter their career as an independent worker of the Autonomous workers regime (car_ind) or as a monotributista (car_mono_norref). 
                - car_ind: if(autonomo==0, car_ind, car_ind+1)
                - car_mono_norref: if(monotributo==0, car_mono_norref, car_mono_norref+1)
    #2- We then determine each "Monotributista"'s category. For Monotributistas, we only look at Monotributo categories' income limits. 
        #How we compute these limits is explained in my PhD. thesis, Appendix F. 
                - monotributo_cat: if(monotributo==0, 0, 
                                        if(discounted_itl<=LIM_MON_ACTU_CENTRAL_CAT_A, 1, 
                                            if(discounted_itl<=LIM_MON_ACTU_CENTRAL_CAT_B, 2, 
                                                if(discounted_itl<=LIM_MON_ACTU_CENTRAL_CAT_C, 3, 
                                                    if(discounted_itl<=LIM_MON_ACTU_CENTRAL_CAT_D, 4, 
                                                        if(discounted_itl<=LIM_MON_ACTU_CENTRAL_CAT_E, 5, 
                                                            if(discounted_itl<=LIM_MON_ACTU_CENTRAL_CAT_F, 6, 
                                                                if(discounted_itl<=LIM_MON_ACTU_CENTRAL_CAT_G, 7, 
                                                                    if(discounted_itl<=LIM_MON_ACTU_CENTRAL_CAT_H, 8, 9)))))))))
        #People with labour income that is too high to be a monotributista are recategorised as Autonomous workers. 
                - autonomo: if(monotributo_cat==9, 1, autonomo)
                - monotributo: if(monotributo_cat==9, 0, monotributo)
        # We know the amount of payments each Monotributo category must make. For each member of a given category, we assign them the corresponding social security 
                #contribution to the SIPA (variable contribution_mono_SIPA) and to workers' compulsory healthcare or "obra social" (variable contribution_mono_obra_social). 
                - contribution_mono_SIPA: if(monotributo_cat==0, 0, 
                                        if(monotributo_cat==1, SIPA_MON_ACTU_CENTRAL_A, 
                                            if(monotributo_cat==2, SIPA_MON_ACTU_CENTRAL_B, 
                                                if(monotributo_cat==3, SIPA_MON_ACTU_CENTRAL_C, 
                                                    if(monotributo_cat==4, SIPA_MON_ACTU_CENTRAL_D, 
                                                        if(monotributo_cat==5, SIPA_MON_ACTU_CENTRAL_E, 
                                                            if(monotributo_cat==6, SIPA_MON_ACTU_CENTRAL_F, 
                                                                if(monotributo_cat==7, SIPA_MON_ACTU_CENTRAL_G, 
                                                                    if(monotributo_cat==8, SIPA_MON_ACTU_CENTRAL_H,0)))))))))

                - contribution_mono_obra_social: if(monotributo_cat==0, 0, 
                                        if(monotributo_cat==1, OBRA_MON_ACTU_CENTRAL_A, 
                                            if(monotributo_cat==2, OBRA_MON_ACTU_CENTRAL_B, 
                                                if(monotributo_cat==3, OBRA_MON_ACTU_CENTRAL_C, 
                                                    if(monotributo_cat==4, OBRA_MON_ACTU_CENTRAL_D, 
                                                        if(monotributo_cat==5, OBRA_MON_ACTU_CENTRAL_E, 
                                                            if(monotributo_cat==6, OBRA_MON_ACTU_CENTRAL_F, 
                                                                if(monotributo_cat==7, OBRA_MON_ACTU_CENTRAL_G, 
                                                                    if(monotributo_cat==8, OBRA_MON_ACTU_CENTRAL_H,0)))))))))
            # We also make them pay the category's integrated tax. 70% of this tax goes to the ANSES.                                                             
                - mono_integrated_tax: if(monotributo_cat==0, 0, 
                                        if(monotributo_cat==1, INT_TAX_MON_ACTU_CENTRAL_A, 
                                            if(monotributo_cat==2, INT_TAX_MON_ACTU_CENTRAL_B, 
                                                if(monotributo_cat==3, INT_TAX_MON_ACTU_CENTRAL_C, 
                                                    if(monotributo_cat==4, INT_TAX_MON_ACTU_CENTRAL_D, 
                                                        if(monotributo_cat==5, INT_TAX_MON_ACTU_CENTRAL_E, 
                                                            if(monotributo_cat==6, INT_TAX_MON_ACTU_CENTRAL_F, 
                                                                if(monotributo_cat==7, INT_TAX_MON_ACTU_CENTRAL_G, 
                                                                    if(monotributo_cat==8, INT_TAX_MON_ACTU_CENTRAL_H,0)))))))))
                
    #3- We split Autonomous workers between own-account workers and those who employ people (that we tag under variable "boss"). From there, it becomes possible to assign them 
            #an Autonomous worker category. 
        #We determine whether an independent worker from the formal sector is a boss or not when they enter that labour-market state. They keep their boss status for 
                #as long as they are independent workers of the formal sector. They have a 50% chance of being a boss when they do, because 50% of independent workers of the formal
                #sector are bosses in the EPHc(variable cat_ocup of the EPHc set at 1, "patrón"), the remaining 50% being own-account workers (cat_ocup set at 2, "Cuenta propia")
                - boss: if(autonomo==0, 0, 
                            if(lag(boss)==1, 1, 
                                if(lag(boss)==0 and lag_count_ind_1==1, 0, 
                                    if(lag(boss)==0 and lag_count_ind_1==0,choice([0, 1], [0.5, 0.5]),0)))) 
        # Then, we assign people of the Autonomous workers regime to categories I to V. In practice, the vast majority of own-account workers are in category II, the 
                #bosses being in category V. This is because the income limits to be in lower categories (I for own-account workers, III and IV for bosses) are extremely
                #low, since they have never been adjusted for inflation. Starting from 2018, we simply assume all bosses are in Category V and all 
                #own-account workers of the autonomous workers regime are in Category II. This lets us skip the estimation of the real values of income limits for Categories
                #I, III and IV, which would have required we simulate future inflation rates. This is why RENT_AUT_ACTU_I, RENT_AUT_ACTU_III and RENT_AUT_ACTU_IV are all equal to 
                #0 starting from year 2018. 
        #For each category, Autonomous workers are assigned a reference income, which enters in the computation of their retirement rights. 
                - rent_aut: if(autonomo==0, 0,
                                if(boss==0, 
                                    if(discounted_itl<=LIM_AUT_ACTU_I, RENT_AUT_ACTU_I, RENT_AUT_ACTU_II),
                                        if(discounted_itl<=LIM_AUT_ACTU_III, RENT_AUT_ACTU_III,
                                            if(discounted_itl<=LIM_AUT_ACTU_IV, RENT_AUT_ACTU_IV, RENT_AUT_ACTU_V))))                            
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
                #- rent_aut_2: rent_aut
        #Finally, we compute their compulsory contributions to the SIPA (so to the retirement system) and to the PAMI (elderly healthcare). 
                - contribution_aut_SIPA: if(autonomo==0, 0,
                                     if(rent_aut==RENT_AUT_ACTU_I, COT_AUT_ACTU_CENTRAL_I*0.27/0.32, 
                                        if(rent_aut==RENT_AUT_ACTU_II, COT_AUT_ACTU_CENTRAL_II*0.27/0.32, 
                                            if(rent_aut==RENT_AUT_ACTU_III, COT_AUT_ACTU_CENTRAL_III*0.27/0.32, 
                                                if(rent_aut==RENT_AUT_ACTU_IV, COT_AUT_ACTU_CENTRAL_IV*0.27/0.32, COT_AUT_ACTU_CENTRAL_V*0.27/0.32)))))
                                    
                                
                
                - contribution_aut_PAMI: if(autonomo==0, 0,
                                     if(rent_aut==RENT_AUT_ACTU_I, COT_AUT_ACTU_CENTRAL_I*0.05/0.32, 
                                        if(rent_aut==RENT_AUT_ACTU_II, COT_AUT_ACTU_CENTRAL_II*0.05/0.32, 
                                            if(rent_aut==RENT_AUT_ACTU_III, COT_AUT_ACTU_CENTRAL_III*0.05/0.32, 
                                                if(rent_aut==RENT_AUT_ACTU_IV*0.05/0.32, COT_AUT_ACTU_CENTRAL_IV, COT_AUT_ACTU_CENTRAL_V*0.05/0.32)))))
    #4- We update accordingly our variables tracking recent formal independent workers' careers.             
                - lag_mono_40: lag_mono_39
                - lag_mono_39: lag_mono_38
                - lag_mono_38: lag_mono_37
                - lag_mono_37: lag_mono_36
                - lag_mono_36: lag_mono_35
                - lag_mono_35: lag_mono_34
                - lag_mono_34: lag_mono_33
                - lag_mono_33: lag_mono_32
                - lag_mono_32: lag_mono_31
                - lag_mono_31: lag_mono_30
                - lag_mono_30: lag_mono_29
                - lag_mono_29: lag_mono_28
                - lag_mono_28: lag_mono_27
                - lag_mono_27: lag_mono_26
                - lag_mono_26: lag_mono_25
                - lag_mono_25: lag_mono_24
                - lag_mono_24: lag_mono_23
                - lag_mono_23: lag_mono_22
                - lag_mono_22: lag_mono_21
                - lag_mono_21: lag_mono_20
                - lag_mono_20: lag_mono_19
                - lag_mono_19: lag_mono_18
                - lag_mono_18: lag_mono_17
                - lag_mono_17: lag_mono_16
                - lag_mono_16: lag_mono_15
                - lag_mono_15: lag_mono_14
                - lag_mono_14: lag_mono_13
                - lag_mono_13: lag_mono_12
                - lag_mono_12: lag_mono_11
                - lag_mono_11: lag_mono_10
                - lag_mono_10: lag_mono_9
                - lag_mono_9: lag_mono_8
                - lag_mono_8: lag_mono_7
                - lag_mono_7: lag_mono_6
                - lag_mono_6: lag_mono_5
                - lag_mono_5: lag_mono_4
                - lag_mono_4: lag_mono_3
                - lag_mono_3: lag_mono_2
                - lag_mono_2: lag_mono_1
                - lag_mono_1: monotributo
                
                - lag_count_ind_40: lag_count_ind_39
                - lag_count_ind_39: lag_count_ind_38
                - lag_count_ind_38: lag_count_ind_37
                - lag_count_ind_37: lag_count_ind_36
                - lag_count_ind_36: lag_count_ind_35
                - lag_count_ind_35: lag_count_ind_34
                - lag_count_ind_34: lag_count_ind_33
                - lag_count_ind_33: lag_count_ind_32
                - lag_count_ind_32: lag_count_ind_31
                - lag_count_ind_31: lag_count_ind_30
                - lag_count_ind_30: lag_count_ind_29
                - lag_count_ind_29: lag_count_ind_28
                - lag_count_ind_28: lag_count_ind_27
                - lag_count_ind_27: lag_count_ind_26
                - lag_count_ind_26: lag_count_ind_25
                - lag_count_ind_25: lag_count_ind_24
                - lag_count_ind_24: lag_count_ind_23
                - lag_count_ind_23: lag_count_ind_22
                - lag_count_ind_22: lag_count_ind_21
                - lag_count_ind_21: lag_count_ind_20
                - lag_count_ind_20: lag_count_ind_19
                - lag_count_ind_19: lag_count_ind_18
                - lag_count_ind_18: lag_count_ind_17
                - lag_count_ind_17: lag_count_ind_16
                - lag_count_ind_16: lag_count_ind_15
                - lag_count_ind_15: lag_count_ind_14
                - lag_count_ind_14: lag_count_ind_13
                - lag_count_ind_13: lag_count_ind_12
                - lag_count_ind_12: lag_count_ind_11
                - lag_count_ind_11: lag_count_ind_10
                - lag_count_ind_10: lag_count_ind_9
                - lag_count_ind_9: lag_count_ind_8
                - lag_count_ind_8: lag_count_ind_7
                - lag_count_ind_7: lag_count_ind_6
                - lag_count_ind_6: lag_count_ind_5
                - lag_count_ind_5: lag_count_ind_4
                - lag_count_ind_4: lag_count_ind_3
                - lag_count_ind_3: lag_count_ind_2
                - lag_count_ind_2: lag_count_ind_1
                - lag_count_ind_1: autonomo
                
                - lag_ind_40: lag_ind_39
                - lag_ind_39: lag_ind_38
                - lag_ind_38: lag_ind_37
                - lag_ind_37: lag_ind_36
                - lag_ind_36: lag_ind_35
                - lag_ind_35: lag_ind_34
                - lag_ind_34: lag_ind_33
                - lag_ind_33: lag_ind_32
                - lag_ind_32: lag_ind_31
                - lag_ind_31: lag_ind_30
                - lag_ind_30: lag_ind_29
                - lag_ind_29: lag_ind_28
                - lag_ind_28: lag_ind_27
                - lag_ind_27: lag_ind_26
                - lag_ind_26: lag_ind_25
                - lag_ind_25: lag_ind_24
                - lag_ind_24: lag_ind_23
                - lag_ind_23: lag_ind_22
                - lag_ind_22: lag_ind_21
                - lag_ind_21: lag_ind_20
                - lag_ind_20: lag_ind_19
                - lag_ind_19: lag_ind_18
                - lag_ind_18: lag_ind_17
                - lag_ind_17: lag_ind_16
                - lag_ind_16: lag_ind_15
                - lag_ind_15: lag_ind_14
                - lag_ind_14: lag_ind_13
                - lag_ind_13: lag_ind_12
                - lag_ind_12: lag_ind_11
                - lag_ind_11: lag_ind_10
                - lag_ind_10: lag_ind_9
                - lag_ind_9: lag_ind_8
                - lag_ind_8: lag_ind_7
                - lag_ind_7: lag_ind_6
                - lag_ind_6: lag_ind_5
                - lag_ind_5: lag_ind_4
                - lag_ind_4: lag_ind_3
                - lag_ind_3: lag_ind_2
                - lag_ind_2: lag_ind_1
                - lag_ind_1: rent_aut
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
#                - lag_ind_2_40: lag_ind_2_39
 #               - lag_ind_2_39: lag_ind_2_38
  #              - lag_ind_2_38: lag_ind_2_37
   #             - lag_ind_2_37: lag_ind_2_36
    #            - lag_ind_2_36: lag_ind_2_35
     #           - lag_ind_2_35: lag_ind_2_34
      #          - lag_ind_2_34: lag_ind_2_33
       #         - lag_ind_2_33: lag_ind_2_32
        #        - lag_ind_2_32: lag_ind_2_31
         #       - lag_ind_2_31: lag_ind_2_30
          #      - lag_ind_2_30: lag_ind_2_29
           #     - lag_ind_2_29: lag_ind_2_28
            #    - lag_ind_2_28: lag_ind_2_27
             #   - lag_ind_2_27: lag_ind_2_26
              #  - lag_ind_2_26: lag_ind_2_25
               # - lag_ind_2_25: lag_ind_2_24
                #- lag_ind_2_24: lag_ind_2_23
#                - lag_ind_2_23: lag_ind_2_22
 #               - lag_ind_2_22: lag_ind_2_21
  #              - lag_ind_2_21: lag_ind_2_20
   #             - lag_ind_2_20: lag_ind_2_19
    #            - lag_ind_2_19: lag_ind_2_18
     #           - lag_ind_2_18: lag_ind_2_17
      #          - lag_ind_2_17: lag_ind_2_16
       #         - lag_ind_2_16: lag_ind_2_15
        #        - lag_ind_2_15: lag_ind_2_14
         #       - lag_ind_2_14: lag_ind_2_13
          #      - lag_ind_2_13: lag_ind_2_12
           #     - lag_ind_2_12: lag_ind_2_11
            #    - lag_ind_2_11: lag_ind_2_10
             #   - lag_ind_2_10: lag_ind_2_9
              #  - lag_ind_2_9: lag_ind_2_8
               # - lag_ind_2_8: lag_ind_2_7
                #- lag_ind_2_7: lag_ind_2_6
#                - lag_ind_2_6: lag_ind_2_5
 #               - lag_ind_2_5: lag_ind_2_4
  #              - lag_ind_2_4: lag_ind_2_3
   #             - lag_ind_2_3: lag_ind_2_2
    #            - lag_ind_2_2: lag_ind_2_1
     #           - lag_ind_2_1: rent_aut_2
        #We finally update the rent of reference derived from work in the Autonomous workers regime. Spells in the Monotributo regime do not accrue the reference
                #income from which is computed retirement pensions since the year 2000.                 
                - sum_rent_aut: sum_rent_aut + rent_aut
       #         - sum_rent_aut_2: sum_rent_aut_2 + rent_aut_2
    #5- We simulate here formal wage-earners compulsory contributions to social security, both employer's and employees'. See section 1.1.4. of my PhD. thesis for the full contribution rules. 
        #Employer's contributions depend on the firm's economic sector (primary and secondary, services and public). Unfortunately, we do not really simulate economic sectors
                #in this model. The determination of formal wage-earners' economic sector is thus largely random, although these are based on real aggregate distribution of 
                #manpower across economic sectors. 
        #Legislation on employer's contributions: 
                #-By Decree 814/2001, some workers (service sectors) are subject to higher employer's contributions. Workers in the public, primary and secondary sectors
                # see their employers subject to lower employer's contributions. 
                #-Law 27430 Art.165 issued on December 2017 however institutes a gradual unification of private sector employers' contributions to 19.5%. It however leaves untouched at lower
                #levels (17%) the contributions of public sector employers. 
        #We assume formal wage-earners stay in their economic sector for as long as they don't change of labour-market state. We also assume new 
                #formal wage-earners have a 50% chance of being private sector services workers, 18.5% of being national civil servants and 31.5% 
                #of being private sector primary or secondary workers. 
                #National civil servants as a percentage of formal wage-earners come from AFIP data. 
                #Activity sector information comes from EPHc variables pp04b_cod, pp04d_cod, pp04b_caes, pp04d_caes, and pp04a (public vs private sector) for the 2003-2015 period. 
                #Errors in the pp04d_cod variable with the new version of the EPHc (2016-2017) bar us from identifying workers' economic sector.            
                - contribution: if(labour_market_state!=1, 3, 
                            if(lag(labour_market_state)==1, contribution, choice([1, 2, 4], [0.5, 0.315, 0.185]))) 
        #The reglamentation of Art. 166 of Law 27430 that determines the new repartition of employers' contributions between the PAMI and the ANSES 
                #has not been issued at the moment. We thus assume the percentage that goes to the PAMI does not change. It does equal 1.62% of the gross wage 
                #for workers of the service sector and 1.5% for national civil servants and workers of the primary and secondary sectors. 
        
        #Furtermore, Art. 167 of Law 27430 gives precisions on how gross income under 12000 constant October 2017 pesos does not pay employer's contributions: 
                #1- This deduction shall never lead to a taxable income (for the computation of employer's contributions) that would be lower than the minimum retirement 
                # benefit (following Art. 9 of Law 24241). 
                #2- The "medio aguinaldo" (half of the thirteenth month paid on June and on December) will not pay employer's contributions for earning below 6000 constant 
                # October 2017 pesos. Since our variable medio_aguinaldo is divided by 3 to consider it as an average monthly income derived from the thirteenth month, 
                # the 12000 pesos of non-taxable income, when applied to the "medio aguinaldo", is divided by 6.  
                #3- Although unclear, limitation number 1 will be applied only after factoring in the thirteenth month.            
                - taxable_income: if(labour_market_state!=1, 0, 
                                    if((discounted_itl_gross-NON_TAXABLE_INCOME_2014_T4 + medio_aguinaldo-NON_TAXABLE_INCOME_2014_T4/6)<= MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4
                                        ,discounted_itl_gross-NON_TAXABLE_INCOME_2014_T4 + medio_aguinaldo-NON_TAXABLE_INCOME_2014_T4/6))
            #We have a weird bug that automatically transforms global variables of the type 0.195 into 195, although it does not affect values such as 0.18. 
                    #We thus wrote values of the CONT_PAT global variable in thousands and then divide it by 1000 in our code.                            
                - contribution_sal_SIPA: if(labour_market_state!=1, 0, 
                                     if(contribution==1, taxable_income*(CONT_PAT_1/1000-0.0162)+(discounted_itl_gross+medio_aguinaldo_gross)*0.11,
                                        if(contribution==2, taxable_income*(CONT_PAT_2/1000-0.015) +(discounted_itl_gross+medio_aguinaldo_gross)*0.11, 
                                            taxable_income*(CONT_PAT_4/1000-0.015) +(discounted_itl_gross+medio_aguinaldo_gross)*0.11)))
                - contribution_sal_PAMI: if(labour_market_state!=1, 0, 
                                    if(contribution==1, taxable_income*(0.0162)+(discounted_itl_gross+medio_aguinaldo_gross)*0.03,
                                        if(contribution==2, taxable_income*(0.015)+(discounted_itl_gross+medio_aguinaldo_gross)*0.03, 
                                            taxable_income*(0.015)+(discounted_itl_gross+medio_aguinaldo_gross)*0.03)))
                                            
               
                # On inclut dans les contributions de santé ce qui va aux obras sociales (90% du total) et au Fonds Solidaire de Redistribution (10% du total). Il peut être intéressant de les étudier séparément, 
                #notamment suivant les ballons d'essai concernant l'élimintation des contributions au FSR. Nous décidons ici de ne pas les distinguer. 
                #We add up in healthcare contributions (contribution_sal_obra_social) what goes to the "obras sociales" (90% of the total) with what foes to the Solidarity Redistribution
                        #Fund ("Fondo Solidario de Redistribución"). It is possible to separate these contributions at this step, but we choose not to since we focus on the ANSES. 
                - contribution_sal_obra_social: if(labour_market_state!=1, 0, 
                                                if(contribution==1, taxable_income*(0.06)+(discounted_itl_gross+medio_aguinaldo_gross)*0.03,
                                                    if(contribution==2, taxable_income*(0.06)+(discounted_itl_gross+medio_aguinaldo_gross)*0.03, 
                                                        taxable_income*(0.06)+(discounted_itl_gross+medio_aguinaldo_gross)*0.03))) 
                - contribution_sal_tot: contribution_sal_SIPA+contribution_sal_PAMI+contribution_sal_obra_social
                
                
    #6- We export total SIPA social security contributions + monotributo integrated tax to a separate csv file. It helps with debugging and 
            #estimating ANSES's aggregate economic result. 
                - SIPA_income: mono_integrated_tax*0.7 + contribution_sal_SIPA+contribution_aut_SIPA+contribution_mono_SIPA
                - csv('Period', 'Total SIPA income', 
                                    'Total wage-earners SIPA contributions', 'Total taxable income','Total gross wages', 'Total SAC',
                                        'Total autonomous workers SIPA contributions','Total monotributo SIPA contributions', 'Monotributo integrated tax', 
                                                fname='debug_central_SIPA_income.csv',mode='a')
                - csv(period,sum(SIPA_income*pondera)/1000,
                       sum(contribution_sal_SIPA*pondera)/1000,sum(taxable_income*pondera)/1000,sum(discounted_itl_sal_gross*pondera)/1000,sum(medio_aguinaldo_gross*pondera)/1000,
                        sum(contribution_aut_SIPA*pondera)/1000, sum(contribution_mono_SIPA*pondera)/1000,sum(mono_integrated_tax*pondera)/1000,
                                fname='debug_central_SIPA_income.csv',mode='a')
            retirement:
#Here we compute accumulated retirement rights, new retirement pensions and put up to date old retirement pensions (through pension mobility. We also increase moratorium 
        #pensions after the five-year penalty period has passed). 
    #1- We first actualise the formal wage-earner careers of individuals in our database.     
                - car_sal: if(labour_market_state==1,car_sal+1,car_sal)
        #It is worthy to note the discounting index used by ANSES before 2016 (used in variable lag_sal) and the new post 2016 discounting index (lag_sal_2) are identical
                #since the implementation of the pension mobility law in March 2009. Therefore, the difference between these two ways to compute retirement pensions will 
                #quickly fade over time for new retirement benefits. This is also why we do not distinguish them neither in our "globals" file nor in the new 
                #formal wage-earner labour-market spells. 
                - itl_anses_sal: if(labour_market_state==1,itl_anses,0)
                - lag_sal_40: lag_sal_39
                - lag_sal_39: lag_sal_38
                - lag_sal_38: lag_sal_37
                - lag_sal_37: lag_sal_36
                - lag_sal_36: lag_sal_35
                - lag_sal_35: lag_sal_34
                - lag_sal_34: lag_sal_33
                - lag_sal_33: lag_sal_32
                - lag_sal_32: lag_sal_31
                - lag_sal_31: lag_sal_30
                - lag_sal_30: lag_sal_29
                - lag_sal_29: lag_sal_28
                - lag_sal_28: lag_sal_27
                - lag_sal_27: lag_sal_26
                - lag_sal_26: lag_sal_25
                - lag_sal_25: lag_sal_24
                - lag_sal_24: lag_sal_23
                - lag_sal_23: lag_sal_22
                - lag_sal_22: lag_sal_21
                - lag_sal_21: lag_sal_20
                - lag_sal_20: lag_sal_19
                - lag_sal_19: lag_sal_18
                - lag_sal_18: lag_sal_17
                - lag_sal_17: lag_sal_16
                - lag_sal_16: lag_sal_15
                - lag_sal_15: lag_sal_14
                - lag_sal_14: lag_sal_13
                - lag_sal_13: lag_sal_12
                - lag_sal_12: lag_sal_11
                - lag_sal_11: lag_sal_10
                - lag_sal_10: lag_sal_9
                - lag_sal_9: lag_sal_8
                - lag_sal_8: lag_sal_7
                - lag_sal_7: lag_sal_6
                - lag_sal_6: lag_sal_5
                - lag_sal_5: lag_sal_4
                - lag_sal_4: lag_sal_3
                - lag_sal_3: lag_sal_2
                - lag_sal_2: lag_sal_1
                - lag_sal_1: itl_anses_sal
                - temp_1: lag_sal_1+lag_sal_2+lag_sal_3+lag_sal_4+lag_sal_5+lag_sal_6+lag_sal_7+lag_sal_8+lag_sal_9+lag_sal_10
                - temp_2: lag_sal_11+lag_sal_12+lag_sal_13+lag_sal_14+lag_sal_15+lag_sal_16+lag_sal_17+lag_sal_18+lag_sal_19+lag_sal_20
                - temp_3: lag_sal_21+lag_sal_22+lag_sal_23+lag_sal_24+lag_sal_25+lag_sal_26+lag_sal_27+lag_sal_28+lag_sal_29+lag_sal_30
                - temp_4: lag_sal_31+lag_sal_32+lag_sal_33+lag_sal_34+lag_sal_35+lag_sal_36+lag_sal_37+lag_sal_38+lag_sal_39+lag_sal_40
                - sum_lag_sal: temp_1+temp_2+temp_3+temp_4

                ###########################################
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
#                - lag_sal_2_40: lag_sal_2_39
 #               - lag_sal_2_39: lag_sal_2_38
  #              - lag_sal_2_38: lag_sal_2_37
   #             - lag_sal_2_37: lag_sal_2_36
    #            - lag_sal_2_36: lag_sal_2_35
     #           - lag_sal_2_35: lag_sal_2_34
      #          - lag_sal_2_34: lag_sal_2_33
       #         - lag_sal_2_33: lag_sal_2_32
        #        - lag_sal_2_32: lag_sal_2_31
         #       - lag_sal_2_31: lag_sal_2_30
          #      - lag_sal_2_30: lag_sal_2_29
           #     - lag_sal_2_29: lag_sal_2_28
            #    - lag_sal_2_28: lag_sal_2_27
             #   - lag_sal_2_27: lag_sal_2_26
              #  - lag_sal_2_26: lag_sal_2_25
               # - lag_sal_2_25: lag_sal_2_24
                #- lag_sal_2_24: lag_sal_2_23
#                - lag_sal_2_23: lag_sal_2_22
 #               - lag_sal_2_22: lag_sal_2_21
  #              - lag_sal_2_21: lag_sal_2_20
   #             - lag_sal_2_20: lag_sal_2_19
    #            - lag_sal_2_19: lag_sal_2_18
     #           - lag_sal_2_18: lag_sal_2_17
      #          - lag_sal_2_17: lag_sal_2_16
       #         - lag_sal_2_16: lag_sal_2_15
        #        - lag_sal_2_15: lag_sal_2_14
         #       - lag_sal_2_14: lag_sal_2_13
          #      - lag_sal_2_13: lag_sal_2_12
           #     - lag_sal_2_12: lag_sal_2_11
            #    - lag_sal_2_11: lag_sal_2_10
             #   - lag_sal_2_10: lag_sal_2_9
              #  - lag_sal_2_9: lag_sal_2_8
               # - lag_sal_2_8: lag_sal_2_7
                #- lag_sal_2_7: lag_sal_2_6
#                - lag_sal_2_6: lag_sal_2_5
 #               - lag_sal_2_5: lag_sal_2_4
  #              - lag_sal_2_4: lag_sal_2_3
   #             - lag_sal_2_3: lag_sal_2_2
    #            - lag_sal_2_2: lag_sal_2_1
     #           - lag_sal_2_1: itl_anses_sal
      #          - temp_8: lag_sal_2_1+lag_sal_2_2+lag_sal_2_3+lag_sal_2_4+lag_sal_2_5+lag_sal_2_6+lag_sal_2_7+lag_sal_2_8+lag_sal_2_9+lag_sal_2_10
       #         - temp_5: lag_sal_2_11+lag_sal_2_12+lag_sal_2_13+lag_sal_2_14+lag_sal_2_15+lag_sal_2_16+lag_sal_2_17+lag_sal_2_18+lag_sal_2_19+lag_sal_2_20
        #        - temp_6: lag_sal_2_21+lag_sal_2_22+lag_sal_2_23+lag_sal_2_24+lag_sal_2_25+lag_sal_2_26+lag_sal_2_27+lag_sal_2_28+lag_sal_2_29+lag_sal_2_30
         #       - temp_7: lag_sal_2_31+lag_sal_2_32+lag_sal_2_33+lag_sal_2_34+lag_sal_2_35+lag_sal_2_36+lag_sal_2_37+lag_sal_2_38+lag_sal_2_39+lag_sal_2_40
          #      - sum_lag_sal_2: temp_5+temp_6+temp_7+temp_8   
                ###################################################
                - lag_count_sal_40: lag_count_sal_39
                - lag_count_sal_39: lag_count_sal_38
                - lag_count_sal_38: lag_count_sal_37
                - lag_count_sal_37: lag_count_sal_36
                - lag_count_sal_36: lag_count_sal_35
                - lag_count_sal_35: lag_count_sal_34
                - lag_count_sal_34: lag_count_sal_33
                - lag_count_sal_33: lag_count_sal_32
                - lag_count_sal_32: lag_count_sal_31
                - lag_count_sal_31: lag_count_sal_30
                - lag_count_sal_30: lag_count_sal_29
                - lag_count_sal_29: lag_count_sal_28
                - lag_count_sal_28: lag_count_sal_27
                - lag_count_sal_27: lag_count_sal_26
                - lag_count_sal_26: lag_count_sal_25
                - lag_count_sal_25: lag_count_sal_24
                - lag_count_sal_24: lag_count_sal_23
                - lag_count_sal_23: lag_count_sal_22
                - lag_count_sal_22: lag_count_sal_21
                - lag_count_sal_21: lag_count_sal_20
                - lag_count_sal_20: lag_count_sal_19
                - lag_count_sal_19: lag_count_sal_18
                - lag_count_sal_18: lag_count_sal_17
                - lag_count_sal_17: lag_count_sal_16
                - lag_count_sal_16: lag_count_sal_15
                - lag_count_sal_15: lag_count_sal_14
                - lag_count_sal_14: lag_count_sal_13
                - lag_count_sal_13: lag_count_sal_12
                - lag_count_sal_12: lag_count_sal_11
                - lag_count_sal_11: lag_count_sal_10
                - lag_count_sal_10: lag_count_sal_9
                - lag_count_sal_9: lag_count_sal_8
                - lag_count_sal_8: lag_count_sal_7
                - lag_count_sal_7: lag_count_sal_6
                - lag_count_sal_6: lag_count_sal_5
                - lag_count_sal_5: lag_count_sal_4
                - lag_count_sal_4: lag_count_sal_3
                - lag_count_sal_3: lag_count_sal_2
                - lag_count_sal_2: lag_count_sal_1
                - lag_count_sal_1: if(labour_market_state==1,1,0)
    #2- We compute contributory retirement pensions.  
        #First, we compute the replacement ratio an individual would get if he retired now. By definition, this ratio is null before the legal retirement age. 
        #Being older than the minimum retirement age reduces the required number of 30 years to retire. For every two months above the legal minimum retirement age, 
                #one fewer month of contribution is needed for accessing to the PBU and retiring. This does not however affect the computation of the PAP or the PC: 
                # the replacement ratio is left unchanged. For instance, if a woman aged 61 retires with 29 years of contributions, her replacement ratio will be 
                # equal to 1.5*29=43.5%. If she contributes one more year before retiring, the replacement ratio will go up to 1.5*30=45%. 
                - extra_trim: if(male, (age_quarters-65*4), (age_quarters-60*4))
                - extra_trim: if(extra_trim<=0, 0, extra_trim)
        #Contributions made under the monotributo regime do not count towards the replacement ratio, except between 1998 and 2000. They however help give access to the 
                #PBU, and thus to the legal minimum
                - replacement_ratio: (1.5*trunc((car_sal+car_ind)/4))/100
        #We then see who has the right to retire "normally" (through a contributory pension) and the level of his/her pension. 
            #The PAP / PC is computed differently for independent labour spells (now the Autonomous workers regime) than in dependent labour. When there are mixed 
                    #contributions in dependent and independent labour, these are weighted by the length of dependent and independent labour spells. Thus the sal_ponderation
                    #and ind_ponderation variables. 
                - sal_ponderation: if(car_sal+car_ind>0, 
                                        car_sal/(car_sal+car_ind),
                                            0)                            
                - ind_ponderation: if(car_sal+car_ind>0, 
                                        car_ind/(car_sal+car_ind),
                                            0)
        #We now see who starts earning a new contributory retirement pension. We tag him/her as having liquidated his/her retirement rights. Monotributo contributions 
                #do give access to a contributory pension (to the PBU more specifically), although they do not count for either the PC or the PAP. They must however 
                #be taken into account when determining who retires.
                - new_contributory_pension: if(liqui_retirement or age<60 or (age<65 and male), False, 
                                    if((age>=65 or(age>=60 and not male)) and((car_sal + car_ind + car_mono_norref)>=(120-extra_trim/2)), True,False))
                                    
                - liqui_retirement: if(new_contributory_pension,True,liqui_retirement)
                
        #We then compute individual rights to a pension. The reference income of formal dependent labour spells is the discounted average of the last 10 years of 
                #dependent formal work. Periods where the individual was not a formal wage-earner are not taken into consideration. Thus the computation of variable 
                #sum_count_40_sal. 
                - temp_sal_1: lag_count_sal_1+lag_count_sal_2+lag_count_sal_3+lag_count_sal_4+lag_count_sal_5+lag_count_sal_6+lag_count_sal_7+lag_count_sal_8+lag_count_sal_9+lag_count_sal_10+lag_count_sal_11+lag_count_sal_12+lag_count_sal_13+lag_count_sal_14+lag_count_sal_15+lag_count_sal_16+lag_count_sal_17+lag_count_sal_18+lag_count_sal_19+lag_count_sal_20
                - temp_sal_2: lag_count_sal_21+lag_count_sal_22+lag_count_sal_23+lag_count_sal_24+lag_count_sal_25+lag_count_sal_26+lag_count_sal_27+lag_count_sal_28+lag_count_sal_29+lag_count_sal_30+lag_count_sal_31+lag_count_sal_32+lag_count_sal_33+lag_count_sal_34+lag_count_sal_35+lag_count_sal_36+lag_count_sal_37+lag_count_sal_38+lag_count_sal_39+lag_count_sal_40
                - sum_count_40_sal: temp_sal_1 + temp_sal_2       
            #Past income that enters in the computation of retirement pensions is discounted as if the individual retired in November 2014. To get actual retirement rights 
                    #that take into account the increase in real wages since November 2014, we multiply the reference income by the gross real wage of the period where the individual
                    #retires and divide it by the RIPTE of November 2014 (11,802.61 pesos). 
                - right_to_a_pension: if(car_sal+car_ind+car_mono_norref>0,
                                            GROSS_WAGE_CENTRAL_2014_T4/11802.61*replacement_ratio*((sum_rent_aut/car_ind*ind_ponderation + sum_lag_sal/sum_count_40_sal*sal_ponderation)), 
                                                0)
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
           #     - right_to_a_pension_2: if(car_sal+car_ind +car_mono_norref>0,
            #                                GROSS_WAGE_CENTRAL_2014_T4/11802.61*replacement_ratio*((sum_rent_aut_2/car_ind*ind_ponderation + sum_lag_sal_2/sum_count_40_sal*sal_ponderation)), 
             #                                   0)      
            #The right_to_a_pension variable corresponds to the sum of the PAP and the PC. To get the actual new pension, we add the PBU. Its value depends on the pension
                    #mobility up to the studied period, which in turn depends (to some extent) on the evolution of wages. As such, the real PBU depends on the chosen economic 
                    #scenario. 
                - gross_retirement: if(new_contributory_pension, PBU_CENTRAL_2014_T4+ right_to_a_pension,
                                        gross_retirement)                       
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
            #    - gross_retirement_2: if(new_contributory_pension, PBU_CENTRAL_2014_T4+ right_to_a_pension_2,
             #                           gross_retirement_2)   
            #We submit these retirement pensions to the minimum and maximum pensions in force for the period. 
                - gross_retirement: if(new_contributory_pension, 
                                        if(gross_retirement<MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4, 
                                            if(gross_retirement>MAX_PENSION_CENTRAL_2014_T4, MAX_PENSION_CENTRAL_2014_T4, 
                                                gross_retirement)),
                                                    gross_retirement)
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
       #         - gross_retirement_2: if(new_contributory_pension, 
        #                                if(gross_retirement_2<MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4, 
         #                                   if(gross_retirement_2>MAX_PENSION_CENTRAL_2014_T4, MAX_PENSION_CENTRAL_2014_T4, 
          #                                      gross_retirement_2)),
           #                                         gross_retirement_2)
    #3- We compute pensions obtained through the Law 26970 moratorium. It is accessible for men and women since September 2014 and until September 2016 for the former, 
            #July 2019 for the latter. I
        #First, it is means-tested. As said in Art. 8 of Law 26970 : 
            #"The means-test (...) will be positive when the person asking for a pension does not verify the following elements: 
            #a) Gross yearly income earned, in the last twelve months before the evaluation date, whose mean is higher than the right to recieving a family pension as 
                    #provided by incise a) of Art. 6 of Law 24714 and its modifications. If some of these twelve months lack revenues, only months with declared revenues will be taken into account. 
                    # Are to be taken into account gross wages, gross retirement income and gross income declared in the income tax and/or gross annual income ranges declared in the Simplified Regime for Small Tax-payers [Monotributo]
            #It is also impossible to accumulate this moratorium pension with any other direct retirement benefit. 
                #COUNTERFACTUAL SCENARIO 2015: We assume here the Law 26970 pension moratorium is the last of its kind. It thus stops for both men and women in 
                        #September 2016, the third quarter of 2016 (period 55). Since period 56 then (fourth quarter of 2016), access to a pension moratorium is impossible.
                - new_moratoria: if(liqui_retirement, False, 
                                    if(new_contributory_pension, False, 
                                        if(age<60 or (age<65 and male), False, 
                                            if(period>=56 or period<48, False,
                                                if(((car_sal + car_ind + car_mono_norref)<(120-extra_trim/2)),True
                                                    ,False)))))
            # IGF stands for family-group income. The means-test we apply here is that if someone in the household earns more than the maximum individual income cap 
                    #or if the IGF exceeds the maximum household income cap for earning a family benefit, then that person cannot have a moratorium pension. 
                - igf: household.igf_hh                                
                - new_moratoria: if(household.max_itl_sal_hh>IND_FAM_CAP_CENTRAL or igf>FAM_CAP_CENTRAL_4, False, new_moratoria)  
        # Then, we compute the moratorium pension's amount. We assume all moratorium pensioners get the minimum benefit for the sake of simplicity. 
            #The first five years, the moratorium pensioner earns 80% of the minimum pension (as per our hypothesis). We thus need to define the date where they started
            #earning a moratorium pension.      
            #To this end, retired people earning less than or exactly 80% of the minimum pension are supposed to be moratorium pensioners. We assume they started 
                    #receiving their pension as soon as they reached the legal minimum age. 
                    
                - moratorium_date: if(moratorium_date!=-1 and moratorium_date!=0, moratorium_date, 
                                        if(age<60 or (male and age<65), -1, 
                                            if(new_moratoria, period, 
                                                    if(gross_retirement<=0.8*MIN_PENSION_CENTRAL_2014_T4 and (male and age<=70), period-age_quarters+65*4,
                                                        if(gross_retirement<=0.8*MIN_PENSION_CENTRAL_2014_T4 and (not male and age<=65), period-age_quarters+60*4, 0)))))
            #The Law 26970 was only available between periods 48 and 55 for men (Fourth quarter 2014- Third quarter 2016), and until period 67 for women (23d of July 2019 as per Art. 15 of Decree 894/2016)
                    #As such, moratorium dates are only valid between these periods. 
                #First, people that reach the minimum age outside of these periods cannot subscribe to a moratorium pension at all.     
                  
                - moratorium_date: if(male and age<=70 and age>=65,
                                        if(period-age_quarters+65*4>=56,-1, 
                                            if(not male and age<=65 and age>=60, 
                                                if(period-age_quarters+60*4>=68,-1,moratorium_date),moratorium_date)), moratorium_date)                    
                #COUNTERFACTUAL SCENARIO 2015: we cannot have moratorium from the fourth quarter of 2016 (period 56) onward. 
                - moratorium_date: if(moratorium_date>=56,-1,
                                        moratorium_date)
                #Then, for people who reached the minimum retirement age before the legal minimum but have already subscribed to a moratorium pension (before we got a 
                        #chance to assign them a moratorium pension), their moratorium date is the first period where it was possible to subscribe to a moratorium pension. 
                - moratorium_date: if(moratorium_date<48 and moratorium_date>0, 48, moratorium_date)   
                - moratorium_date: if(new_contributory_pension, -1, moratorium_date)                
                - new_moratoria: if(moratorium_date==0 or moratorium_date==-1, False, new_moratoria)
                - liqui_retirement: if(new_moratoria or new_contributory_pension,True,liqui_retirement)
               #Now we compute the moratorium pension earned by the beneficiaries. These are, following our hypothesis, either 80% of the minimum pension or the minimum
                        #pension. As such, we do not need to increase them every period following the pension mobility index, as this is already done in our globals file. 
                - moratorium_value: if(moratorium_date==0 or moratorium_date==-1, 0,
                                        if(new_moratoria, MIN_PENSION_CENTRAL_2014_T4*0.8,
                                            if((period-moratorium_date)>=20, MIN_PENSION_CENTRAL_2014_T4,MIN_PENSION_CENTRAL_2014_T4*0.8)))  
                - gross_retirement: if(moratorium_date==0 or moratorium_date==-1, gross_retirement, moratorium_value)
               #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
               # - gross_retirement_2: if(moratorium_date==0 or moratorium_date==-1, gross_retirement_2, moratorium_value)

################################################################################################################################################################
##### COUNTERFACTUAL SCENARIO 2015: WE COMMENT OUT POINT 4 FOR THIS COUNTERFACTUAL: THERE ARE NO UNIVERSAL PENSIONS WITH 2015 LEGISLATION. 
    #4- We compute universal pension beneficiaries. These pensions were given starting from period 56 (fourth quarter of 2016) to people aged 65 or more 
                #that did not have any other retirement pension (survivors pensions can be accumulated with a universal benefit).  
   #             - new_pension_uni: if(period<56, False, 
    #                                if(liqui_retirement or gross_retirement>0,False, 
     #                                   if(age>=65, True,False)))
      #          - tag_pension_uni: if(new_pension_uni, True,
       #                               if(new_contributory_pension, False,
        #                                 if(liqui_retirement,False, 
         #                                   tag_pension_uni)))
          #      - liqui_retirement: if(tag_pension_uni, False, liqui_retirement)
           #     - gross_retirement: if(tag_pension_uni, MIN_PENSION_CENTRAL_2014_T4*0.8,
            #                            gross_retirement)
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
             #   - gross_retirement_2: if(tag_pension_uni, MIN_PENSION_CENTRAL_2014_T4*0.8, 
              #                          gross_retirement_2)
 ################################################################################################################################################################

################################################################################################################################################################
#####WE COMMENT OUT POINT 5 FOR THIS COUNTERFACTUAL, WHERE WE ASSUME THE DECEMBER 2017 REFORMS DID NOT HAPPEN. THIS MEANS THE GUARANTEED PENSION EQUAL TO 82% OF 
#####THE MINIMUM WAGE FOR CONTRIBUTORY RETIREMENT PENSIONERS DOES NOT APPLY.    
    #5- We apply Art. 5 of the pension reform Law 27426, in force since the 29th of December 2017, that ensures a retirement pension at least equal to 82% of 
            #the legal minimum wage for retirees with at least 30 years of contributions. 
        #However, the reglamentation of this Art. by Resolution E.25/2017 of the ANSES, published  the 11th of January 2018, states that this guarantee is extended to
                #Law 24241 pension beneficiaries even if they did not contribute the required 30 years as long as they fulfilled the conditions established in this Law
                #to retire. Therefore, the 30 years of contributions are no longer a mandatory condition. 
   #             - gross_retirement: if(period<62 or (not liqui_retirement) or moratorium_date<=0 or tag_pension_uni, gross_retirement, 
    #                                    if((car_sal+car_ind+car_mono_norref)<(120-extra_trim/2), gross_retirement, 
     #                                       if(gross_retirement<0.82*MINIMUM_WAGE_CENTRAL_2014_T4, MINIMUM_WAGE_CENTRAL_2014_T4*0.82, gross_retirement)))
      #          - gross_retirement_2: if(period<62 or (not liqui_retirement) or moratorium_date<=0 or tag_pension_uni, gross_retirement_2, 
       #                                 if((car_sal+car_ind+car_mono_norref)<(120-extra_trim/2), gross_retirement_2, 
        #                                    if(gross_retirement_2<0.82*MINIMUM_WAGE_CENTRAL_2014_T4, MINIMUM_WAGE_CENTRAL_2014_T4*0.82, gross_retirement_2)))
    #6- We actualise pensions given before this period following real pension mobility. We only do it for contributory pensions as both moratorium pensions and 
            #universal pensions are a function of the minimum pension, that is already subject to real pension mobility in our globals file. New contributory pensions
            #are excluded (they are not discounted following pension mobility the very same quarter they are first given). 
                #COUNTERFACTUAL SCENARIO 2015: there is no universal pension. 
                - gross_retirement: if(moratorium_date>0, gross_retirement, 
                                        if(new_contributory_pension, gross_retirement, 
                                            gross_retirement*REAL_MOBILITY_CENTRAL))
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
             #   - gross_retirement_2: if(tag_pension_uni or moratorium_date>0, gross_retirement_2, 
              #                          if(new_contributory_pension, gross_retirement_2, 
               #                             gross_retirement_2*REAL_MOBILITY_CENTRAL))                   
    #7- We implement minimum and maximum pensions. 
        #We exclude moratorium pensions, universal pensions and survivors' pensions from this correction. The former two are often lower than the minimum pension. 
                #COUNTERFACTUAL SCENARIO 2015: there is no universal pension.
                - gross_retirement: if(moratorium_date>0 or gross_retirement==0 , gross_retirement,
                                        if(gross_retirement<MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4, 
                                            if(gross_retirement>MAX_PENSION_CENTRAL_2014_T4, MAX_PENSION_CENTRAL_2014_T4, gross_retirement)))
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
             #   - gross_retirement_2: if(tag_pension_uni or moratorium_date>0 or gross_retirement_2==0 , gross_retirement_2,
              #                          if(gross_retirement_2<MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4, 
               #                             if(gross_retirement_2>MAX_PENSION_CENTRAL_2014_T4, MAX_PENSION_CENTRAL_2014_T4, gross_retirement_2)))                     
    #8- We output retirement pensions net of the compulsory contributions to the PAMI. These are 6% of the gross pension for earnings above the minimum pension and 
            #3% for earnings below it. 
                - net_retirement: if(gross_retirement>=MIN_PENSION_CENTRAL_2014_T4, (gross_retirement-MIN_PENSION_CENTRAL_2014_T4)*0.94+MIN_PENSION_CENTRAL_2014_T4*0.97, 
                                        (gross_retirement)*0.97)
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
          #      - net_retirement_2: if(gross_retirement_2>=MIN_PENSION_CENTRAL_2014_T4, (gross_retirement_2-MIN_PENSION_CENTRAL_2014_T4)*0.94+MIN_PENSION_CENTRAL_2014_T4*0.97, 
           #                             (gross_retirement_2)*0.97)   
        #We also mimic the v2_m variable of the EPHc, that combines retirement pension and survivor's benefits income. We assume individuals declare 
                #their net pension (how much pension income they actually earn each month). 
                - discounted_v2_m: if(net_retirement>=0, net_retirement, 0)
                - discounted_v2_m: if(net_pension>=0, discounted_v2_m + net_pension, discounted_v2_m)
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
            #    - discounted_v2_m_2: if(net_retirement_2>=0, net_retirement_2, 0)
             #   - discounted_v2_m_2: if(net_pension_2>=0, discounted_v2_m_2 + net_pension_2, discounted_v2_m_2)
        #We finally compute the sum of gross retirement and pension income. This is how much ANSES actually pays in retirement pensions, including 
                #transfers to the PAMI. 
                - disc_cost_v2_m: if(discounted_v2_m>=MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4+(discounted_v2_m-MIN_PENSION_CENTRAL_2014_T4*0.97)/0.94,
                                        discounted_v2_m/0.97)
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
           #     - disc_cost_v2_m_2: if(discounted_v2_m_2>=MIN_PENSION_CENTRAL_2014_T4, MIN_PENSION_CENTRAL_2014_T4+(discounted_v2_m_2-MIN_PENSION_CENTRAL_2014_T4*0.97)/0.94,
            #                            discounted_v2_m_2/0.97)  
    #9- We compute the thirteenth month for retirees and pensioners (available to all pensioners, even recipients of the universal pension). 
                - modulo_period: period % 4       
        #We remind the reader modulo_period==1-> first quarter; ==2 second quarter; ==3 third quarter; ==0 fourth quarter. 
                - sac_jp_gross: 0
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
             #   - sac_jp_gross_2: 0
                - sac_jp_net: 0 
              #  - sac_jp_net_2: 0 
                - sac_jp_gross: if(modulo_period==1 or modulo_period==3,0, 
                                    if(gross_retirement>=0, (gross_retirement)/6,0))
                - sac_jp_gross: if(modulo_period==1 or modulo_period==3,0, 
                                    if(gross_pension>=0, sac_jp_gross+gross_pension/6, sac_jp_gross))
               # - sac_jp_gross_2: if(modulo_period==1 or modulo_period==3,0, 
               #                     if(gross_retirement_2>=0, (gross_retirement_2)/6,0))
                #- sac_jp_gross_2: if(modulo_period==1 or modulo_period==3,0, 
                 #                   if(gross_pension_2>=0, sac_jp_gross_2+gross_pension_2/6, sac_jp_gross_2))
        #The thirteenth month also pays compulsory PAMI contributions. 
                - sac_jp_net: if((gross_retirement+gross_pension)>=MIN_PENSION_CENTRAL_2014_T4, sac_jp_gross*0.94,
                                    sac_jp_gross*0.97)
           #     - sac_jp_net_2: if((gross_retirement_2+gross_pension_2)>=MIN_PENSION_CENTRAL_2014_T4, sac_jp_gross_2*0.94,
            #                        sac_jp_gross_2*0.97)    
######################################################################################################################################################
##### COUNTERFACTUAL SCENARIO 2015: WE COMMENT OUT POINT 10 FOR THIS COUNTERFACTUAL: THERE ARE NO UNIVERSAL PENSIONS WITH 2015 LEGISLATION. 
 
    #10- We compute separately the universal pension's level. This is important because this benefit is not de jure funded by the ANSES but by 
            #the federal budget. 
  #              - universal_gross_pension: if(not tag_pension_uni, 0, 
   #                                     MIN_PENSION_CENTRAL_2014_T4*0.8)
        #Universal pensioners are covered by the PAMI. They therefore contribute to the PAMI. 
    #            - universal_net_pension: universal_gross_pension*0.97     
        #Non contributive pensions also get a thirteenth month. The universal pension for the elderly adult is a non contributive pension. Therefore, 
                #although not explicit in the legislation, universal pension beneficiaries get a thirteenth month. 
     #           - sac_up_gross: if(modulo_period==1 or modulo_period==3, 0, 
      #                              if(universal_gross_pension>=0, (universal_gross_pension)/6,0))
       #         - sac_up_net:  sac_up_gross*0.97   

    #11- We've had some cases where individuals who do not get any pension still appear as having liquidated their retirement rights. 
            #We thus add this instruction to correct this error at every simulated period.
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
                - liqui_retirement: if(discounted_v2_m==0, False, liqui_retirement)                
    #12- We export total paid retirement benefits by type and computation method. This allows for a faster computation of ANSES deficit.       
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. There are no universal pensions.
                - csv('period', 'total pensions cost', 'total net pensions',
                                    'total retirement benefits', 'total survivors pensions',
                                            ' total thirteenth month of pension, cost', 'total net thirteenth month of pension',
                                                ' total thirteenth month of universal pension, cost', 'total net thirteenth month of universal pension',
                                                    fname='debug_central_v2_m.csv',mode='a')
                - csv(period,sum(disc_cost_v2_m*pondera)/1000,sum(discounted_v2_m*pondera)/1000,
                                sum(net_retirement*pondera)/1000,sum(net_pension*pondera)/1000,
                                        sum(sac_jp_gross*pondera)/1000,sum(sac_jp_net*pondera)/1000,
                                                fname='debug_central_v2_m.csv',mode='a')
                
            family_benefits: 
#Lastly, we compute family benefits. All of these are de jure means-tested on the family-group level (variable IGF, or family-group income). 
        #As pointed out however by the likes of Garganta and Gasparini (2015), informal labour income is not computed in the family-group income 
        #and benefits such as the universal child benefit AUH are de facto not means-tested. The condition to get them is not income, 
        #but rather not being a formal worker. 
#All the relevant legislation and computation rules for ANSES family benefits 
    #1- We re-compute some temporary variables. In particular, variable IGF has already been computed at the household level. We simply "import" it 
            #at each individual's level. 
                - discounted_itl_sal_gross: if(labour_market_state!=1, 0, discounted_itl_gross)
                - igf: household.igf_hh
                - newborn: if(lag(age)==-1, 1, 0)
                - private_sector_we: if(labour_market_state==1 and (contribution==1 or contribution==2), True, False)
                - public_sector_we: if(labour_market_state==1 and contribution==4, True, False)
    #2- We compute the birth benefit, paid upon birth and reserved to private sector wage-earners. Civil servants are excluded from this benefit
            #because they are de jure considered inactive in the field of family benefits. 
                - birth_benefit: if(newborn==0,0,
                                if((not mother.private_sector_we) and (not father.private_sector_we), 0, 
                                    if(mother.discounted_itl_sal_gross>IND_FAM_CAP_CENTRAL or father.discounted_itl_sal_gross>IND_FAM_CAP_CENTRAL, 0, 
                                        if(igf>FAM_CAP_CENTRAL_4, 0, BIRTH_BEN_CENTRAL ))))
    #3- We compute pregnancy benefits. These are the pre-natal benefit, given to formal private sector wage-earners and monotributistas, and the 
            #"Asignación por pregnancy_sp para Protección Social" , or Pregnancy benefit for Social Protection, for pregnant women that are unemployed or working in the informal sector. 
        #Labour-market conditions for granting this benefit apply to both members of the couple. So for instance if the father is a formal wage-earner and 
                #the mother is unemployed, then the pregnant woman may only receive the pre-natal benefit if her husband's income passes the means test. The woman 
                #may not receive in this case the pregnancy benefit for social protection. 
        #We do not however simulate pregnancy in our model, only births. We thus simulate this benefit as if the full 9 months of pregnancy benefit were paid 
                #at the birth of the child. This does not affect the study of ANSES accounts and barely changes the study of ANSES benefits adequacy and 
                #redistributive impact. 
        #Finally, civil servants are excluded from this pre-natal benefit because they are de jure considered inactive for family benefits purposes. 
                - prenatal: if(newborn==0, 0, 
                                if((not mother.private_sector_we) and (not father.private_sector_we), 0, 
                                   if((mother.discounted_itl_sal_gross + mother.discounted_v2_m + mother.rent_aut)>IND_FAM_CAP_CENTRAL or (father.discounted_itl_sal_gross + father.rent_aut+ father.discounted_v2_m)>IND_FAM_CAP_CENTRAL, 0, 
                                        if(igf<=FAM_CAP_CENTRAL_1,CHILD_BEN_CENTRAL_1*9, 
                                           if(igf<=FAM_CAP_CENTRAL_2,CHILD_BEN_CENTRAL_2*9, 
                                             if(igf<=FAM_CAP_CENTRAL_3,CHILD_BEN_CENTRAL_3*9,
                                                 if(igf<=FAM_CAP_CENTRAL_4,CHILD_BEN_CENTRAL_4*9,0)))))))         
################################################################################################################################################################
###COUNTERFACTUAL SCENARIO 2015: WE COMMENT OUT FAMILY BENEFITS FOR THE CHILDREN OF MONOTRIBUTISTAS, SINCE THESE WERE INTRODUCED ONLY ON MAY 2016        
        #Since period 54 (May 2016), the pre-natal benefit is accessible to some categories of the simplified tax-payers regime (Monotributo). 
         #       - prenatal: if(newborn==0, prenatal,
          #                      if(period<54, prenatal,
           #                         if((1>father.monotributo_cat or father.monotributo_cat>8) and (mother.monotributo_cat<1 or mother.monotributo_cat>8), prenatal, 
            #                            if(father.monotributo_cat==8 or mother.monotributo_cat==8, CHILD_BEN_CENTRAL_4*9, 
             #                               if(father.monotributo_cat==7 or mother.monotributo_cat==7, CHILD_BEN_CENTRAL_3*9, 
              #                                  if(father.monotributo_cat==6 or mother.monotributo_cat==6, CHILD_BEN_CENTRAL_2*9, 
               #                                     CHILD_BEN_CENTRAL_1*9))))))             
###################################################################################################################################################################                                                    
        #The pregnancy for social protection benefit (variable pregnancy_sp) is paid to pregnant women that are informal or unemployed. Inactive women do not 
                #get the benefit. If the pregnant woman has a partner, the latter's characteristics are taken into account before granting the pregnancy benefit. 
                - pregnancy_sp:  if(newborn==0, 0, 
                                if(mother.labour_market_state==1 or mother.lag_count_ind_1==1 or mother.lag_mono_1==1 or father.labour_market_state==1 or father.lag_count_ind_1==1 or father.lag_mono_1==1, 0, 
                                    if(mother.labour_market_state==5 and father.labour_market_state==5, 0, 
                                        CHILD_BEN_CENTRAL_1*9)))      
                - pregnancy_sp: if(father_id!=UNSET and mother_id!=UNSET, pregnancy_sp, 
                                if(father_id==UNSET, 
                                    if(mother.labour_market_state==5, 0, pregnancy_sp),
                                        if(mother_id==UNSET, 
                                            if(father.labour_market_state==5, 0, pregnancy_sp),
                                                pregnancy_sp)))   
    #4- We compute contributive child benefits, the "asignación por hijo". These benefits are means-tested and open to the children of formal workers
            # and of retirement pensioners. The minor children of recipiendaries of the universal pension do not get access to this child benefit. 
           #For computing the contributive child benefit, the means-test is made on the child's parents' income. This variable igf_parents allows to 
                #recompute the IGF variable with a narrower definition of the family group, limiting it to the nuclear family. 
            #Also, if their parents divorced, the income of both parents comes into consideration for determining the family benefit's level (even if
                #they no longer cohabitate). We thus means-test for both family-group income and the sum of both parents' income. 
                - igf_parents: discounted_itl_sal_gross + rent_aut + disc_cost_v2_m
        #It is however impossible to add both parents' income if one of the parents is missing. As such, we first compute child benefits when both parents are known 
                #and use both the IGF and the sum of their income as means tests. 
                - child_benefit: if(father_id==UNSET or mother_id==UNSET, 0, 
                                    if(age>=18 or labour_market_state==1 or labour_market_state==2 or lag_count_ind_1==1 or lag_mono_1==1, 0,
                                        if(mother.labour_market_state!=1 and father.labour_market_state!=1 and mother.liqui_retirement==False and father.liqui_retirement==False, 0, 
                                                if(household.max_itl_sal_hh>IND_FAM_CAP_CENTRAL, 0, 
                                                    if(igf<=FAM_CAP_CENTRAL_1 and ((mother.igf_parents + father.igf_parents)<=FAM_CAP_CENTRAL_1), CHILD_BEN_CENTRAL_1, 
                                                        if(igf<=FAM_CAP_CENTRAL_2 and ((mother.igf_parents + father.igf_parents)<=FAM_CAP_CENTRAL_2),CHILD_BEN_CENTRAL_2, 
                                                            if(igf<=FAM_CAP_CENTRAL_3 and ((mother.igf_parents + father.igf_parents)<=FAM_CAP_CENTRAL_3),CHILD_BEN_CENTRAL_3,
                                                                if(igf<=FAM_CAP_CENTRAL_4 and ((mother.igf_parents + father.igf_parents)<=FAM_CAP_CENTRAL_4),CHILD_BEN_CENTRAL_4,0))))))))     

################################################################################################################################################################
###COUNTERFACTUAL SCENARIO 2015: WE COMMENT OUT FAMILY BENEFITS FOR THE CHILDREN OF MONOTRIBUTISTAS, SINCE THESE WERE INTRODUCED ONLY ON MAY 2016                                                                                                                                    
            #Since May 2016, contributory family benefits are accessible to the monotributistas. Art. 5 of Decree 593/2016 granting access to child benefits to 
                    #monotributistas says however if a child benefit can be given because one of the family members is a registered wage-earner, it becomes 
                    #impossible to earn a family benefit intended for the monotributista. We thus compute monotributistas' family benefit for family groups where there is
                    #no formal wage-earner. 
               # - no_mono_benefit: if(mother.labour_market_state==1 or father.labour_market_state==1, True, 
                #                            if(father.lag_count_ind_1==1 or mother.lag_count_ind_1==1, True, 
                 #                               False))
               # - child_benefit: if(father_id==UNSET or mother_id==UNSET, 0, 
                #                    if(no_mono_benefit, child_benefit, 
                 #                       if(age>=18 or labour_market_state==1 or labour_market_state==2  or lag_count_ind_1==1 or lag_mono_1==1, 0,
                  #                          if(period<54 or child_benefit>0, child_benefit,
                   #                             if(household.wage_earners_hh>0 or household.autonomous_hh>0 or household.monotributistas_hh==0, child_benefit, 
                    #                                if(household.max_monotributo_cat_hh==9 or mother.monotributo_cat==9 or father.monotributo_cat==9, child_benefit, 
                     #                                   if(household.max_monotributo_cat_hh==8 or mother.monotributo_cat==8 or father.monotributo_cat==8, CHILD_BEN_CENTRAL_4, 
                      #                                      if(household.max_monotributo_cat_hh==7 or mother.monotributo_cat==7 or father.monotributo_cat==7, CHILD_BEN_CENTRAL_3, 
                       #                                         if(household.max_monotributo_cat_hh==6 or mother.monotributo_cat==6 or father.monotributo_cat==6, CHILD_BEN_CENTRAL_2, 
                        #                                            if(household.max_monotributo_cat_hh<=5 and household.max_monotributo_cat_hh>=1, CHILD_BEN_CENTRAL_1,
                         #                                               child_benefit))))))))))
 #######################################################################################################################################################################                                               
        #We then compute child benefits for children for whom we don't know who at least one of their parents is. We use only the family-group income to perform 
                #the means test, since we cannot add the income of both parents as we did earlier. 
                - child_benefit: if(child_benefit>0, child_benefit, 
                                        if(age>=18 or labour_market_state==1 or labour_market_state==2 or household.max_itl_sal_hh>IND_FAM_CAP_CENTRAL or lag_count_ind_1==1 or lag_mono_1==1, 0, 
                                            if(mother_id!=UNSET and father_id!=UNSET, child_benefit, 
                                                if(household.wage_earners_hh==0 and ((mother_id==UNSET and father_id==UNSET) or  ((mother_id!=UNSET or father_id!=UNSET) and( mother.liqui_retirement==False and father.liqui_retirement==False))), 0, 
                                                    if(igf<=FAM_CAP_CENTRAL_1,CHILD_BEN_CENTRAL_1, 
                                                        if(igf<=FAM_CAP_CENTRAL_2,CHILD_BEN_CENTRAL_2, 
                                                            if(igf<=FAM_CAP_CENTRAL_3,CHILD_BEN_CENTRAL_3,
                                                                if(igf<=FAM_CAP_CENTRAL_4,CHILD_BEN_CENTRAL_4,0))))))))                                             
################################################################################################################################################################
###COUNTERFACTUAL SCENARIO 2015: WE COMMENT OUT FAMILY BENEFITS FOR THE CHILDREN OF MONOTRIBUTISTAS, SINCE THESE WERE INTRODUCED ONLY ON MAY 2016               
    #Finally, we compute child benefits for children that have at least one unknown parent but may get a monotributo-related family benefit.    
     #           - child_benefit: if(mother_id!=UNSET and father_id!=UNSET, child_benefit,
      #                                  if(age>=18 or labour_market_state==1 or labour_market_state==2 or lag_mono_1==1, 0,
       #                                     if(period<54, child_benefit,
        #                                        if(household.wage_earners_hh>0 or household.autonomous_hh>0 or household.monotributistas_hh==0, child_benefit, 
         #                                           if(household.max_monotributo_cat_hh==9 or mother.monotributo_cat==9 or father.monotributo_cat==9, child_benefit, 
          #                                              if(household.max_monotributo_cat_hh==8 or mother.monotributo_cat==8 or father.monotributo_cat==8, CHILD_BEN_CENTRAL_4, 
           #                                                 if(household.max_monotributo_cat_hh==7 or mother.monotributo_cat==7 or father.monotributo_cat==7, CHILD_BEN_CENTRAL_3, 
            #                                                    if(household.max_monotributo_cat_hh==6 or mother.monotributo_cat==6 or father.monotributo_cat==6, CHILD_BEN_CENTRAL_2, 
             #                                                       if(household.max_monotributo_cat_hh<=5 and household.max_monotributo_cat_hh>=1, CHILD_BEN_CENTRAL_1,
              #                                                          child_benefit)))))))))             
#######################################################################################################################################################                                                                        
    #5- We compute the Universal Child Benefit or AUH. It is open to the children of parents that are both either unregistered workers or unemployed. 
            #Children that do not attend school, are married or formal workers are excluded from the AUH. 
                - auh: if(age>=18, 0, 
                        if(age>=16 and(not student or (marital_status!=5 and marital_status!=1)), 0,
                            if(mother.labour_market_state==1 or mother.lag_count_ind_1==1 or mother.lag_mono_1==1 or mother.liqui_retirement or father.labour_market_state==1 or father.lag_count_ind_1==1 or father.lag_mono_1==1 or father.liqui_retirement, 0, 
                                if(mother.labour_market_state==5 and father.labour_market_state==5, 0, 
                                    CHILD_BEN_CENTRAL_1))))
                - auh: if(father_id!=UNSET and mother_id!=UNSET, auh, 
                            if(father_id==UNSET, 
                                if(mother.labour_market_state==5, 0, auh),
                                    if(mother_id==UNSET, 
                                        if(father.labour_market_state==5, 0, auh),
                                        auh))) 
            #In the case of children with no known parents, we take individual exclusion conditions. Plus, if there is a household member 
                    #that is a formal worker or if all household members are inactive, the child gets no AUH. 
                - auh: if(age>=18 or (not student) or (marital_status!=1 and marital_status!=5) or IS_WAGE_EARNER or IS_INDEPENDENT or lag_count_ind_1==1 or lag_mono_1==1, 0, 
                         if(mother_id!=UNSET or father_id!=UNSET, auh,
                            if(household.autonomous_hh + household.wage_earners_hh + household.monotributistas_hh!=0, 0, 
                                if(household.nb_persons==household.inactive_hh, 0, auh))))
            #Finally, just to double check, we ensure a child that earns a family benefit cannot earn the AUH.     
                - auh: if(child_benefit>0, 0, auh) 
    #6- We compute the yearly school aid (paid on March). This benefit is meant for minors that attend school. 
        #It is accessible to children that receive a contributive child benefit (as explicited de jure by Res. 606/2011 Art. 2).
                #"Wage-earners, those receiving a labour hazards (...), unemployment or SIPA [retirement] benefit (...) will get the family benefit for yearly school aid as long as they are entitled to the child benefit". 
        #School aid is paid once a year, so we need to set it to 0 first, and then see whether it should be paid this period. 
                - school_aid: 0
                - modulo_period: period % 4        
        #We remind the reader modulo_period==1-> first quarter; ==2 second quarter; ==3 third quarter; ==0 fourth quarter. 
        #We assume children attend school since age 5. 
                - tag_school_aid: if(age>=18 or age<5 or not student or modulo_period!=1, False, 
                                            if(child_benefit>0, True,False))
                - school_aid: if(tag_school_aid, SCHOOL_AID_CENTRAL, 0)
        #Decree 540/2015 extended access to the school aid to AUH beneficiaries since April 2015.                                
            #For 2015, the benefit was paid exceptionnally on April.         
                - tag_school_aid_auh: if(age>=18 or not student or (modulo_period!=1 and period!=50) or age<5, False,
                                            if(period<50 or tag_school_aid, False, 
                                                if(auh>0, True, False)))
                                                
                - school_aid: if(tag_school_aid_auh, SCHOOL_AID_CENTRAL, school_aid)
    #7- The wedding benefit is only for wage-earners. It is accumulative (if both spouses are eligible to the benefit, the two of them get the 
            #benefit at the same time) and can only be given for workers that have more than 6 months of seniority.      
                - wedding_benefit: if(marital_status!=2 or lag(marital_status)==2 or partner_id==UNSET, 0, 
                                if(discounted_itl_sal_gross>IND_FAM_CAP_CENTRAL or partner.discounted_itl_sal_gross>IND_FAM_CAP_CENTRAL, 0, 
                                    if(igf>FAM_CAP_CENTRAL_4, 0, 
                                        if(labour_market_state!=1 or quarterly_seniority<3, 0, 
                                            MAR_BEN_CENTRAL))))
    #8- The spouse benefit is reserved for the spouses of SIPA beneficiaries and of national civil servants. We exclude children of the deceased that earn a 
            #survivor's benefit          
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
                - SIPA_beneficiary: if(liqui_retirement, True, 
                                        if(net_pension_p>0, True, 
                                            False))
                - spouse_benefit: if(discounted_itl_sal_gross>IND_FAM_CAP_CENTRAL or partner.discounted_itl_sal_gross>IND_FAM_CAP_CENTRAL or household.max_itl_sal_hh>IND_FAM_CAP_CENTRAL, 0, 
                                    if(igf>FAM_CAP_CENTRAL_4, 0, 
                                        if(partner_id==UNSET or marital_status!=2, 0, 
                                            if(partner.public_sector_we or partner.SIPA_beneficiary, SPOUSE_BEN_CENTRAL,
                                                0))))      
    #9- We add up all family benefits into variable discounted_v5_m, that mimics EPHc's V5_M variable. The latter includes all subsidies or social help 
            #paid by the government or other bodies (such as the Church, NGOs, etc.). It generally includes all family benefits. 
        #We compute the mean monthly family benefit earned during the simulated quarter. As such, all one-time benefits are divided by three. 
        #The children are the beneficiaries of family benefits, but it is one of the parents (usually the mother) that receives them. 
                - discounted_v5_m_child: birth_benefit/3 + prenatal/3 + pregnancy_sp/3 + child_benefit + auh + school_aid/3 
            #If there is no known mother, it's the children's father that receives the family benefits. 
                - discounted_v5_m: if(ISFEMALE, children.sum(discounted_v5_m_child) + spouse_benefit + wedding_benefit/3, 
                                if(children_bis.max(dead_mother)==-1 and children_bis.max(mother_id)!=-1, spouse_benefit + wedding_benefit/3, 
                                    if(children_bis.min(dead_mother)>-1 or children_bis.max(mother_id)==-1,children_bis.sum(discounted_v5_m_child)+spouse_benefit + wedding_benefit/3,
                                        spouse_benefit + wedding_benefit/3)))
            #If there are no known parents, it's the children that directly receive their family benefits. 
                - discounted_v5_m: if(mother_id==UNSET and father_id==UNSET and age<18 and children.count()==0 and children_bis.count()==0, discounted_v5_m_child,discounted_v5_m)
            
                
        #We export the aggregate family benefits for each period in a separate csv file to help with debugging and projecting ANSES long-term deficit.
                #For studying ANSES sustainability, it is better to study the sum of all family benefits, were they received by a specific family member or not. 
                - csv('period', 'total family benefits', 'total contributive child benefits', 'total auh', 'total spouse benefit',
                                ' total school aid', 'total wedding benefit', 'total prenatal benefit', 'total pregnancy benefit', 'total birth benefit', 
                                    fname='debug_central_v5_m.csv',mode='a')
                - csv(period,sum(discounted_v5_m*pondera)/1000,
                       sum(child_benefit*pondera)/1000,sum(auh*pondera)/1000,sum(spouse_benefit*pondera)/1000,
                            sum(school_aid/3*pondera)/1000,sum(wedding_benefit/3*pondera)/1000,sum(prenatal/3*pondera)/1000,sum(pregnancy_sp/3*pondera)/1000,sum(birth_benefit/3*pondera)/1000,
                                fname='debug_central_v5_m.csv',mode='a')
            adequacy: 
#We put in this module all descriptive statistics on pension and family benefits income adequacy.
    #1- We implement the legislative change in June 2016 on computing the initial retirement benefit or survivor's pension.
        #We also distinguish among pension revenue survivor's pensions from retirement pensions. 
                #COUNTERFACTUAL SCENARIO 2015: we do not use discounting indexes established after June 2016. 
                - pension: discounted_v2_m
                - survivors_benefit: net_pension
                - retirement_pension: if(survivors_benefit>=0 and pension>=0, 
                                            pension-survivors_benefit, 
                                                0)
    #2- We tag individuals that have contributory, moratorium or universal pensions.
        # Individuals that have a contributory benefit either have a retirement or a survivor's pension.   
                #COUNTERFACTUAL SCENARIO 2015: there are no universal pensions.
                - has_contributory_retirement: if(retirement_pension<=0, False, 
                                                    if(moratorium_date>0, False, 
                                                        True))
                - has_survivors_benefit: if(survivors_benefit>0, True, 
                                            False)
                - has_contributory_benefit: if(has_contributory_retirement, True, 
                                                if(has_survivors_benefit, True, 
                                                    False))
        # For the moratorium benefits, our model has trouble identifying beneficiaries of 2006 moratorium pensions since by 2014 they all received a 
            #normal pension equal at least to the minimum pension. This boolean therefore mainly identifies beneficiaries of the 2014 pension moratorium.  
                - has_moratorium_pension: if(discounted_v2_m==0, False, 
                                        if(moratorium_date>0, True,
                                            False))
                #COUNTERFACTUAL SCENARIO 2015: there are no universal pensions
               # - has_universal_pension: if(universal_net_pension==0, False, 
                #                        True)
                - has_retirement_pension: if(has_contributory_retirement, True, 
                                                if(has_moratorium_pension, True, 
                                                        False))
                - has_any_benefit: if(has_retirement_pension, True, 
                                        if(has_survivors_benefit, True, 
                                            False))
    #3- We compute various versions of the mean pension benefit
                 
        #First, we compute the average of contributory retirement and survivor's benefits                                        
                - mean_contributory_pension: avg(pension,
                                                filter=has_contributory_benefit, weights=pondera)
                - mean_contributory_retirement: avg(retirement_pension,
                                                filter=has_contributory_retirement, weights=pondera)   
                - mean_survivors_pension: avg(survivors_benefit, 
                                                filter=has_survivors_benefit, weights=pondera)
        #We then compute mean moratorium and universal pensions.                                                                        
                - mean_moratorium_pension: avg(retirement_pension, 
                                                filter=has_moratorium_pension, weights=pondera)
                #COUNTERFACTUAL SCENARIO 2015: there are no universal pensions. 
          #      - mean_universal_pension: avg(retirement_pension, 
           #                                     filter=has_universal_pension, weights=pondera)
        # Finally, we compute mean retirement benefits across all retirement programs (normal, moratorium and universal pension benefits)                                        
                - mean_retirement_pension: avg(retirement_pension, 
                                                filter= has_retirement_pension, weights=pondera)
                - mean_pension_benefit: avg(pension, 
                                                filter=has_any_benefit, weights=pondera)
    #4- We compute mean and median individual labour income, as well as mean and median total pension income. We then divide mean/median pension income by the mean/median
            #labour income. 
                - median_pension_benefit: median(pension, 
                                                filter=has_any_benefit, weights=pondera) 
                - median_labour_income: median(discounted_itl, 
                                                filter=labour_market_state!=4 and labour_market_state!=5, weights=pondera)                              
                - mean_labour_income: avg(discounted_itl, 
                                                filter=labour_market_state!=4 and labour_market_state!=5, weights=pondera)
                - pension_labour_ratio: median_pension_benefit/median_labour_income
                - mean_pension_labour_ratio: mean_pension_benefit/mean_labour_income
    #5- We compute various definitions of pension coverage (with the minimum legal age or simply ages 65+).            
                - reached_retirement_age: if(age>=65 or (not male and age>=60), True, 
                                                False)
        # First, we compute the proportion of normal, moratorium or universal pension beneficiaries among retirement pensioners (so we do not take here into account 
                #survivor's benefits)
                - contributory_pensioners_share: sum(has_contributory_retirement,weights=pondera)
                                                    /sum(has_retirement_pension,weights=pondera)
                - moratorium_pensioners_share: sum(has_moratorium_pension,weights=pondera)
                                                    /sum(has_retirement_pension,weights=pondera)
                #COUNTERFACTUAL SCENARIO 2015: there are no universal pensions.
            #    - universal_pensioners_share: sum(has_universal_pension,weights=pondera)
             #                                       /sum(has_retirement_pension,weights=pondera)
        #We then take the proportion of the elderly (legal age or 65+) that have a direct retirement benefit        
                - retirement_coverage_legal_age: (sum(has_retirement_pension and reached_retirement_age,weights=pondera))
                                                    /sum(reached_retirement_age,weights=pondera)
                - retirement_coverage_65: (sum(has_retirement_pension and age>=65,weights=pondera))
                                                    /sum(age>=65,weights=pondera)     
            #And the proportion of the elderly that have any retirement benefit (a direct pension or a survivor's pension)                                        
                - all_coverage_legal_age: (sum(has_any_benefit and reached_retirement_age,weights=pondera))
                                                    /sum(reached_retirement_age,weights=pondera)
                - all_coverage_65: (sum(has_any_benefit and age>=65,weights=pondera))
                                                    /sum(age>=65,weights=pondera)
        #We finally also compute the proportion of the elderly that have specific retirement benefits: contributory, moratorium, universal or survivor's. Note the 
                #sum may exceed 100% as it is possible to cumulate survivors' benefits with contributory and moratorium retirement pensions.
                - contributory_coverage_legal_age: (sum(has_contributory_retirement and reached_retirement_age,weights=pondera))
                                                    /sum(reached_retirement_age,weights=pondera)
                - contributory_coverage_65: (sum(has_contributory_retirement and age>=65,weights=pondera))
                                                    /sum(age>=65,weights=pondera) 
                - survivors_coverage_legal_age: (sum(has_survivors_benefit and reached_retirement_age,weights=pondera))
                                                    /sum(reached_retirement_age,weights=pondera)
                - survivors_coverage_65: (sum(has_survivors_benefit and age>=65,weights=pondera))
                                                    /sum(age>=65,weights=pondera)                                     
                - moratorium_coverage_legal_age: (sum(has_moratorium_pension and reached_retirement_age,weights=pondera))
                                                    /sum(reached_retirement_age,weights=pondera)
                - moratorium_coverage_65: (sum(has_moratorium_pension and age>=65,weights=pondera))
                                                    /sum(age>=65,weights=pondera)
                #COUNTERFACTUAL SCENARIO 2015: there are no universal pensions
            #    - PUAM_coverage_legal_age: (sum(has_universal_pension and reached_retirement_age,weights=pondera))
             #                                       /sum(reached_retirement_age,weights=pondera)
              #  - PUAM_coverage_65: (sum(has_universal_pension and age>=65,weights=pondera))
               #                                     /sum(age>=65,weights=pondera)                                    
    #6- We now study family benefits adequacy. First, we define the proportion of children that receive a family benefit. 
               # - child_benefits: discounted_v5_m-spouse_benefit-wedding_benefit/3
        #First, those who receive a AUH benefit (the AUH or the pregnancy benefit for social protection)   
                #- non_child_benefits: spouse_benefit+wedding_benefit/3
                - auh_covered_child: if(age>=18, False, 
                                        if(auh+pregnancy_sp>0, True, False))
            #Second, those who receive a contributory child benefit
                - contributory_benefit_covered_child: if(age>=18, False, 
                                                            if(child_benefit+prenatal+birth_benefit>0, True, False))
            #Third, those who receive any child benefit                                                  
                - covered_child: if(auh_covered_child or contributory_benefit_covered_child, True,
                                    False)
        #Second, we compute the proportion of children that get access to these family benefits. 
                - child_benefit_coverage: sum(covered_child,weights=pondera)
                                                /count(age<18,weights=pondera)
                - contributory_child_benefit_coverage: sum(contributory_benefit_covered_child,weights=pondera)
                                                            /count(age<18,weights=pondera)
                - auh_coverage: sum(auh_covered_child,weights=pondera)
                                    /count(age<18,weights=pondera)                 
    #7- Finally, we compute the mean level of child an family benefits by type. 
        #First, the mean level of child benefits 
            #All kinds
                - mean_child_benefits: avg((auh+child_benefit+pregnancy_sp/3+school_aid/3+prenatal/3+birth_benefit/3), 
                                            filter=(auh+child_benefit+pregnancy_sp/3+school_aid/3+prenatal/3+birth_benefit/3)!=0,weights=pondera)
            #Only contributory child benefits    
                - mean_contributory_child_benefits: avg((child_benefit+school_aid/3+prenatal/3+birth_benefit/3), 
                                            filter=(child_benefit+prenatal/3+birth_benefit/3)!=0,weights=pondera)
            #Only the AUH benefits
                - mean_auh_benefits: avg((auh+pregnancy_sp+school_aid/3), 
                                            filter=(auh+pregnancy_sp)!=0,weights=pondera)
        #Second, the mean level of all family benefits (including thus the spouse and wedding benefits)
                - per_capita_family_benefits: if(discounted_v5_m==0, 0, 
                                                if(ISFEMALE,(discounted_v5_m-spouse_benefit-wedding_benefit/3)/children.count(age<18)+spouse_benefit+wedding_benefit/3,
                                                   (discounted_v5_m-spouse_benefit-wedding_benefit/3)/(children_bis.count(age<18)+spouse_benefit+wedding_benefit/3)))
                - mean_family_benefit: avg(per_capita_family_benefits,
                                             filter=per_capita_family_benefits !=0, weights=pondera)
    #8- Finally, we compute the gini index at the individual level for people of retirement age, then 65 or more, with and without pension income.        
                
                #COUNTERFACTUAL SCENARIO 2015: no changes in the computation of the first pension benefit after period 54
                - all_pension_income: discounted_v2_m
                - gini_ret_age_all: gini(discounted_itl+all_pension_income+discounted_v5_m,
                                            filter=age>=65 or (age>=60 and not male),weights=pondera)
                - gini_ret_age_non_labour: gini(all_pension_income+discounted_v5_m,
                                            filter=age>=65 or (age>=60 and not male),weights=pondera)
                - gini_65_all: gini(discounted_itl+all_pension_income+discounted_v5_m,
                                            filter=age>=65,weights=pondera)
                - gini_65_non_labour: gini(all_pension_income+discounted_v5_m,
                                            filter=age>=65,weights=pondera)
                                            
                - gini_ret_age_has_income_all: gini(discounted_itl+all_pension_income+discounted_v5_m,
                                            filter=age>=65 or (age>=60 and not male) and (discounted_itl+all_pension_income+discounted_v5_m)!=0,weights=pondera)
                - gini_ret_age_has_income_non_labour: gini(all_pension_income+discounted_v5_m,
                                            filter=age>=65 or (age>=60 and not male) and (all_pension_income+discounted_v5_m)!=0,weights=pondera)
                - gini_65_has_income_all: gini(discounted_itl+all_pension_income+discounted_v5_m,
                                            filter=age>=65 and (discounted_itl+all_pension_income+discounted_v5_m)!=0,weights=pondera)
                - gini_65_has_income_non_labour: gini(all_pension_income+discounted_v5_m,
                                            filter=age>=65 and (all_pension_income+discounted_v5_m)!=0,weights=pondera)
                
            #COUNTERFACTUAL SCENARIO 2015: there are no universal pensions. 
                - csv('period', 'Contributory pensioners share', 'Moratorium pensioners share','Retirement coverage for legal age',
                                    'Retirement coverage 65+', 'All coverage legal age', 'All coverage 65+','Contributory retirement coverage legal age', 'Contributory retirement coverage 65+', 'Survivors benefit coverage legal age', 'Survivors benefit coverage 65+', 'Moratorium benefit coverage legal age', 'Moratorium benefit coverage 65+',
                                        'Mean contributory retirement pension', 'Mean survivors benefit', 'Mean moratorium pension', 'Mean retirement pension', 'Mean pension benefit',
                                            'Median pension benefit', 'Median pension to labour income ratio', 'Mean pension to labour income ratio',
                                                'Mean family benefit', 'Mean child benefits', 'Mean contributory child benefits', 'Mean AUH benefits', 
                                                    'Child benefit coverage', 'Contributory child benefit coverage', 'AUH coverage',
                                                        'Gini, retirement age', 'Gini, retirement age, non labour income', 'Gini, 65+', 'Gini, 65+, non labour income', 
                                                            'Gini, retirement age, has income',  'Gini, retirement age, (has) non labour income', 'Gini, 65+, has income', 'Gini, 65+, (has) non labour income',
                                                        fname='adequacy_central.csv',mode='a')
                - csv(period, contributory_pensioners_share, moratorium_pensioners_share,
                            retirement_coverage_legal_age,retirement_coverage_65,all_coverage_legal_age,all_coverage_65,contributory_coverage_legal_age,contributory_coverage_65,survivors_coverage_legal_age,survivors_coverage_65,moratorium_coverage_legal_age,moratorium_coverage_65,
                                mean_contributory_retirement,mean_survivors_pension, mean_moratorium_pension, mean_retirement_pension, mean_pension_benefit,
                                    median_pension_benefit,pension_labour_ratio,mean_pension_labour_ratio,
                                        mean_family_benefit, mean_child_benefits, mean_contributory_child_benefits, mean_auh_benefits, 
                                            child_benefit_coverage, contributory_child_benefit_coverage, auh_coverage,
                                                gini_ret_age_all, gini_ret_age_non_labour, gini_65_all, gini_65_non_labour,
                                                    gini_ret_age_has_income_all, gini_ret_age_has_income_non_labour, gini_65_has_income_all, gini_65_has_income_non_labour,
                                            fname='adequacy_central.csv',mode='a')         
#Lastly, at the end of the period, we export all variables of interest into a csv format. The default HDF5 format is very impractical.               
#############################################################################################################################################
######COUNTERFACTUAL SCENARIO 2015: There are no universal pensions or pensions discounted with indexes published since June 2016.   
            dump_all: csv(dump(labour_market_state,id,household_id,mother_id,father_id,partner_id,little_children,minor_children, 
                            male,marital_status,age,pondera,
                                discounted_v2_m,disc_cost_v2_m,gross_retirement,net_retirement,gross_pension,net_pension,sac_jp_gross,sac_jp_net,liqui_retirement,
                                    car_sal,car_ind,car_mono_norref,itl_anses,discounted_itl,discounted_itl_gross,sect_quartile,seniority,lag_mono_1,lag_count_ind_1,medio_aguinaldo,medio_aguinaldo_gross,
                                        formation,student,university_year,polimodal,
                                            discounted_v5_m,child_benefit,auh,spouse_benefit,school_aid,wedding_benefit,prenatal,pregnancy_sp,birth_benefit,
                                                contribution_sal_SIPA,contribution_sal_PAMI,contribution_sal_obra_social,contribution_aut_SIPA,contribution_aut_PAMI,contribution_mono_SIPA,contribution_mono_obra_social,mono_integrated_tax,monotributo_cat,missing=0))                      

          
                                            
                                            
simulation:
#In this step, we define the execution order of our model's modules. 
    processes:     
    #We repeatedly compute household composition as well as the family group income at the household level. This is because processes at the 
            #person entity level often affect both household composition and the family group income. 
        - household: [household_composition]
    #The preliminary module is only executed once every 1000 periods (so only once). It is launched the very first period before all other person
            #modules. 
    #Demographic modules are executed at the beginning. Logically speaking, we first make individuals age, then simulate deaths and after that 
            #we simulate births. From an actuarial point of view, we should simulate mid-quarter population and determine births from this mid-quarter
            #population. It is not however very relevant for simulations with a quarterly step and difficult to implement in LIAM2. 
        - person: [[prelim, 1000],ageing,agegrouping,death,birth] 
        - household: [household_composition]
    #We then simulate the education and marital status modules. These give us explanatory variables for the labour-market behavioural equations and 
            #Mincer wage equations. They also determine access to various family benefits. 
        - person: [studying,marriage,get_a_life]
        - household: [household_composition]
    #After that, we determine labour-market behaviour of our individuals. We also compute seniority, labour income and social security contributions. 
        - person: [labour_market_state,seniority,income,contributions]
    #Our first computation at the household level of the family-group income is for determining access to Law 26970 moratorium pensions. 
        - household: [household_composition, igf_household]
    #We simulate retirement pensions before family benefits because the former enter in the computation of the Family-Group Income (IGF). Family benefits
            #are means-tested on the IGF. 
        - person: [retirement]
        - household: [household_composition,clean_empty, igf_household]
        - person: [family_benefits,adequacy] 
        - household: [redistribution]
       # - person: [dump_all] 
    #For debugging with the console, it is better to remove the dump_all instruction above, as it makes the code run twice as fast. 
            #It is only a necessary instruction if you intend to export the simulations and analyse them with a third-party software.
   # logging:
#This is an optional element, useful for debugging the code. The -breakpoint() instruction, insered at the same indentation level as other 
        #instructions, also helps in debugging as it stops the model at that line (granting access to all of the module's temporary variables
        #created at that step). 
    #    level: "processes"
         
    input:
        file: H:\LIAM2_commented_code\Prospective_simulations\Import_files\Seed_17101945_start_2015_t2\LIAM2_files\microsim_base_2015_t2.h5
        
    output:
        file: H:\LIAM2_commented_code\Prospective_simulations\delete_me.h5
        #With version 0.12, it becomes possible to make simulations without any h5 file by putting file: ''. 
                #However, we cannot do this because we get the following error term: ERROR: index 61028 is out of bounds for axis 0 with size 60959
                #when evaluating   (((-7.4967 + (0.0958 * lag(person.age))) + (-0.0012 * (lag(person.age) * lag(person.age)))) + (0.3929 * (((lag(person.labour_market_state) == 1) or ((lag(person.labour_market_state) == 2) or (lag(person.labour_market_state) == 3))) and ((lag(partner.labour_market_state) == 4) or (lag(partner.labour_market_state) == 5)))))
                #Until we find a workaround / a future LIAM2 update fixes this issue, we need to keep the (useless) output dataset. 
#For the fourth quarter of 2014, the initial period is 48. However, simulation actually starts at the following period. we must thus tell LIAM2 
        #to start the simulation at period 49. 
    start_period: 51 
    periods: 102
#The random seed ensures all random number generators are the same when we execute the same code twice. It is especially relevant when we want 
        #to run the model with various economic or demographic scenarios. 
    random_seed: 17101945
    #It is important to store in the comments the number of periods we should instruct this model to run before reaching the fourth quarter of 2014.
        #106
    default_entity: person
    
    
    
    
 
